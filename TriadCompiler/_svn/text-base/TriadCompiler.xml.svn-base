<?xml version="1.0"?>
<doc>
    <assembly>
        <name>TriadCompiler</name>
    </assembly>
    <members>
        <member name="T:TriadCompiler.IntegerSymbol">
            <summary>
            Информация о целой константе.
            </summary>
            <syntax>Значение поля indexStringCode должно быть IntegerValue</syntax>
        </member>
        <member name="T:TriadCompiler.Symbol">
            <summary>
            Информация о символе.
            </summary>
        </member>
        <member name="M:TriadCompiler.Symbol.#ctor">
            <summary>
            Конструктор
            </summary>
        </member>
        <member name="F:TriadCompiler.Symbol.code">
            <summary>
            Код символа
            </summary>
        </member>
        <member name="P:TriadCompiler.Symbol.Code">
            <summary>
            Код символа
            </summary>
            <Name>Code</Name>
        </member>
        <member name="F:TriadCompiler.IntegerSymbol.value">
            <summary>
            Целое значение символа
            </summary> 
        </member>
        <member name="M:TriadCompiler.IntegerSymbol.#ctor">
            <summary>
            Конструктор
            </summary>
        </member>
        <member name="P:TriadCompiler.IntegerSymbol.Value">
            <summary>
            Целое значение символа
            </summary> 
        </member>
        <member name="T:TriadCompiler.Parser.Structure.Statement.StructAssignement">
            <summary>
            Разбор оператора присваивания
            </summary>
        </member>
        <member name="T:TriadCompiler.CommonParser">
            <summary>
            Обобщенный класс, отвечающий за синтаксический и семантический разбор.
            </summary>
            <summary>
            Это часть класса CommonParser, отвечающая за разбор операторов.
            </summary>
        </member>
        <member name="F:TriadCompiler.CommonParser.currSymbol">
            <summary>
            Текущий символ
            </summary>
            <syntax>Обновляется функцией GetNextKey()</syntax>
        </member>
        <member name="F:TriadCompiler.CommonParser.currKey">
            <summary>
            Код текущего символа
            </summary>
        </member>
        <member name="F:TriadCompiler.CommonParser.designTypeName">
            <summary>
            Имя design типа, соответствующего разбираемой конструкции
            </summary>
        </member>
        <member name="M:TriadCompiler.CommonParser.Compile(TriadCompiler.EndKeyList)">
            <summary>
            Разбор и генерация кода
            </summary>
            <param name="endKey">Множество допустимых конечных символов</param>
        </member>
        <member name="M:TriadCompiler.CommonParser.GetNextKey">
            <summary>
            Получить следующий символ
            </summary>
        </member>
        <member name="M:TriadCompiler.CommonParser.SkipTo(TriadCompiler.EndKeyList)">
            <summary>
            Сканирование до получения любого символа из списка или конца файла
            </summary>
            <param name="keyList">Множество приемлемых символов</param>
        </member>
        <member name="M:TriadCompiler.CommonParser.Accept(TriadCompiler.Key)">
            <summary>
            Проверить соответсвие текущего символа ожидаемому
            </summary>
            <syntax>В случае несоответствия выдается ошибка с кодом символа</syntax>
            <param name="test_key">Ожилаемый символ</param>
        </member>
        <member name="M:TriadCompiler.CommonParser.Statement(TriadCompiler.EndKeyList,TriadCompiler.Parser.Common.Statement.StatementContext)">
            <summary>
            Обобщенный оператор
            </summary>
            <param name="endKeys">Множество конечных символов</param>
            <param name="context">Текущий контекст</param>
            <returns>Представление для генерации кода</returns>
        </member>
        <member name="M:TriadCompiler.CommonParser.RegisterStandardFuntions">
            <summary>
            Зарегистрировать стандартные функции
            </summary>
        </member>
        <member name="M:TriadCompiler.CommonParser.RegisterConvertionFunctions">
            <summary>
            Зарегистрировать функции преобразования типов
            </summary>
        </member>
        <member name="M:TriadCompiler.CommonParser.RegisterRandomFunctions">
            <summary>
            Зарегистрировать функции для работы со случайными величинами
            </summary>
        </member>
        <member name="M:TriadCompiler.CommonParser.RegisterMathFunctions">
            <summary>
            Зарегистрировать математические функции
            </summary>
        </member>
        <member name="M:TriadCompiler.CommonParser.RegisterSetFunctions">
            <summary>
            Зарегистрировать функции над мн-вами
            </summary>
        </member>
        <member name="M:TriadCompiler.CommonParser.RegisteGraphFunction">
            <summary>
            зарегистрировать функции для работы с графами
            </summary>
        </member>
        <member name="P:TriadCompiler.CommonParser.DesignTypeName">
            <summary>
            Имя design типа, соответствующего разбираемой конструкции
            </summary>
        </member>
        <member name="P:TriadCompiler.CommonParser.err">
            <summary>
            Ссылка на экземпляр класса регистрации ошибок
            </summary>
        </member>
        <member name="P:TriadCompiler.CommonParser.varArea">
            <summary>
            Ссылка на обработчик областей видимости переменных
            </summary>
        </member>
        <member name="P:TriadCompiler.CommonParser.CurrentSymbol">
            <summary>
            Текущий символ
            </summary>
        </member>
        <member name="M:TriadCompiler.Parser.Structure.Statement.StructAssignement.Parse(TriadCompiler.EndKeyList)">
            <summary>
            Построение графовой модели
            </summary>
            <param name="endKeys">Множество конечных символов</param>
            <syntax>DesignVariable := StructExpression</syntax>
        </member>
        <member name="M:TriadCompiler.Parser.Structure.Statement.StructAssignement.CheckDesignTypes(TriadCompiler.IExprType,TriadCompiler.IExprType)">
            <summary>
            проверить совместимость design типов в операторе присваивания
            </summary>
            <param name="varType">тип переменной</param>
            <param name="exprType">тип присваиваемого выражения</param>
            <returns></returns>
        </member>
        <member name="T:TriadCompiler.Parser.Common.Statement.Condition">
            <summary>
            Разбор условного оператора
            </summary>
        </member>
        <member name="M:TriadCompiler.Parser.Common.Statement.Condition.Parse(TriadCompiler.EndKeyList,TriadCompiler.Parser.Common.Statement.StatementContext)">
            <summary>
            Условный оператор
            </summary>
            <syntax>If Expression Then StatementList [Else StatementList] EndIf</syntax>
            <param name="endKeys">Множество конечных символов</param>
            <param name="context">Текущий контекст</param>
            <returns>Представление для генерации кода</returns>
        </member>
        <member name="M:TriadCompiler.Parser.Common.Statement.Condition.CheckConditionType(TriadCompiler.Parser.Common.Expr.ExprInfo)">
            <summary>
            Проверить совместимость типов в условии оператора if или while
            </summary>
            <param name="conditionInfo">Информация об условии</param>
        </member>
        <member name="T:TriadCompiler.Code.Generator.CommonGenerator">
            <summary>
            Генерация кода
            </summary>
        </member>
        <member name="F:TriadCompiler.Code.Generator.CommonGenerator.CoreFilePath">
            <summary>
            Путь к файлу с кодом ядра
            </summary>
        </member>
        <member name="M:TriadCompiler.Code.Generator.CommonGenerator.#ctor">
            <summary>
            Конструктор
            </summary>
        </member>
        <member name="M:TriadCompiler.Code.Generator.CommonGenerator.AddTypeInUnit(System.CodeDom.CodeTypeDeclaration)">
            <summary>
            Добавление кода класса к сборку
            </summary>
            <param name="typeCode"></param>
        </member>
        <member name="M:TriadCompiler.Code.Generator.CommonGenerator.AddReference(System.String)">
            <summary>
            Добавить ссылку на другую сборку
            </summary>
            <param name="fileName">Имя сборки</param>
        </member>
        <member name="M:TriadCompiler.Code.Generator.CommonGenerator.GenerateCode(System.String)">
            <summary>
            Создать код
            </summary>
            <param name="fileName">Имя сборки</param>
        </member>
        <member name="M:TriadCompiler.Code.Generator.CommonGenerator.Reload">
            <summary>
            Подготовить генератор кода к новой компиляции
            </summary>
        </member>
        <member name="F:TriadCompiler.Code.Generator.CommonGenerator.unitCode">
            <summary>
            Создаваемая сборка
            </summary>
        </member>
        <member name="F:TriadCompiler.Code.Generator.CommonGenerator.namespaceCode">
            <summary>
            Пространство имен
            </summary>
        </member>
        <member name="T:TriadCompiler.DesignTypeCode">
            <summary>
            Коды модельных типов
            </summary>
        </member>
        <member name="F:TriadCompiler.DesignTypeCode.Structure">
            <summary>
            Структура
            </summary>
        </member>
        <member name="F:TriadCompiler.DesignTypeCode.Routine">
            <summary>
            Рутина
            </summary>
        </member>
        <member name="F:TriadCompiler.DesignTypeCode.Model">
            <summary>
            Модель
            </summary>
        </member>
        <member name="F:TriadCompiler.DesignTypeCode.Design">
            <summary>
            Дизайн
            </summary>
        </member>
        <member name="F:TriadCompiler.DesignTypeCode.NoType">
            <summary>
            Пустой тип
            </summary>
        </member>
        <member name="T:TriadCompiler.Parser.Common.ObjectRef.ObjectRefInfo">
            <summary>
            Описание ссылки на диапазон объектов
            </summary>
        </member>
        <member name="M:TriadCompiler.Parser.Common.ObjectRef.ObjectRefInfo.AddIndexBounds(TriadCompiler.Parser.Common.ObjectRef.ObjectRefInfo.IndexBounds)">
            <summary>
            Добавить описание диапазона индекса
            </summary>
            <param name="indexBounds">Диапазон</param>
        </member>
        <member name="M:TriadCompiler.Parser.Common.ObjectRef.ObjectRefInfo.AddIndexBounds(TriadCompiler.Parser.Common.ObjectRef.ObjectRefInfo.IndexBounds[])">
            <summary>
            Добавить описание диапазона индекса
            </summary>
            <param name="indexBoundArray">Массив диапазонов</param>
        </member>
        <member name="M:TriadCompiler.Parser.Common.ObjectRef.ObjectRefInfo.AppendStrCode(System.String)">
            <summary>
            Добавить часть строкового представления
            </summary>
            <param name="code">Добавляемая часть</param>
        </member>
        <member name="F:TriadCompiler.Parser.Common.ObjectRef.ObjectRefInfo.objectName">
            <summary>
            Имя объекта
            </summary>
        </member>
        <member name="F:TriadCompiler.Parser.Common.ObjectRef.ObjectRefInfo.isIndexRange">
            <summary>
            Признак диапазона
            </summary>
        </member>
        <member name="F:TriadCompiler.Parser.Common.ObjectRef.ObjectRefInfo.indexBounds">
            <summary>
            Диапазоны изменения индексов
            </summary>
        </member>
        <member name="F:TriadCompiler.Parser.Common.ObjectRef.ObjectRefInfo.coreNameCode">
            <summary>
            Код, соответствующий ссылке на диапазон объектов
            </summary>
        </member>
        <member name="F:TriadCompiler.Parser.Common.ObjectRef.ObjectRefInfo.codeStr">
            <summary>
            Строковое представление переменной
            </summary>
        </member>
        <member name="P:TriadCompiler.Parser.Common.ObjectRef.ObjectRefInfo.Name">
            <summary>
            Имя объекта
            </summary>
        </member>
        <member name="P:TriadCompiler.Parser.Common.ObjectRef.ObjectRefInfo.IndexBoundArray">
            <summary>
            Диапазоны изменения индексов
            </summary>
        </member>
        <member name="P:TriadCompiler.Parser.Common.ObjectRef.ObjectRefInfo.HasIndexes">
            <summary>
            Наличие индексов
            </summary>
        </member>
        <member name="P:TriadCompiler.Parser.Common.ObjectRef.ObjectRefInfo.IsRange">
            <summary>
            Признак диапазона
            </summary>
        </member>
        <member name="P:TriadCompiler.Parser.Common.ObjectRef.ObjectRefInfo.IndexCount">
            <summary>
            Число индексов
            </summary>
        </member>
        <member name="P:TriadCompiler.Parser.Common.ObjectRef.ObjectRefInfo.CoreNameCode">
            <summary>
            Код, соответствующий ссылке на диапазон объектов
            </summary>
        </member>
        <member name="P:TriadCompiler.Parser.Common.ObjectRef.ObjectRefInfo.StrCode">
            <summary>
            Строковое представление переменной
            Если указан диапазон, то в строковое представление пишутся только нижние индексы
            </summary>
        </member>
        <member name="T:TriadCompiler.Parser.Common.ObjectRef.ObjectRefInfo.IndexBounds">
            <summary>
            Описание диапазона изменения одного индекса
            </summary>
        </member>
        <member name="M:TriadCompiler.Parser.Common.ObjectRef.ObjectRefInfo.IndexBounds.#ctor(TriadCompiler.Parser.Common.Expr.ExprInfo,TriadCompiler.Parser.Common.Expr.ExprInfo)">
            <summary>
            Конструктор
            </summary>
            <param name="lowIndexExpr">Выражение, описывающее нижнюю границу диапазона</param>
            <param name="topIndexExpr">Выражение, описывающее верхнюю границу диапазона</param>
        </member>
        <member name="F:TriadCompiler.Parser.Common.ObjectRef.ObjectRefInfo.IndexBounds.lowIndexExpr">
            <summary>
            Выражение, описывающее нижнюю границу диапазона
            </summary>
        </member>
        <member name="F:TriadCompiler.Parser.Common.ObjectRef.ObjectRefInfo.IndexBounds.topIndexExpr">
            <summary>
            Выражение, описывающее верхнюю границу диапазона
            </summary>
        </member>
        <member name="T:TriadCompiler.Parser.Common.Expr.SimpleFact.SimpleFactor">
            <summary>
            Разбор простого множителя в арифметическом выражении
            </summary>
        </member>
        <member name="F:TriadCompiler.Parser.Common.Expr.SimpleFact.SimpleFactor.simpleFactorSet">
            <summary>
            Множество стартовых символов простого множителя
            </summary>
        </member>
        <member name="F:TriadCompiler.Parser.Common.Expr.SimpleFact.SimpleFactor.constantSet">
            <summary>
            Множество стартовых символов константы
            </summary>
        </member>
        <member name="M:TriadCompiler.Parser.Common.Expr.SimpleFact.SimpleFactor.Parse(TriadCompiler.EndKeyList)">
            <summary>
            Простой множитель
            </summary>
            <syntax>Constant | Variable | ( Expression )</syntax>
            <param name="endKeys">Допустимые конечные символы</param>
            <returns>Информация о выражении</returns>
        </member>
        <member name="M:TriadCompiler.Parser.Common.Expr.SimpleFact.SimpleFactor.TypeCast(TriadCompiler.EndKeyList)">
            <summary>
            Приведение типов
            </summary>
            <param name="endKeys">Допустимые конечные символы</param>
            <returns>Информация о выражении</returns>
        </member>
        <member name="M:TriadCompiler.Parser.Common.Expr.SimpleFact.SimpleFactor.CheckCastTypes(TriadCompiler.VarType,TriadCompiler.Parser.Common.Expr.ExprInfo)">
            <summary>
            Проверить
            </summary>
            <param name="castType">Тип, к которому нужно привести</param>
            <param name="exprInfo">Описание выражения</param>
            <returns>True, если приведение допустимо</returns>
        </member>
        <member name="P:TriadCompiler.Parser.Common.Expr.SimpleFact.SimpleFactor.SimpleFactorStartKeys">
            <summary>
            Стартовые символы простого множителя
            </summary>
        </member>
        <member name="P:TriadCompiler.Parser.Common.Expr.SimpleFact.SimpleFactor.ConstantStartKeys">
            <summary>
            Стартовые символы константы
            </summary>
        </member>
        <member name="T:TriadCompiler.Parser.Common.Expr.SimpleExpr.SimpleExpression">
            <summary>
            Генерация кода для простого выражени в арифметическом выражении
            </summary>
            <summary>
            Проверка типов для простого выражения в арифметическом выражении
            </summary>
            <summary>
            Разбор простого выражения в арифметическом выражении
            </summary>
        </member>
        <member name="M:TriadCompiler.Parser.Common.Expr.SimpleExpr.SimpleExpression.BuildStringCodeForSimpleExpression(TriadCompiler.Parser.Common.Expr.ExprInfo,TriadCompiler.Parser.Common.Expr.ExprInfo,TriadCompiler.Key)">
            <summary>
            Генерация кода в простом выражении
            </summary>
            <param name="info">Информация о всем простом выражении</param>
            <param name="nextAddendInfo">Информация о текущем слагаемом</param>
            <param name="addendOperation">Операция сложения</param>
        </member>
        <member name="M:TriadCompiler.Parser.Common.Expr.SimpleExpr.SimpleExpression.CheckTypeInAddend(TriadCompiler.IExprType,TriadCompiler.IExprType,TriadCompiler.Key)">
            <summary>
            Совместимость типов на уровне Addend
            </summary>
            <param name="prevType">Тестируемый тип</param>
            <param name="nextType">Тестируемый тип</param>
            <param name="operation">Код операции</param>
            <returns>Результирующий тип после выполнения операции</returns>
        </member>
        <member name="M:TriadCompiler.Parser.Common.Expr.SimpleExpr.SimpleExpression.CheckTypeInMinusAddend(TriadCompiler.IExprType)">
            <summary>
            Совместимость типов в операции minus
            </summary>
            <param name="type">Тестируемый тип</param>
            <returns>Результирующий тип после выполнения операции</returns>
        </member>
        <member name="F:TriadCompiler.Parser.Common.Expr.SimpleExpr.SimpleExpression.addSet">
            <summary>
            Множество операций сложения
            </summary>
        </member>
        <member name="M:TriadCompiler.Parser.Common.Expr.SimpleExpr.SimpleExpression.Parse(TriadCompiler.EndKeyList)">
            <summary>
            Простое выражение
            </summary>
            <syntax>[-]Addend {ADD_OP Addend}</syntax>
            <param name="endKeys">Множество конечных символов</param>
        </member>
        <member name="P:TriadCompiler.Parser.Common.Expr.SimpleExpr.SimpleExpression.AddKeys">
            <summary>
            Множество операций сложения
            </summary>
        </member>
        <member name="T:TriadCompiler.SetType">
            <summary>
            Тип множества
            </summary>
        </member>
        <member name="T:TriadCompiler.IExprType">
            <summary>
            Интерфейс типа выражения
            </summary>
        </member>
        <member name="T:TriadCompiler.ISpyType">
            <summary>
            Интерфейс типа spy-объекта
            </summary>
        </member>
        <member name="T:TriadCompiler.ICommonType">
            <summary>
            Любой тип
            </summary>
        </member>
        <member name="P:TriadCompiler.ICommonType.Name">
            <summary>
            Имя переменной
            </summary>
        </member>
        <member name="P:TriadCompiler.ISpyType.IsSpyObject">
            <summary>
            Признак spy-объекта
            </summary>
        </member>
        <member name="M:TriadCompiler.IExprType.Clone">
            <summary>
            Продублировать тип
            </summary>
            <returns>Дубль</returns>
        </member>
        <member name="P:TriadCompiler.IExprType.Code">
            <summary>
            Код типа переменной
            </summary>
        </member>
        <member name="F:TriadCompiler.SetType.setName">
            <summary>
            Имя множества
            </summary>
        </member>
        <member name="F:TriadCompiler.SetType.code">
            <summary>
            Код типа элементов множества
            </summary>
        </member>
        <member name="F:TriadCompiler.SetType.isSpyObject">
            <summary>
            Признак spy-объекта
            </summary>
        </member>
        <member name="M:TriadCompiler.SetType.#ctor(TriadCompiler.TypeCode)">
            <summary>
            Конструктор
            </summary>
            <param name="code">Код типа элементов множества</param>
        </member>
        <member name="M:TriadCompiler.SetType.#ctor(TriadCompiler.TypeCode,System.String)">
            <summary>
            Конструктор
            </summary>
            <param name="code">Код типа элементов множества</param>
            <param name="setName">Имя множества</param>
        </member>
        <member name="M:TriadCompiler.SetType.Clone">
            <summary>
            Продублировать тип
            </summary>
            <returns>Дубль</returns>
        </member>
        <member name="P:TriadCompiler.SetType.Code">
            <summary>
            Код типа переменной
            </summary>
        </member>
        <member name="P:TriadCompiler.SetType.Name">
            <summary>
            Имя переменной переменной
            </summary>
        </member>
        <member name="P:TriadCompiler.SetType.IsSpyObject">
            <summary>
            Признак spy-объекта
            </summary>
        </member>
        <member name="T:TriadCompiler.IProcedureType">
            <summary>
            Тип, описывающий информационную процедуру
            </summary>
        </member>
        <member name="T:TriadCompiler.ParameterList`1">
            <summary>
            Параметризованный тип
            </summary>
            <typeparam name="ItemType">Тип элемента</typeparam>
        </member>
        <member name="M:TriadCompiler.ParameterList`1.AddParameter(`0)">
            <summary>
            Добавить параметр
            </summary>
            <param name="paramType">Тип параметра</param>
        </member>
        <member name="M:TriadCompiler.ParameterList`1.AddParameterList(System.Collections.Generic.List{`0})">
            <summary>
            Добавить список параметров
            </summary>
            <param name="paramTypeList">Список типов параметров</param>
        </member>
        <member name="M:TriadCompiler.ParameterList`1.GetEnumerator">
            <summary>
            Получить счетчик параметров
            </summary>
            <returns></returns>
        </member>
        <member name="F:TriadCompiler.ParameterList`1.paramList">
            <summary>
            Список параметров
            </summary>
        </member>
        <member name="P:TriadCompiler.ParameterList`1.ParameterCount">
            <summary>
            Число параметров
            </summary>
        </member>
        <member name="M:TriadCompiler.IProcedureType.#ctor(System.String)">
            <summary>
            Конструктор
            </summary>
            <param name="typeName">Имя типа</param>
        </member>
        <member name="M:TriadCompiler.IProcedureType.#ctor(System.String,TriadCompiler.TypeCode)">
            <summary>
            Конструктор
            </summary>
            <param name="typeName">Имя типа</param>
            <param name="returnedType">Возращаемое значение</param>
        </member>
        <member name="F:TriadCompiler.IProcedureType.returnedType">
            <summary>
            Код типа результата
            </summary>
        </member>
        <member name="F:TriadCompiler.IProcedureType.typeName">
            <summary>
            Имя ИП
            </summary>
        </member>
        <member name="F:TriadCompiler.IProcedureType.description">
            <summary>
            Имя ИП в коде
            </summary>
        </member>
        <member name="F:TriadCompiler.IProcedureType.OutVarList">
            <summary>
            Список out-переменных
            </summary>
        </member>
        <member name="F:TriadCompiler.IProcedureType.ParamVarList">
            <summary>
            Список параметров ИП
            </summary>
        </member>
        <member name="P:TriadCompiler.IProcedureType.ReturnCode">
            <summary>
            Код типа результата
            Это свойство переопределяется в IConditionType
            </summary>
        </member>
        <member name="P:TriadCompiler.IProcedureType.Name">
            <summary>
            Имя
            </summary>
        </member>
        <member name="P:TriadCompiler.IProcedureType.Description">
            <summary>
            Описание
            </summary>
        </member>
        <member name="T:TriadCompiler.IConditionType">
            <summary>
            Тип условий моделирования
            </summary>
        </member>
        <member name="M:TriadCompiler.IConditionType.#ctor(System.String)">
            <summary>
            Конструктор
            </summary>
            <param name="conditionName">Имя условий моделирования</param>
        </member>
        <member name="P:TriadCompiler.IConditionType.ReturnCode">
            <summary>
            Возвращаемое значение (пустое - т.к. у условий моделирования его нет)
            </summary>
        </member>
        <member name="T:TriadCompiler.Parser.Routine.Statement.Schedule">
            <summary>
            Разбор оператора планирования событий
            </summary>
        </member>
        <member name="M:TriadCompiler.Parser.Routine.Statement.Schedule.Parse(TriadCompiler.EndKeyList)">
            <summary>
            Оператор планирования
            </summary>
            <syntax>SCHEDULE Identificator{,Identificator} At Expression</syntax>
            <param name="endKeys">Множество конечных символов</param>
            <returns>Представление для генерации кода</returns>  
        </member>
        <member name="T:TriadCompiler.Parser.Model.Statement.PutRoutine">
            <summary>
            Разбоп оператора наложения рутины
            </summary>
        </member>
        <member name="M:TriadCompiler.Parser.Model.Statement.PutRoutine.Parse(TriadCompiler.EndKeyList)">
            <summary>
            Оператор наложения рутин
            </summary>
            <param name="endKeys">Множество допустимых конечных символов</param>
            <syntax>Put DesignVariable On DesignVariable.ObjectReference #PolusPairList#</syntax>
            <returns>Сгенерированный код</returns>
        </member>
        <member name="M:TriadCompiler.Parser.Model.Statement.PutRoutine.PolusPairList(TriadCompiler.EndKeyList,System.String)">
            <summary>
            Разбор списка соответствий полюсов рутины и вершины
            </summary>
            <param name="endKeys">Множество допустимых конечных символов</param>
            <param name="routineVarName">Имя рутины-переменной</param>
            <synatx> {SinglePolusPair} </synatx>
            <returns>Список операторов</returns>
        </member>
        <member name="M:TriadCompiler.Parser.Model.Statement.PutRoutine.SinglePolusPair(TriadCompiler.EndKeyList,System.String)">
            <summary>
            Разбор одного соответствия между полюсом рутины и вершины
            </summary>
            <param name="endKeys">Множество допустимых конечных символов</param>
            <param name="routineVarName">Имя рутины-переменной</param>
            <syntax>PolusVar = PolusVar</syntax>
            <returns>Оператор</returns>
        </member>
        <member name="T:TriadCompiler.Parser.Common.Polus.PolusVar">
            <summary>
            Разбор полюса / диапазона полюсов
            </summary>
        </member>
        <member name="M:TriadCompiler.Parser.Common.Polus.PolusVar.Parse(TriadCompiler.EndKeyList)">
            <summary>
            Имя полюса
            </summary>
            <syntax>Identificator [ Expression : Expression ]</syntax>
            <param name="endKeys">Множество конечных символов</param>
            <returns>Информацию о полюсе</returns>
        </member>
        <member name="T:TriadCompiler.VarArrayType">
            <summary>
            Тип массивов.
            </summary>
        </member>
        <member name="T:TriadCompiler.IndexedType">
            <summary>
            Обобщенный индексированный тип
            </summary>
        </member>
        <member name="M:TriadCompiler.IndexedType.SetNewIndex(System.Int32)">
            <summary>
            Задать новый индекс
            </summary>
            <param name="indexMaxValue">Верхняя граница изменения индекса</param>
            <exception cref="T:System.ArgumentException">Левая граница индекса больше, чем правая
            </exception>
        </member>
        <member name="M:TriadCompiler.IndexedType.IsValidIndex(System.Int32,System.Int32)">
            <summary>
            Проверка принадлежности значения индекса его объевленному диапазону
            </summary>
            <param name="indexValue">Значение индекса</param>
            <param name="indexNumber">Порядковый номер индекса</param>
            <returns>true, если значение индекса попадает в границы</returns>
        </member>
        <member name="M:TriadCompiler.IndexedType.GetEnumerator">
            <summary>
            Получить счетчик по верхним границам индексов
            </summary>
            <returns></returns>
        </member>
        <member name="P:TriadCompiler.IndexedType.IndexCount">
            <summary>
            Получить размерность массива
            </summary>
        </member>
        <member name="M:TriadCompiler.VarArrayType.#ctor(TriadCompiler.TypeCode)">
            <summary>
            Конструктор
            </summary>
            <param name="typeCode">Код базового типа</param>
        </member>
        <member name="M:TriadCompiler.VarArrayType.#ctor(TriadCompiler.TypeCode,System.String)">
            <summary>
            Конструктор
            </summary>
            <param name="typeCode">Код базового типа</param>
            <param name="varName">Имя переменной</param>
        </member>
        <member name="M:TriadCompiler.VarArrayType.Clone">
            <summary>
            Создать копию
            </summary>
            <returns></returns>
        </member>
        <member name="F:TriadCompiler.VarArrayType.varName">
            <summary>
            Имя массива
            </summary>
        </member>
        <member name="F:TriadCompiler.VarArrayType.isSpyObject">
            <summary>
            Признак spy-объекта
            </summary>
        </member>
        <member name="F:TriadCompiler.VarArrayType.code">
            <summary>
            Код базового типа массива
            </summary>
        </member>
        <member name="P:TriadCompiler.VarArrayType.Code">
            <summary>
            Код типа переменной
            </summary>
        </member>
        <member name="P:TriadCompiler.VarArrayType.Name">
            <summary>
            Имя переменной переменной
            </summary>
        </member>
        <member name="P:TriadCompiler.VarArrayType.IsSpyObject">
            <summary>
            Признак spy-объекта
            </summary>
        </member>
        <member name="T:TriadCompiler.IOConst">
            <summary>
            Константы IO
            </summary>
        </member>
        <member name="F:TriadCompiler.IOConst.MaxErrorCountInLine">
            <summary>
            Максимальное число ошибок в одной строке
            </summary>
        </member>
        <member name="F:TriadCompiler.IOConst.TooManyErrorsInLineMessage">
            <summary>
            Сообщение о превышении max числа ошибок в строке
            </summary>
        </member>
        <member name="T:TriadCompiler.IO">
            <summary>
            Класс IO - абстрактный класс, обеспечивающий по-символьный ввод при помощи
            функции GetCh и показ ошибок при помощи ShowError
            </summary>
        </member>
        <member name="M:TriadCompiler.IO.#ctor(TriadCompiler.Input,TriadCompiler.Output)">
            <summary>
            Конструктор
            </summary>
            <param name="input">Ввод</param>
            <param name="output">Вывод</param>
        </member>
        <member name="M:TriadCompiler.IO.SetNextString">
            <summary>
            Начать считывать символы со следующей строки.
            Следующим считанным символом станет пробел.
            </summary>
        </member>
        <member name="M:TriadCompiler.IO.GetCh">
            <summary>
            Посимвольный ввод
            </summary>
            <returns>Прочитанный символ</returns>
        </member>
        <member name="M:TriadCompiler.IO.ShowError(System.String)">
            <summary>
            Показ ошибки
            </summary>
            <param name="message">Текст сообщения</param>
        </member>
        <member name="F:TriadCompiler.IO.output">
            <summary>
            Класс, отвечающий за вывод листинга
            </summary>
        </member>
        <member name="F:TriadCompiler.IO.input">
            <summary>
            Ввод текста
            </summary>
        </member>
        <member name="P:TriadCompiler.IO.Input">
            <summary>
            Ввод
            </summary>
        </member>
        <member name="P:TriadCompiler.IO.Output">
            <summary>
            Вывод
            </summary>
        </member>
        <member name="T:TriadCompiler.IOListing">
            <summary>
            Класс IOListing - класс, обеспечивающий по-символьный ввод при помощи
            функции GetCh и показ ошибок при помощи ShowError.
            При этом он формирует листинг программы.
            В конструктор класса должны передаваться классы, отвечающие за
            ввод данных и запись листинга 
            </summary>
        </member>
        <member name="M:TriadCompiler.IOListing.#ctor(TriadCompiler.Input,TriadCompiler.Output)">
            <summary>
            Конструктор
            </summary>
            <param name="input">Класс, который отвечает за чтение информации</param>
            <param name="output">Отвечает за печать листинга</param>
        </member>
        <member name="M:TriadCompiler.IOListing.SetNextString">
            <summary>
            Начать считывать символы со следующей строки.
            Следующим считанным символом станет пробел.
            </summary>
        </member>
        <member name="M:TriadCompiler.IOListing.GetCh">
            <summary>
            Посимвольный ввод
            </summary>
            <returns>Прочитанный символ</returns>
        </member>
        <member name="M:TriadCompiler.IOListing.ShowError(System.String)">
            <summary>
            Показ ошибки
            </summary>
            <param name="message">Текст сообщения</param>
            <exception cref="T:System.ArgumentNullException">
            	<para>Значение аргумента <paramref Name="message"/> равно <langword Name="null"/>.</para>
            </exception>
        </member>
        <member name="M:TriadCompiler.IOListing.PrintAllErrorsInLastLine">
            <summary>
            Напечатать все ошибки, относящиеся к последней строке
            исходного файла (они добавляются функцией PrintError)
            </summary>
        </member>
        <member name="F:TriadCompiler.IOListing.lineNumber">
            <summary>
            Номер текущей строки
            </summary>
        </member>
        <member name="F:TriadCompiler.IOListing.linePosition">
            <summary>
            Позиция текущего символа в последней прочитанной строке
            </summary>
        </member>
        <member name="F:TriadCompiler.IOListing.tabCountInCurrLine">
            <summary>
            Число табуляций в последней строке
            </summary>
        </member>
        <member name="T:TriadCompiler.DesignVarType">
            <summary>
            Тип обычной design переменной
            </summary>
        </member>
        <member name="T:TriadCompiler.IDesignVarType">
            <summary>
            Интерфейс design переменной
            </summary>
        </member>
        <member name="P:TriadCompiler.IDesignVarType.TypeCode">
            <summary>
            Тип design переменной
            </summary>
        </member>
        <member name="M:TriadCompiler.DesignVarType.#ctor(System.String,TriadCompiler.DesignTypeCode)">
            <summary>
            Конструктор
            </summary>
            <param name="varName">Имя переменной</param>
            <param name="typeCode">Тип design переменной</param>
        </member>
        <member name="F:TriadCompiler.DesignVarType.code">
            <summary>
            Код типа элементов множества
            </summary>
        </member>
        <member name="F:TriadCompiler.DesignVarType.isSpyObject">
            <summary>
            Признак spy-объекта
            </summary>
        </member>
        <member name="M:TriadCompiler.DesignVarType.Clone">
            <summary>
            Продублировать тип
            </summary>
            <returns>Дубль</returns>
        </member>
        <member name="F:TriadCompiler.DesignVarType.varName">
            <summary>
            Имя переменной
            </summary>
        </member>
        <member name="F:TriadCompiler.DesignVarType.typeCode">
            <summary>
            Тип дизайн-переменной
            </summary>
        </member>
        <member name="P:TriadCompiler.DesignVarType.Name">
            
             <summary>
             Имя
             </summary>
        </member>
        <member name="P:TriadCompiler.DesignVarType.TypeCode">
            <summary>
            Тип design переменной
            </summary>
        </member>
        <member name="P:TriadCompiler.DesignVarType.Code">
            <summary>
            Код типа переменной
            </summary>
        </member>
        <member name="P:TriadCompiler.DesignVarType.IsSpyObject">
            <summary>
            Признак spy-объекта
            </summary>
        </member>
        <member name="T:TriadCompiler.CodeBuilder">
            <summary>
            Обобщенный построитель кода
            !!! Все переменные-члены этого класса должны пересоздаваться в методе Reload
            </summary>
        </member>
        <member name="M:TriadCompiler.CodeBuilder.SetClassName(System.String)">
            <summary>
            Задать имя класса
            </summary>
            <param name="className">Имя генерируемого класса</param>
        </member>
        <member name="M:TriadCompiler.CodeBuilder.AddParameterInConstructor(TriadCompiler.IExprType,System.String)">
            <summary>
            Добавить параметр в конструктор класса
            </summary>
            <param name="varType">Тип параметра</param>
            <param name="varName">Имя параметра</param>
        </member>
        <member name="M:TriadCompiler.CodeBuilder.AddVarDefinition(TriadCompiler.IExprType)">
            <summary>
            Добавить объявление переменной
            </summary>
            <param name="varType">Тип переменной</param>
        </member>
        <member name="M:TriadCompiler.CodeBuilder.GetDesignVarDefinitionStatements(TriadCompiler.IDesignVarType)">
            <summary>
            Добавить design переменную
            </summary>
            <param name="designVarType">Тип design переменной</param>
        </member>
        <member name="M:TriadCompiler.CodeBuilder.AddVarDefinition(System.Collections.Generic.List{TriadCompiler.IExprType})">
            <summary>
            Добавить объявления переменных
            </summary>
            <param name="varTypeList">Список типов переменных</param>
        </member>
        <member name="M:TriadCompiler.CodeBuilder.GetIndexFieldInitialization(System.String,TriadCompiler.IndexedType)">
            <summary>
            Сгенерировать инициализацию для массива
            </summary>
            <param name="baseTypeString">Базовый тип массива</param>
            <param name="indexType">Информация о массива</param>
            <returns></returns>
        </member>
        <member name="M:TriadCompiler.CodeBuilder.GetSetFieldInitialization">
            <summary>
            Сгенерировать инициализацию переменной-множества
            </summary>
            <returns></returns>
        </member>
        <member name="M:TriadCompiler.CodeBuilder.GetBaseTypeString(TriadCompiler.IExprType)">
            <summary>
            Получить строковую запись базового типа переменной (без индексов в массивах)
            </summary>
            <param name="varType">Тип переменной</param>
            <returns></returns>
        </member>
        <member name="M:TriadCompiler.CodeBuilder.GetTypeString(System.String,TriadCompiler.ICommonType)">
            <summary>
            Получить строковое представление типа переменной (возможно с индексами)
            </summary>
            <param name="baseTypeString">Базовый тип переменной (без индексов)</param>
            <param name="varType">Тип переменной</param>
            <returns></returns>
        </member>
        <member name="M:TriadCompiler.CodeBuilder.AddPrivateMethod(System.String,System.CodeDom.CodeStatementCollection)">
            <summary>
            Добавить обычную функцию
            </summary>
            <param name="methodName">Имя имя метода</param>
            <param name="statementList">Список операторов</param>
        </member>
        <member name="M:TriadCompiler.CodeBuilder.SetBaseClass(System.String)">
            <summary>
            Задать родительский класс
            </summary>
            <param name="baseClassName">Имя родительского класса</param>
        </member>
        <member name="M:TriadCompiler.CodeBuilder.AddMethod(System.CodeDom.CodeMemberMethod)">
            <summary>
            Добавить метод
            </summary>
            <param name="method">Описание метода</param>
        </member>
        <member name="M:TriadCompiler.CodeBuilder.Build">
            <summary>
            Сгенерировать код
            </summary>
        </member>
        <member name="M:TriadCompiler.CodeBuilder.Reload">
            <summary>
            Подготовить построитель кода для новой компиляции
            </summary>
        </member>
        <member name="F:TriadCompiler.CodeBuilder.resultClass">
            <summary>
            Итоговый класс
            </summary>
        </member>
        <member name="F:TriadCompiler.CodeBuilder.codeConstructor">
            <summary>
            Конструктор итогового класса (=null, если он не нужен)
            </summary>
        </member>
        <member name="T:TriadCompiler.Parser.Routine.Statement.Cancel">
            <summary>
            Разбор оператора отмена событий
            </summary>
        </member>
        <member name="M:TriadCompiler.Parser.Routine.Statement.Cancel.Parse(TriadCompiler.EndKeyList)">
            <summary>
            Оператор отмены событий 
            </summary>
            <syntax>Cancel Identificator {,Identificator}</syntax>
            <param name="endKeys">Множество конечных символов</param>
            <returns>Представление для генерации кода</returns>
        </member>
        <member name="T:TriadCompiler.Parser.Common.Statement.AssignContext">
            <summary>
            Констект вызова оператора присваивания
            </summary>
        </member>
        <member name="F:TriadCompiler.Parser.Common.Statement.AssignContext.Routine">
            <summary>
            В рутине
            </summary>
        </member>
        <member name="F:TriadCompiler.Parser.Common.Statement.AssignContext.Common">
            <summary>
            Где-то еще
            </summary>
        </member>
        <member name="T:TriadCompiler.Parser.Common.Statement.Assignement">
            <summary>
            Разбор оператора присваивания переменных
            </summary>
        </member>
        <member name="M:TriadCompiler.Parser.Common.Statement.Assignement.Parse(TriadCompiler.EndKeyList,TriadCompiler.Parser.Common.Statement.AssignContext)">
            <summary>
            Оператор присваивания
            </summary>
            <syntax>Variable := Expression</syntax>
            <param name="endKeys">Множество конечных символов</param>
            <param name="context">Контекст вызова</param>
            <returns>Представление для генерации кода</returns>
        </member>
        <member name="M:TriadCompiler.Parser.Common.Statement.Assignement.CheckVarTypes(TriadCompiler.IExprType,TriadCompiler.IExprType)">
            <summary>
            Проверить типы в операторе присваивания
            </summary>
            <param name="varType">Информация о переменной</param>
            <param name="exprType">Тип выражения</param>
            <returns>True, если все в порядке</returns>
        </member>
        <member name="M:TriadCompiler.Parser.Common.Statement.Assignement.CheckPolusTypes(TriadCompiler.IPolusType,TriadCompiler.IPolusType)">
            <summary>
            Проверить присваивание полюсов
            </summary>
            <param name="varType">Тип полюса-переменной</param>
            <param name="exprType">Тип полюсного выражения</param>
        </member>
        <member name="T:TriadCompiler.Parser.SimCondition.Statement.IPCall">
            <summary>
            Разбор вызова ИП
            </summary>
            <summary>
            Разбор вызова ИП (генерация кода)
            </summary>
        </member>
        <member name="F:TriadCompiler.Parser.SimCondition.Statement.IPCall.ipCallNumber">
            <summary>
            Порядковый номер вызова ИП
            </summary>
        </member>
        <member name="M:TriadCompiler.Parser.SimCondition.Statement.IPCall.Parse(TriadCompiler.EndKeyList)">
            <summary>
            Вызов ИП
            </summary>
            <syntax>Identificator # [ ParameterList ] # SpyParameterList # { ParameterList } # # IPAssignment #</syntax>
            <param name="endKeys">Множество конечных символов</param> 
            <returns>Тип ИП</returns>
        </member>
        <member name="M:TriadCompiler.Parser.SimCondition.Statement.IPCall.SpyParameterList(TriadCompiler.EndKeyList,TriadCompiler.Parser.SimCondition.Statement.IPCallInfo,TriadCompiler.Parser.SimCondition.Statement.IPCall.SingleSpyObjectDelegate)">
            <summary>
            Список spy-объектов
            </summary>
            <syntax>( SingleSpyObject {, SingleSpyObject } )</syntax>
            <param name="endKeys">Допустимые конечные символы</param>
            <param name="ipCallInfo">Информация о вызове информационной процедуры</param>
            <param name="singeSpyObject">Метод, разбирающий одиночный spy-объект</param>
            <returns>Сгенерированный код</returns>
        </member>
        <member name="M:TriadCompiler.Parser.SimCondition.Statement.IPCall.SingleSpyObject(TriadCompiler.EndKeyList,System.Collections.Generic.IEnumerator{TriadCompiler.ISpyType})">
            <summary>
            Один spy-объект
            </summary>
            <syntax>Variable | PolusVar | EventVar</syntax>
            <param name="endKeys">Допустимые конечные символы</param>
            <param name="enumerator">Тип формального параметра</param>
            <returns>Код метода, возращающего этот spy-объект</returns>
        </member>
        <member name="M:TriadCompiler.Parser.SimCondition.Statement.IPCall.OutVarList(TriadCompiler.EndKeyList,TriadCompiler.Parser.SimCondition.Statement.IPCallInfo)">
            <summary>
            Список out-переменных
            </summary>
            <param name="endKeys">Допустимые конечные символы</param>
            <param name="ipCallInfo">Информация о ИП</param>
            <returns>Код метода, возращающего значения out-переменных</returns>
        </member>
        <member name="M:TriadCompiler.Parser.SimCondition.Statement.IPCall.IPAssignment(TriadCompiler.EndKeyList,System.String)">
            <summary>
            Разбор результирующего присваивания
            </summary>
            <param name="endKeys">Допустимые конечные символы</param>
            <param name="ipName">Имя ИП</param>
            <returns>Код метода, выполняюшего присваивание</returns>
        </member>
        <member name="M:TriadCompiler.Parser.SimCondition.Statement.IPCall.GenerateIProcedureCreation(System.String,System.Int32,System.Collections.Generic.List{TriadCompiler.Parser.Common.Expr.ExprInfo})">
            <summary>
            Сгенерировать код, создающий экземпляр ИП
            </summary>
            <param name="ipName">Имя ИП</param>
            <param name="ipNumber">Порядковый номер ИП</param>
            <param name="paramExprInfoList">Список параметров</param>
            <returns>Код</returns>
        </member>
        <member name="M:TriadCompiler.Parser.SimCondition.Statement.IPCall.GenerateIProcedureInitialization(System.Int32)">
            <summary>
            Сгенерировать код, инициализирующий ИП
            </summary>
            <param name="ipNumber">Порядковый номер ИП</param>
            <returns>Код</returns>
        </member>
        <member name="M:TriadCompiler.Parser.SimCondition.Statement.IPCall.GetIProcedureCode(System.String,System.Int32)">
            <summary>
            Получить код, возвращающий добавленную ИП
            </summary>
            <param name="ipName">Имя ИП</param>
            <param name="ipCallNumber">Порядковый номер ИП</param>
            <returns>Код</returns>
        </member>
        <member name="P:TriadCompiler.Parser.SimCondition.Statement.IPCall.codeBuilder">
            <summary>
             Строитель кода
            </summary>
        </member>
        <member name="T:TriadCompiler.Parser.SimCondition.Statement.IPCall.SingleSpyObjectDelegate">
            <summary>
            Метод, разбирающий одиночный spy-объект в списке spy-объектов
            </summary>
            <param name="endKeys">Допустимые конечные символы</param>
            <param name="enumerator">Тип формального параметра</param>
            <returns>>Код метода, возращающего этот spy-объект</returns>
        </member>
        <member name="T:TriadCompiler.SimConditionParser">
            <summary>
            Класс для разбора УМ
            </summary>
        </member>
        <member name="F:TriadCompiler.SimConditionParser.startKeys">
            <summary>
            Множество стартовых символов оператора в УМ
            </summary>
        </member>
        <member name="F:TriadCompiler.SimConditionParser.standartIP">
            <summary>
            Стандартные ИП
            </summary>
        </member>
        <member name="M:TriadCompiler.SimConditionParser.Statement(TriadCompiler.EndKeyList,TriadCompiler.Parser.Common.Statement.StatementContext)">
            <summary> 
            Оператор в условиях моделирования
            </summary>
            <param name="endKeys"> Множество конечных символов </param>
            <param name="context"> Текущий контекст </param>
            <returns> Представление для генерации кода </returns>
        </member>
        <member name="M:TriadCompiler.SimConditionParser.CreateStandartIP">
             <summary>
            
             </summary>
        </member>
        <member name="M:TriadCompiler.SimConditionParser.RegisterIProcedures">
            <summary>
            Зарегистрировать стандартные информационные процедуры
            </summary>
        </member>
        <member name="M:TriadCompiler.SimConditionParser.Compile(TriadCompiler.EndKeyList)">
            <summary>
            Начать разбор
            </summary>
            <param name="endKey">Множество допустимых конечных символов</param>
        </member>
        <member name="M:TriadCompiler.SimConditionParser.ModelCondition(TriadCompiler.EndKeyList)">
            <summary>
            Описание условий моделирования
            </summary>
            <syntax>SimCondition HeaderName # IPHeader # { InfProcedure.Parse } Def StatementList EndIC</syntax>
            <param name="endKey">Множество допустимых конечных символов</param>
        </member>
        <member name="P:TriadCompiler.SimConditionParser.StartKeys">
            <summary>
            Стартовые символы оператора в УМ
            </summary>
        </member>
        <member name="P:TriadCompiler.SimConditionParser.codeBuilder">
            <summary>
             Строитель кода
            </summary>
        </member>
        <member name="T:TriadCompiler.CharSymbol">
            <summary>
            Информация о  символьной константе.
            </summary>
            <syntax>Значение у поля indexStringCode должно быть CharValue</syntax>
        </member>
        <member name="M:TriadCompiler.CharSymbol.#ctor">
            <summary>
            Конструктор
            </summary>
        </member>
        <member name="F:TriadCompiler.CharSymbol.value">
            <summary>
            Символьное значение символа
            </summary>
        </member>
        <member name="P:TriadCompiler.CharSymbol.Value">
            <summary>
            Символьное значение символа
            </summary>
        </member>
        <member name="T:TriadCompiler.RoutineParser">
            <summary>
            Класс, отвечающий за разбор рутин
            </summary>
        </member>
        <member name="F:TriadCompiler.RoutineParser.routineStatementSet">
            <summary>
            Множество стартовых символов оператора в рутине
            </summary>
        </member>
        <member name="M:TriadCompiler.RoutineParser.Statement(TriadCompiler.EndKeyList,TriadCompiler.Parser.Common.Statement.StatementContext)">
            <summary>
            Обобщенный оператор
            </summary>
            <syntax>ПУСТО | Assignement | IfStatement | VariableDeclaration |
            WhileStatement | ForStatement | caseStatement | sheduleStatement |
            outStatement | cancelStatement | interlockStatement | availableStatement |
            writeStatement</syntax>
            <param name="endKeys">Множество конечных символов</param>
            <param name="context">Текущий контекст</param>
            <returns>Представление для генерации кода (=null, если это пустой оператор)</returns>
        </member>
        <member name="M:TriadCompiler.RoutineParser.Compile(TriadCompiler.EndKeyList)">
            <summary>
            Начать разбор и генерацию кода
            </summary>
            <param name="endKey">Множество допустимых конечных символов</param>
        </member>
        <member name="M:TriadCompiler.RoutineParser.Routine(TriadCompiler.EndKeyList)">
            <summary>
            Рутина
            </summary>
            <syntax>Routine Identificator { [ ParameterList ]( Interface ) } { InitialPart } 
            EventPart { EventPart } EndRoutine</syntax>
            <param name="endKeys">Множество допустимых конечных символов</param>
        </member>
        <member name="M:TriadCompiler.RoutineParser.InitialPart(TriadCompiler.EndKeyList)">
            <summary>
            Начальные условия
            </summary>
            <syntax>Initial StatementList EndInitial</syntax>
            <param name="endKeys">Множество допустимых конечных символов</param>
        </member>
        <member name="M:TriadCompiler.RoutineParser.EventPart(TriadCompiler.EndKeyList)">
            <summary>
            Описание события
            </summary>
            <syntax>Event [Identificator]; StatementList EndEvent</syntax>
            <param name="endKeys">Множество допустимых конечных символов</param>
        </member>
        <member name="M:TriadCompiler.RoutineParser.EventName(TriadCompiler.EndKeyList,TriadCompiler.Parser.Common.Statement.StatementContext@)">
            <summary>
            Имя события
            </summary>
            <syntax>Identificator | ПУСТО</syntax>
            <param name="endKeys">Множество допустимых конечных символов</param>
            <param name="context">Текущий контекст</param>
            <returns>Имя события 
            "" - если событие неименованное
            null - если была ошибка</returns>
        </member>
        <member name="P:TriadCompiler.RoutineParser.StartKeys">
            <summary>
            Стартовые символы оператора в рутине
            </summary>
        </member>
        <member name="P:TriadCompiler.RoutineParser.codeBuilder">
            <summary>
            Строитель кода
            </summary>
        </member>
        <member name="T:TriadCompiler.Scanner">
            <summary>
            Лексический анализатор
            </summary>
        </member>
        <member name="M:TriadCompiler.Scanner.#ctor">
            <summary>
            Конструктор
            </summary>
        </member>
        <member name="M:TriadCompiler.Scanner.Reload">
            <summary>
            Очистить служебные данные
            </summary>
        </member>
        <member name="M:TriadCompiler.Scanner.GetSymbolWithSavingPosition">
            <summary>
            Получить символ, не сдвигая позицию текущего символа
            </summary>
            <returns>Прочитанный символ</returns>
        </member>
        <member name="M:TriadCompiler.Scanner.SaveSymbol(TriadCompiler.Symbol)">
            <summary>
            Сохранить символ
            </summary>
            <param name="symbol">Сохраняемый символ</param>
        </member>
        <member name="M:TriadCompiler.Scanner.GetSymbol">
            <summary>
            Получить символ
            </summary>
            <returns>Прочитанный символ</returns>
        </member>
        <member name="M:TriadCompiler.Scanner.RecognizeChar">
            <summary>
            Распознать одиночный символ
            </summary>
            <returns>Распознанный символ</returns>
        </member>
        <member name="M:TriadCompiler.Scanner.RecognizeString">
            <summary>
            Распознать строку символов
            </summary>
            <returns>Распознанный символ</returns>
        </member>
        <member name="M:TriadCompiler.Scanner.RecognizeIdentificator(System.Char)">
            <summary>
            Распознать идентификатор
            </summary>
            <param name="ch">Текущий символ</param>
            <returns>Распознанный символ</returns>
        </member>
        <member name="M:TriadCompiler.Scanner.RecognizeLeftParOrCommentary">
            <summary>
            Распознать комментарий или левую скобку
            </summary>
            <returns>Разобранный символ</returns>
        </member>
        <member name="M:TriadCompiler.Scanner.RecognizeBitString">
            <summary>
            Распознать строку бит
            </summary>
            <returns>Распознанный символ</returns>
        </member>
        <member name="M:TriadCompiler.Scanner.RecognizeValue(System.Char)">
            <summary>
            Распознать число
            </summary>
            <returns>Распознанный символ</returns>
        </member>
        <member name="M:TriadCompiler.Scanner.RecognizeIntegerValue(System.String)">
            <summary>
            Распознать целое число
            </summary>
            <param name="valueStringCode">Строковое представление числа</param>
            <returns>Символ целого числа</returns>
        </member>
        <member name="M:TriadCompiler.Scanner.StartRecordingCh">
            <summary>
            Начать запись входных букв
            </summary>
        </member>
        <member name="M:TriadCompiler.Scanner.GetStoredString">
            <summary>
            Получить записанную последовательность входных букв
            </summary>
            <returns></returns>
        </member>
        <member name="M:TriadCompiler.Scanner.GetCh">
            <summary>
            Получить букву
            </summary>
            <returns></returns>
        </member>
        <member name="M:TriadCompiler.Scanner.SaveCh(System.Char)">
            <summary>
            Сохранить букву неиспользованной
            </summary>
            <param name="ch">Буква</param>
        </member>
        <member name="F:TriadCompiler.Scanner.chStack">
            <summary>
            Стек неиспользованных букв (они будут переиспользованы при повторном вызове GetSymbol)
            </summary>
        </member>
        <member name="F:TriadCompiler.Scanner.storedSymbolStack">
            <summary>
            Сохраненные символы
            </summary>
        </member>
        <member name="F:TriadCompiler.Scanner.needChRecording">
            <summary>
            Необходимость в записи входных букв в строку
            </summary>
        </member>
        <member name="F:TriadCompiler.Scanner.storedString">
            <summary>
            Текущая записанная последовательность входных букв
            </summary>
        </member>
        <member name="F:TriadCompiler.Scanner.currSymbolStr">
            <summary>
            Символьное представление текущего символа
            </summary>
        </member>
        <member name="F:TriadCompiler.Scanner.recognizedIntegerValues">
            <summary>
            Таблица уже распознанных целых чисел (нужна для оптимизации)
            </summary>
        </member>
        <member name="T:TriadCompiler.ModelParser">
            <summary>
            Часть парсера модели, отвечающая за разбор операторов
            </summary>
            <summary>
            Парсер модели
            </summary>
        </member>
        <member name="F:TriadCompiler.ModelParser.modelStatementSet">
            <summary>
            Множество стартовых символов оператора в модели
            </summary>
        </member>
        <member name="M:TriadCompiler.ModelParser.Statement(TriadCompiler.EndKeyList,TriadCompiler.Parser.Common.Statement.StatementContext)">
            <summary> 
            Оператор в модели
            </summary>
            <param name="endKeys">Множество конечных символов</param>
            <param name="context">Текущий контекст</param>
            <returns> Представление для генерации кода </returns>
            <syntax> StructVarDeclaration | StructAssignement | Assignement | IfStatement | WhileStatement |
            ForStatement | DesignTypeConstructor </syntax>
        </member>
        <member name="M:TriadCompiler.ModelParser.Compile(TriadCompiler.EndKeyList)">
            <summary>
            Начать разбор
            </summary>
            <param name="endKey">Множество допустимых конечных символов</param>
        </member>
        <member name="M:TriadCompiler.ModelParser.Model(TriadCompiler.EndKeyList)">
            <summary>
            Описание модели
            </summary>
            <syntax>Model EndModel</syntax>
            <param name="endKeys">Множество допустимых конечных символов</param>
        </member>
        <member name="P:TriadCompiler.ModelParser.StartKeys">
            <summary>
            Стартовые символы оператора в модели
            </summary>
        </member>
        <member name="P:TriadCompiler.ModelParser.codeBuilder">
            <summary>
             Строитель кода
            </summary>
        </member>
        <member name="T:TriadCompiler.CommonArea">
            <summary>
            Обобщенный контейнер переменнных
            </summary>
        </member>
        <member name="M:TriadCompiler.CommonArea.#ctor">
            <summary>
            Конструктор
            </summary>
        </member>
        <member name="M:TriadCompiler.CommonArea.CreateNewArea">
            <summary>
            Создать новую область
            </summary>
        </member>
        <member name="M:TriadCompiler.CommonArea.Register(TriadCompiler.ICommonType)">
            <summary>
            Добавить переменную указанного типа в текущую область видимости
            </summary>
            <param name="varType">Тип переменной</param>
        </member>
        <member name="M:TriadCompiler.CommonArea.IsSomeTypeRegistered(System.String,TriadCompiler.CommonArea.IsRequiredType)">
            <summary>
            Проверить, зарегистрирован ли указанный тип с указанным именем
            </summary>
            <param name="name">Имя</param>
            <param name="isRequiredType">Тип</param>
            <returns>True, если зарегистрирован</returns>
        </member>
        <member name="M:TriadCompiler.CommonArea.IsGraphRegistered(System.String)">
            <summary>
            Проверить, зарегистрирован ли граф с таким именем
            </summary>
            <param name="varName">Имя переменной</param>
            <returns>True, если зарегистрирован</returns>
        </member>
        <member name="M:TriadCompiler.CommonArea.IsNodeRegistered(System.String)">
            <summary>
            Проверить, зарегистрирована ли вершина с таким именем
            </summary>
            <param name="varName">Имя переменной</param>
            <returns>True, если зарегистрирован</returns>
        </member>
        <member name="M:TriadCompiler.CommonArea.IsFunctionRegistered(System.String)">
            <summary>
            Проверить, зарегистрирована ли функция с таким именем
            </summary>
            <param name="functionName">Имя функции</param>
            <returns>True, если зарегистрирована</returns>
        </member>
        <member name="M:TriadCompiler.CommonArea.IsIProcedureRegistered(System.String)">
            <summary>
            Проверить, зарегистрирована ли ИП с таким именем
            </summary>
            <param name="functionName">Имя ИП</param>
            <returns>True, если зарегистрирована</returns>
        </member>
        <member name="M:TriadCompiler.CommonArea.IsEventRegistered(System.String)">
            <summary>
            Проверить, зарегистрировано ли событие с таким именем
            </summary>
            <param name="eventName">Имя события</param>
            <returns>True, если зарегистрировано</returns>
        </member>
        <member name="M:TriadCompiler.CommonArea.GetType``1(System.String)">
            <summary>
            Получить требуемый тип
            </summary>
            <param name="usedName">Использованное имя</param>
            <returns>Требуемый тип</returns>
        </member>
        <member name="M:TriadCompiler.CommonArea.AddArea">
            <summary>
            Добавить новую область видимости
            </summary>
        </member>
        <member name="M:TriadCompiler.CommonArea.RemoveArea">
            <summary>
            Удалить текущую область видимости
            </summary>
        </member>
        <member name="M:TriadCompiler.CommonArea.RemoveAllAreas">
            <summary>
            Очистить все области видимости переменных
            </summary>
        </member>
        <member name="F:TriadCompiler.CommonArea.instance">
            <summary>
            Экземпляр этого класса
            </summary>
        </member>
        <member name="F:TriadCompiler.CommonArea.areaList">
            <summary>
            Список областей видимости
            </summary>
        </member>
        <member name="P:TriadCompiler.CommonArea.Instance">
            <summary>
            Получить экземпляр класса
            </summary>
        </member>
        <member name="T:TriadCompiler.CommonArea.IsRequiredType">
            <summary>
            Функция проверки соответствия типа
            </summary>
            <param name="type">Проверяемый тип</param>
            <returns>True, если тип подходит</returns>
        </member>
        <member name="T:TriadCompiler.CommonArea.Area">
            <summary>
            Область видимости
            </summary>
        </member>
        <member name="F:TriadCompiler.CommonArea.Area.typeList">
            <summary>
            Список зарегистрированных типов
            Каждому имени сопоставляется список типов, которые его используют
            </summary>
        </member>
        <member name="T:TriadCompiler.Parser.Structure.StructExpr.StructExprKeySet">
            <summary>
            Множества символов, связанные со структурными выражениями
            </summary>
        </member>
        <member name="T:TriadCompiler.Parser.Structure.StructExpr.StructExprKeySet.Operation">
            <summary>
            Множества операций
            </summary>
        </member>
        <member name="F:TriadCompiler.Parser.Structure.StructExpr.StructExprKeySet.Operation.allSet">
            <summary>
            Множество всех операций
            </summary>
        </member>
        <member name="F:TriadCompiler.Parser.Structure.StructExpr.StructExprKeySet.Operation.structAddSet">
            <summary>
            Множество операций сложения
            </summary>
        </member>
        <member name="F:TriadCompiler.Parser.Structure.StructExpr.StructExprKeySet.Operation.structMultSet">
            <summary>
            Множество операций умножения
            </summary>
        </member>
        <member name="P:TriadCompiler.Parser.Structure.StructExpr.StructExprKeySet.Operation.All">
            <summary>
            Все операции
            </summary>
        </member>
        <member name="P:TriadCompiler.Parser.Structure.StructExpr.StructExprKeySet.Operation.Add">
            <summary>
            Множество операций структурного сложения
            </summary>
        </member>
        <member name="P:TriadCompiler.Parser.Structure.StructExpr.StructExprKeySet.Operation.Mult">
            <summary>
            Множество операций структурного умножения
            </summary>
        </member>
        <member name="T:TriadCompiler.Parser.Routine.Statement.Available">
            <summary>
            Разбор оператора разблокирования полюсов
            </summary>
        </member>
        <member name="M:TriadCompiler.Parser.Routine.Statement.Available.Parse(TriadCompiler.EndKeyList)">
            <summary>
            Оператор разблокирования входов 
            </summary>
            <syntax>Available PolusVariable {,PolusVariable}</syntax>
            <param name="endKeys">Множество конечных символов</param> 
            <returns>Представление для генерации кода</returns>
        </member>
        <member name="T:TriadCompiler.Parser.Common.Statement.WhileCicle">
            <summary>
            Разбор цикла while
            </summary>
        </member>
        <member name="M:TriadCompiler.Parser.Common.Statement.WhileCicle.Parse(TriadCompiler.EndKeyList,TriadCompiler.Parser.Common.Statement.StatementContext)">
            <summary>
            Условный цикл
            </summary>
            <syntax>While Expression Do StatementList EndWhile</syntax>
            <param name="endKeys">Множество конечных символов</param>
            <param name="context">Текущий контекст</param>
            <returns>Представление для генерации кода</returns>
        </member>
        <member name="T:TriadCompiler.Parser.Common.Header.ParameterSection">
            <summary>
            Разбор списка параметров объекта
            </summary>
        </member>
        <member name="M:TriadCompiler.Parser.Common.Header.ParameterSection.Parse(TriadCompiler.EndKeyList,TriadCompiler.VarDeclarationContext)">
            <summary>
            Список параметров
            </summary>
            <syntax> SingleParameterList {SingleParameterList}</syntax>
            <param name="endKeys">Множество допустимых конечных символов</param>
            <param name="context">Контекст</param>
            <returns>Множество объявленных типов</returns>
        </member>
        <member name="M:TriadCompiler.Parser.Common.Header.ParameterSection.SingleParameterList(TriadCompiler.EndKeyList,TriadCompiler.VarDeclarationContext)">
            <summary>
            Отдельный список параметров
            </summary>
            <syntax>[ VariableDeclaration {;VariableDeclaration} ]</syntax>
            <param name="endKeys">Множество допустимых конечных символов</param>
            <param name="context">Констекст</param>
            <returns>Множество объявленных типов</returns>
        </member>
        <member name="T:TriadCompiler.Parser.Common.Expr.Expression">
            <summary>
            Генерация кода для арифметических выражений
            </summary>
            <summary>
            Семантическая проверка арифметических выражений
            </summary>
            <summary>
            Разбор арифметических выражений
            </summary>
        </member>
        <member name="M:TriadCompiler.Parser.Common.Expr.Expression.BuildStringCodeForExpression(TriadCompiler.Parser.Common.Expr.ExprInfo,TriadCompiler.Key,TriadCompiler.Parser.Common.Expr.ExprInfo)">
            <summary>
            Построить символьное представление выражения
            </summary>
            <param name="info">Данные о левом простом выражении</param>
            <param name="relationOperation">Операция сравнения</param>
            <param name="rightSimpleExprInfo">Данные о правом простом выражении</param>
        </member>
        <member name="F:TriadCompiler.Parser.Common.Expr.Expression.relationOpTypeSet">
            <summary>
            Множество допустимых типов в операторе отношения
            </summary>
        </member>
        <member name="M:TriadCompiler.Parser.Common.Expr.Expression.CheckTypeInSimpleExpression(TriadCompiler.IExprType,TriadCompiler.IExprType,TriadCompiler.Key)">
            <summary>
            Совместимость типов на уровне SimpleExpression
            Notype совместим с любым типом
            </summary>
            <param name="prevType">Тестируемый тип</param>
            <param name="nextType">Тестируемый тип</param>
            <param name="operation">Код операции</param>
            <returns>Результирующий тип после выполнения операции</returns>
        </member>
        <member name="F:TriadCompiler.Parser.Common.Expr.Expression.relationSet">
            <summary>
            Множество операций сравнения
            </summary>
        </member>
        <member name="M:TriadCompiler.Parser.Common.Expr.Expression.Parse(TriadCompiler.EndKeyList)">
            <summary>
            Выражение
            </summary>
            <syntax>SimpleExpression [REL_OP SimpleExpression]</syntax>
            <param name="endKeys">Множество конечных символов</param>
            <returns>Собранная информация</returns>
        </member>
        <member name="P:TriadCompiler.Parser.Common.Expr.Expression.RelOpTypes">
            <summary>
            Допустимые типы в операторе отношения
            </summary>
        </member>
        <member name="P:TriadCompiler.Parser.Common.Expr.Expression.RelationKeys">
            <summary>
            Множество операций отношения
            </summary>
        </member>
        <member name="T:TriadCompiler.Parser.Common.Declaration.Var.TypeDeclaration">
            <summary>
            Разоб объявления типа переменной
            </summary>
        </member>
        <member name="F:TriadCompiler.Parser.Common.Declaration.Var.TypeDeclaration.typeSet">
            <summary>
            Множество стартовых символов типа
            </summary>
        </member>
        <member name="F:TriadCompiler.Parser.Common.Declaration.Var.TypeDeclaration.simpleTypeSet">
            <summary>
            Множество стартовых символов простого типа
            </summary>
        </member>
        <member name="M:TriadCompiler.Parser.Common.Declaration.Var.TypeDeclaration.Parse(TriadCompiler.EndKeyList)">
            <summary>
            Тип
            </summary>
            <syntax>SimpleType | Array [ ArrayIndexRange { ,ArrayIndexRange } ] Of SimpleType |
            SET OF SimpleType </syntax>
            <param name="endKeys">Множество допустимых конечных символов</param>
            <returns>Сформированный тип</returns>
        </member>
        <member name="M:TriadCompiler.Parser.Common.Declaration.Var.TypeDeclaration.RangeDeclaration(TriadCompiler.EndKeyList,TriadCompiler.IndexedType)">
            <summary>
            Объявление диапазона у массива
            </summary>
            <param name="endKeys">Допустимые конечные символы</param>
            <param name="arrayType">Формируемый тип массива</param>
        </member>
        <member name="M:TriadCompiler.Parser.Common.Declaration.Var.TypeDeclaration.ArrayIndex(TriadCompiler.EndKeyList,TriadCompiler.IndexedType)">
            <summary>
            Диапазон значений индекса в массиве
            </summary>
            <syntax>Expression</syntax>
            <param name="endKeys">Множество допустимых конечных символов</param>
            <param name="arrayType">Результирующий тип</param>
            <syntax> Expression </syntax>
            <returns>Наличие ошибки</returns>
        </member>
        <member name="M:TriadCompiler.Parser.Common.Declaration.Var.TypeDeclaration.CheckIndexInArrayDeclaration(TriadCompiler.Parser.Common.Expr.ExprInfo)">
            <summary>
            Проверить индекс в объявлении массива
            </summary>
            <param name="exprInfo">Информация об индексе</param>
            <returns>True, если найдена ошибка</returns>
        </member>
        <member name="M:TriadCompiler.Parser.Common.Declaration.Var.TypeDeclaration.SimpleType(TriadCompiler.EndKeyList)">
            <summary>
            Простой тип
            </summary>
            <syntax>Bit | String | Char | Integer | Real | Boolean | Notype</syntax>
            <param name="endKeys">Множество допустимых конечных символов</param>
            <returns>Сформированный тип</returns>
        </member>
        <member name="P:TriadCompiler.Parser.Common.Declaration.Var.TypeDeclaration.SimpleTypeStartKeys">
            <summary>
            Стартовые символы простого типа
            </summary>
        </member>
        <member name="P:TriadCompiler.Parser.Common.Declaration.Var.TypeDeclaration.TypeStartKeys">
            <summary>
            Стартовые символы типа
            </summary>
        </member>
        <member name="T:TriadCompiler.VarType">
            <summary>
            Тип стандартных переменных.
            </summary>
        </member>
        <member name="M:TriadCompiler.VarType.#ctor(TriadCompiler.TypeCode)">
            <summary>
            Конструктор
            </summary>
            <param name="code">Код типа</param>
        </member>
        <member name="M:TriadCompiler.VarType.#ctor(TriadCompiler.TypeCode,System.String)">
            <summary>
            Конструктор
            </summary>
            <param name="code">Код типа</param>
            <param name="varName">Имя переменной</param>
        </member>
        <member name="M:TriadCompiler.VarType.#ctor(TriadCompiler.TypeCode,System.String,System.Boolean)">
            <summary>
            Конструктор
            </summary>
            <param name="code">Код типа</param>
            <param name="varName">Имя переменной</param>
            <param name="isSpyObject">Признак spy-объекта</param>
        </member>
        <member name="M:TriadCompiler.VarType.Clone">
            <summary>
            Создать копию
            </summary>
            <returns></returns>
        </member>
        <member name="F:TriadCompiler.VarType.varName">
            <summary>
            Имя переменной
            </summary>
        </member>
        <member name="F:TriadCompiler.VarType.code">
            <summary>
            Код типа переменной
            </summary>
        </member>
        <member name="F:TriadCompiler.VarType.isSpyObject">
            <summary>
            Признак spy-объекта
            </summary>
        </member>
        <member name="P:TriadCompiler.VarType.Code">
            <summary>
            Код типа переменной
            </summary>
        </member>
        <member name="P:TriadCompiler.VarType.Name">
            <summary>
            Имя переменной переменной
            </summary>
        </member>
        <member name="P:TriadCompiler.VarType.IsSpyObject">
            <summary>
            Признак spy-объекта
            </summary>
        </member>
        <member name="T:TriadCompiler.Parser.Routine.Statement.Case">
            <summary>
            Разбор оператора case в рутине
            </summary>
        </member>
        <member name="M:TriadCompiler.Parser.Routine.Statement.Case.Parse(TriadCompiler.EndKeyList,TriadCompiler.Parser.Common.Statement.StatementContext)">
            <summary>
            Оператор множественного выбора
            </summary>
            <syntax>Case caseConditionList Colon StatementList 
            {Break caseConditionList Colon StatementList} EndCase</syntax>
            <param name="endKeys">Множество конечных символов</param>
            <param name="context">Текущий контекст</param>
            <returns>Представление для генерации кода</returns>
        </member>
        <member name="M:TriadCompiler.Parser.Routine.Statement.Case.CaseConditionList(TriadCompiler.EndKeyList)">
            <summary>
            Ветка в операторе case
            </summary>
            <syntax>caseCondition{,caseCondition}</syntax>
            <param name="endKeys">Множество конечных символов</param>
            <returns>Представление для генерации кода</returns>
        </member>
        <member name="M:TriadCompiler.Parser.Routine.Statement.Case.CaseCondition(TriadCompiler.EndKeyList)">
            <summary>
            Имя полюса в операторе case
            </summary>
            <syntax>PolusVariable</syntax>
            <param name="endKeys">Множество конечных символов</param>
            <returns>Представление для генерации кода</returns>
        </member>
        <member name="T:TriadCompiler.Parser.Structure.StructExpr.Fact.Factor">
            <summary>
            Разбор множителя в структурном выражении
            </summary>
        </member>
        <member name="M:TriadCompiler.Parser.Structure.StructExpr.Fact.Factor.Parse(TriadCompiler.EndKeyList)">
            <summary>
            Структурный множитель
            </summary>
            <param name="endKeys">Множество конечных символов</param>
            <syntax>NodeDeclaration | DesignVariable | ( StructExpression )
            | Connection | StructConstant </syntax>
        </member>
        <member name="M:TriadCompiler.Parser.Structure.StructExpr.Fact.Factor.GraphVarCode(System.String)">
            <summary>
            Сгенерировать код для обращения к графовой переменной в структурном выражении
            </summary>
            <param name="graphVarStringCode">Строковый код графовой переменной</param>
            <returns>Сгенерированный код</returns>
        </member>
        <member name="M:TriadCompiler.Parser.Structure.StructExpr.Fact.Factor.NodeAddVarCode(System.String)">
            <summary>
            Сгенерировать код для добавления вершины к графовой переменной в структурном выражении
            </summary>
            <param name="nodeVarStrinCode">Строковый код переменной обозначающей вершину</param>
            <returns>Сгенерированный код</returns>
        </member>
        <member name="T:TriadCompiler.IdentSymbol">
            <summary>
            Информация об идентификаторе.
            Значение у поля indexStringCode должно быть Identificator
            </summary>
        </member>
        <member name="M:TriadCompiler.IdentSymbol.#ctor">
            <summary>
            Конструктор
            </summary>
        </member>
        <member name="M:TriadCompiler.IdentSymbol.#ctor(System.String)">
            <summary>
            Конструктор
            </summary>
            <param name="name">Имя</param>
        </member>
        <member name="P:TriadCompiler.IdentSymbol.Name">
            <summary>
            Строковое значение символа 
            </summary>
        </member>
        <member name="T:TriadCompiler.RoutineCodeBuilder">
            <summary>
            Создание кода для рутины
            !!! Все переменные-члены этого класса должны пересоздаваться в методе Reload
            </summary>
        </member>
        <member name="F:TriadCompiler.RoutineCodeBuilder.initialMethod">
            <summary>
            Функция инициализации рутины
            </summary>
        </member>
        <member name="M:TriadCompiler.RoutineCodeBuilder.#ctor">
            <summary>
            Конструктор
            </summary>
        </member>
        <member name="M:TriadCompiler.RoutineCodeBuilder.CreateInitialMethod">
            <summary>
            Создать метод DoInitialize
            </summary>
        </member>
        <member name="M:TriadCompiler.RoutineCodeBuilder.SetMessageHandlingEvent(System.CodeDom.CodeStatementCollection)">
            <summary>
            Определить событие обработки входных сообщений
            </summary>
            <param name="statementList">Список операторов</param>
        </member>
        <member name="M:TriadCompiler.RoutineCodeBuilder.SetInitialSection(System.CodeDom.CodeStatementCollection)">
            <summary>
            Задать секцию initialSet
            </summary>
            <param name="statementList">Список операторов</param>
        </member>
        <member name="M:TriadCompiler.RoutineCodeBuilder.AddVarDefinition(TriadCompiler.IExprType)">
            <summary>
            Добавить объявление переменной
            </summary>
            <param name="varType">Тип переменной</param>
        </member>
        <member name="M:TriadCompiler.RoutineCodeBuilder.Reload">
            <summary>
            Подготовить объект к новому циклу компиляции
            </summary>
        </member>
        <member name="T:TriadCompiler.Parser.Common.Expr.ExprInfo">
            <summary>
            Информация о выражении
            </summary>
        </member>
        <member name="F:TriadCompiler.Parser.Common.Expr.ExprInfo.Value">
            <summary>
            Значение выражения
            </summary>
        </member>
        <member name="F:TriadCompiler.Parser.Common.Expr.ExprInfo.Type">
            <summary>
            Тип выражения
            </summary>
        </member>
        <member name="F:TriadCompiler.Parser.Common.Expr.ExprInfo.strCode">
            <summary>
            Строковое представление
            </summary>
        </member>
        <member name="M:TriadCompiler.Parser.Common.Expr.ExprInfo.Append(System.String)">
            <summary>
            Добавить часть строкового представления
            </summary>
            <param name="newCode">Новая часть</param>
        </member>
        <member name="M:TriadCompiler.Parser.Common.Expr.ExprInfo.InsertFirst(System.String)">
            <summary>
            Вставить новую часть кода в начало
            </summary>
            <param name="newCode">Новая часть кода</param>
        </member>
        <member name="M:TriadCompiler.Parser.Common.Expr.ExprInfo.Replace(System.String,System.String)">
            <summary>
            Заменить часть строкового кода другим фрагментом
            </summary>
            <param name="oldSubStr">Старый фрагмент</param>
            <param name="newSubStr">Новый фрагмент</param>
        </member>
        <member name="M:TriadCompiler.Parser.Common.Expr.ExprInfo.IsNotIndexed">
            <summary>
            Проверить, что выражение имеет неиндексированный тип
            </summary>
            <returns>True, если неиндексированный тип</returns>
        </member>
        <member name="M:TriadCompiler.Parser.Common.Expr.ExprInfo.IsNotSet">
            <summary>
            Проверить, что выражение имеет тип не множество
            </summary>
            <returns>True, если тип не множество</returns>
        </member>
        <member name="M:TriadCompiler.Parser.Common.Expr.ExprInfo.IsIndexedOrSet">
            <summary>
            Проверить, что выражение имеет тип массив или множество
            </summary>
            <returns>True, если тип выражения массив или мн-во</returns>
        </member>
        <member name="M:TriadCompiler.Parser.Common.Expr.ExprInfo.IsInteger">
            <summary>
            Проверить, что выражение имеет целый тип
            </summary>
            <returns>True, если целый</returns>
        </member>
        <member name="M:TriadCompiler.Parser.Common.Expr.ExprInfo.IsIntegerOrReal">
            <summary>
            Проверить, что выражение имеет целый или вещественный тип
            </summary>
            <returns>True, если целый или вещественный</returns>
        </member>
        <member name="M:TriadCompiler.Parser.Common.Expr.ExprInfo.IsString">
            <summary>
            Проверить, что выражение имеет строковый тип
            </summary>
            <returns>True, если строковый</returns>
        </member>
        <member name="M:TriadCompiler.Parser.Common.Expr.ExprInfo.IsBoolean">
            <summary>
            Проверить, что выражение имеет логический тип
            </summary>
            <returns>True, если логический</returns>
        </member>
        <member name="M:TriadCompiler.Parser.Common.Expr.ExprInfo.IsConstant">
            <summary>
            Проверить, что выражение - это константа
            </summary>
            <returns>True, если константа</returns>
        </member>
        <member name="M:TriadCompiler.Parser.Common.Expr.ExprInfo.IsNotConstant">
            <summary>
            Проверить, что выражение - это не константа
            </summary>
            <returns>True, если не константа</returns>
        </member>
        <member name="M:TriadCompiler.Parser.Common.Expr.ExprInfo.NotNegativeIntegerOrReal">
            <summary>
            Проверить, что если выражение - константа, то она неотрицательное число
            </summary>
            <returns>True, если все верно</returns>
        </member>
        <member name="M:TriadCompiler.Parser.Common.Expr.ExprInfo.PositiveIntegerOrReal">
            <summary>
            Проверить, что если выражение - константа, то она положительное число
            </summary>
            <returns>True, если все верно</returns>
        </member>
        <member name="P:TriadCompiler.Parser.Common.Expr.ExprInfo.HasNoError">
            <summary>
            Признак того, что выражение было разобрано правильно
            </summary>
        </member>
        <member name="P:TriadCompiler.Parser.Common.Expr.ExprInfo.StrCode">
            <summary>
            Строковое представление
            </summary>
        </member>
        <member name="P:TriadCompiler.Parser.Common.Expr.ExprInfo.Code">
            <summary>
            Представление в виде кода
            </summary>
        </member>
        <member name="T:TriadCompiler.Parser.Common.Declaration.Var.VarDeclaration">
            <summary>
            Разбор объявления переменных
            </summary>
        </member>
        <member name="M:TriadCompiler.Parser.Common.Declaration.Var.VarDeclaration.Parse(TriadCompiler.EndKeyList,TriadCompiler.VarDeclarationContext)">
            <summary>
            Объявление переменной
            </summary>
            <param name="endKeys">Множество допустимых конечных символов</param>
            <param name="context">Констекст</param>
            <returns>Типы объявленных переменных</returns>
        </member>
        <member name="M:TriadCompiler.Parser.Common.Declaration.Var.VarDeclaration.VarName(TriadCompiler.EndKeyList,TriadCompiler.IExprType,System.Boolean,TriadCompiler.VarDeclarationContext)">
            <summary>
            Разбор имени переменной в ее объявлении
            </summary>
            <syntax>IDentificator</syntax>
            <param name="endKeys">Допустимые конечные символы</param>
            <param name="varType">Тип всех переменных в объявлении</param>
            <param name="registerType">Необходимость регистрации типа</param>
            <param name="context">Контекст объявления</param>
            <returns>Тип переменной</returns>
        </member>
        <member name="M:TriadCompiler.Parser.Common.Declaration.Var.VarDeclaration.PolusDeclarationParse(TriadCompiler.EndKeyList,System.String)">
            <summary>
             Разбор объявления полюсов в объявлении вершины
            </summary>
            <param name="endKeys">Допустимые конечные символы</param>
            <param name="nodeVarName">Имя вершины, куда добавить полюса</param>
            <returns>Представление для генерации кода</returns>
        </member>
        <member name="M:TriadCompiler.Parser.Common.Declaration.Var.VarDeclaration.DeclarationWithRegistration(TriadCompiler.EndKeyList,TriadCompiler.VarDeclarationContext)">
            <summary>
            Обычное объявление переменных
            </summary>
            <syntax>Type Identificator {,Identificator}</syntax>
            <param name="endKeys">Множество допустимых конечных символов</param>
            <param name="context">Контекст</param>
            <returns>Список типов объявленных переменных</returns>
        </member>
        <member name="M:TriadCompiler.Parser.Common.Declaration.Var.VarDeclaration.DeclarationWithOutRegistration(TriadCompiler.EndKeyList,TriadCompiler.VarDeclarationContext)">
            <summary>
            Объявление переменных без регистрации их имен
            </summary>
            <syntax>Type #Identificator {,Identificator}#</syntax>
            <param name="endKeys">Множество допустимых конечных символов</param>
            <param name="context">Констекст объявления</param>
            <returns>Список типов объявленных переменных</returns>
        </member>
        <member name="T:TriadCompiler.DesignVarArrayType">
            <summary>
            Тип идексированной design переменной
            </summary>
        </member>
        <member name="M:TriadCompiler.DesignVarArrayType.#ctor(System.String,TriadCompiler.DesignTypeCode)">
            <summary>
            Конструктор
            </summary>
            <param name="varName">Имя переменной</param>
            <param name="typeCode">Тип design переменной</param>
        </member>
        <member name="F:TriadCompiler.DesignVarArrayType.varName">
            <summary>
            Имя переменной
            </summary>
        </member>
        <member name="F:TriadCompiler.DesignVarArrayType.typeCode">
            <summary>
            Тип дизайн-переменной
            </summary>
        </member>
        <member name="P:TriadCompiler.DesignVarArrayType.Name">
            <summary>
            Имя графа
            </summary>
        </member>
        <member name="P:TriadCompiler.DesignVarArrayType.TypeCode">
            <summary>
            Тип design переменной
            </summary>
        </member>
        <member name="T:TriadCompiler.Parser.Design.Statement.Simulate">
            <summary>
            Разбор оператора simulate
            </summary>
        </member>
        <member name="F:TriadCompiler.Parser.Design.Statement.Simulate.icCallNumber">
            <summary>
            Порядковый номер вызова УМ
            </summary>
        </member>
        <member name="F:TriadCompiler.Parser.Design.Statement.Simulate.modelName">
            <summary>
            Имя текущей модели
            </summary>
        </member>
        <member name="M:TriadCompiler.Parser.Design.Statement.Simulate.Parse(TriadCompiler.EndKeyList)">
            <summary>
            Разбор оператора
            </summary>
            <param name="endKeys">Множество конечных символов</param> 
        </member>
        <member name="M:TriadCompiler.Parser.Design.Statement.Simulate.GenerateSimulateMethod(System.String,System.Int32)">
            <summary>
            Сгенерировать метод, вызовающий
            </summary>
            <param name="modelName">Имя модели</param>
            <param name="icCallNumber">Порядковый номер УМ</param>
            <returns>Код</returns>
        </member>
        <member name="M:TriadCompiler.Parser.Design.Statement.Simulate.SingleSpyObject(TriadCompiler.EndKeyList,System.Collections.Generic.IEnumerator{TriadCompiler.ISpyType})">
            <summary>
            Один spy-объект
            </summary>
            <syntax>Variable | PolusVar | EventVar</syntax>
            <param name="endKeys">Допустимые конечные символы</param>
            <param name="enumerator">Тип формального параметра</param>
            <returns>Код метода, возращающего этот spy-объект</returns>
        </member>
        <member name="P:TriadCompiler.Parser.Design.Statement.Simulate.codeBuilder">
            <summary>
             Строитель кода
            </summary>
        </member>
        <member name="M:TriadCompiler.DesignParser.Compile(TriadCompiler.EndKeyList)">
            <summary>
            Начать разбор
            </summary>
            <param name="endKey">Множество допустимых конечных символов</param>
        </member>
        <member name="M:TriadCompiler.DesignParser.Design(TriadCompiler.EndKeyList)">
            <summary>
            Описание design
            </summary>
            <syntax>Design { Model.Parse | SimCondition.Parse } Def StatementList EndDesign</syntax>
            <param name="endKey">Множество допустимых конечных символов</param>
        </member>
        <member name="F:TriadCompiler.DesignParser.startKeys">
            <summary>
            Множество стартовых символов оператора в Design
            </summary>
        </member>
        <member name="M:TriadCompiler.DesignParser.Statement(TriadCompiler.EndKeyList,TriadCompiler.Parser.Common.Statement.StatementContext)">
            <summary> 
            Оператор в Design
            </summary>
            <param name="endKeys"> Множество конечных символов </param>
            <param name="context"> Текущий контекст </param>
            <returns> Представление для генерации кода </returns>
        </member>
        <member name="P:TriadCompiler.DesignParser.codeBuilder">
            <summary>
             Строитель кода
            </summary>
        </member>
        <member name="P:TriadCompiler.DesignParser.StartKeys">
            <summary>
            Стартовые символы оператора в Design
            </summary>
        </member>
        <member name="T:TriadCompiler.Parser.Common.ObjectRef.ObjectReference">
            <summary>
            Ссылка на любой объект или на диапазон объектов
            </summary>
            <remarks>В этом классе нельзя объявлять static переменные,
            т.к. вызовы разбора объекта могут быть вложенными!!!</remarks>
        </member>
        <member name="M:TriadCompiler.Parser.Common.ObjectRef.ObjectReference.Parse(TriadCompiler.EndKeyList,System.Boolean)">
            <summary>
            Разбор ссылки
            </summary>
            <param name="endKeys">Допустимые конечные символы</param>
            <param name="allowRange">Разрешены ли диапазоны</param>
            <returns>Описание ссылки</returns>
            <remarks>В целях унификации возвращаемое ObjectRefInfo даже
            одиночные объекты описывает как диапазоны из одного символа, хотя
            код генерит правильно</remarks>
            <syntax>Identificator # [ IndexBounds {,IndexBounds} ] #</syntax>
        </member>
        <member name="M:TriadCompiler.Parser.Common.ObjectRef.ObjectReference.Parse(TriadCompiler.EndKeyList,System.Boolean,TriadCompiler.Parser.Common.ObjectRef.ObjectReference.AdditionalIndexCheck)">
            <summary>
            Разбор ссылки
            </summary>
            <param name="endKeys">Допустимые конечные символы</param>
            <param name="allowRange">Разрешены ли диапазоны</param>
            <param name="additionalIndexCheck">Дополнительная проверка индекса</param>
            <returns>Описание ссылки</returns>
            <remarks>В целях унификации возвращаемое ObjectRefInfo даже
            одиночные объекты описывает как диапазоны из одного символа, хотя
            код генерит правильно</remarks>
            <syntax>Ident # [ IndexBounds {,IndexBounds} ] #</syntax>
        </member>
        <member name="M:TriadCompiler.Parser.Common.ObjectRef.ObjectReference.IndexBounds(TriadCompiler.EndKeyList,System.Boolean,System.Boolean@,TriadCompiler.Parser.Common.ObjectRef.ObjectRefInfo,System.Int32,TriadCompiler.Parser.Common.ObjectRef.ObjectReference.AdditionalIndexCheck)">
            <summary>
            Разбор индекса или диапазона индексов
            </summary>
            <param name="endKeys">Допустимые конечные символы</param>
            <param name="allowRange">Разрешены ли диапазоны</param>
            <param name="rangeFound">True, если указан диапазон</param>
            <param name="refInfo">Информация о разбираемом объекте</param>
            <param name="currIndexNumber">Номер текущего индекса</param>
            <param name="additionalIndexCheck">Дополнительная проверка индекса</param>
            <returns>Описание диапазона. Если это одиночный индекс,
            то верхняя граница диапазона совпадает с нижней</returns>
            <syntax>Expression # : Expression #</syntax>
        </member>
        <member name="M:TriadCompiler.Parser.Common.ObjectRef.ObjectReference.CheckIndexCount(TriadCompiler.ICommonType,TriadCompiler.Parser.Common.ObjectRef.ObjectRefInfo,System.Boolean)">
            <summary>
            Проверить число индексов у объекта
            </summary>
            <param name="varType">Заявленный тип объекта</param>
            <param name="objRef">Описание фактического вызова</param>
            <param name="arrayAllowed">Допустимы ли массивы без индексов</param>
        </member>
        <member name="T:TriadCompiler.Parser.Common.ObjectRef.ObjectReference.AdditionalIndexCheck">
            <summary>
            Дополнительная проверка индекса
            </summary>
            <param name="objectName">Имя объекта</param>
            <param name="exprInfo">Значение индекса</param>
            <param name="indexNumber">Номер индекса</param>
        </member>
        <member name="T:TriadCompiler.RealValue">
            <summary>
            Дочерний класс, предназначенный для хранения вещественных значений.
            </summary>
        </member>
        <member name="T:TriadCompiler.ConstValue">
            <summary>
            Родительский класс, предназначенный для хранения и вычисления константных выражений.
            </summary>
        </member>
        <member name="M:TriadCompiler.ConstValue.#ctor">
            <summary>
            	<para> Конструктор класса <see cref="T:TriadCompiler.ConstValue"/> .</para>
            </summary>
        </member>
        <member name="M:TriadCompiler.ConstValue.CalculateWith(TriadCompiler.Key)">
            <summary>
            Произвести вычисления по унарной операции relationOperation с текущим значениеми
            </summary>
            <param name="operation">Код операции</param>
            <returns>Контейнер результа вычислений</returns>
        </member>
        <member name="M:TriadCompiler.ConstValue.CalculateWith(TriadCompiler.Key,TriadCompiler.ConstValue)">
            <summary>
            Произвести вычисления по операции relationOperation с текущим и переданным значениями
            Результат будет сохранен в текущем значении
            </summary>
            <param name="operation">Код операции</param>
            <param name="operand">Второй операнд (первый - this)</param>
            <returns>Контейнер результа вычислений</returns>
        </member>
        <member name="F:TriadCompiler.ConstValue.isConstant">
            <summary>
            Индикатор того, что значение - константа
            </summary>
        </member>
        <member name="P:TriadCompiler.ConstValue.IsConstant">
            <summary>
            Проверка того, является ли значение константой
            </summary>
            <returns>true - если это константа</returns>
        </member>
        <member name="M:TriadCompiler.RealValue.#ctor(System.Double)">
            <summary>
            Конструктор
            </summary>
            <param name="value"> Значение </param>
        </member>
        <member name="M:TriadCompiler.RealValue.CalculateWith(TriadCompiler.Key)">
            <summary>
            Произвести вычисления
            </summary>
            <param name="operation"> Код унарной операции </param>
            <returns> Результат </returns>
        </member>
        <member name="M:TriadCompiler.RealValue.CalculateWith(TriadCompiler.Key,TriadCompiler.ConstValue)">
            <summary>
            Произвести вычисления
            </summary>
            <param name="operation"> Код бинарной операции </param>
            <param name="operand"> Второй операнд </param>
            <returns> Результат </returns>
        </member>
        <member name="P:TriadCompiler.RealValue.Value">
            <summary>
            Получить текущее значение
            </summary>
            <returns> Текущее значение
            </returns>
        </member>
        <member name="T:TriadCompiler.Parser.Common.Var.VarInfo">
            <summary>
            Информация о переменной
            </summary>
        </member>
        <member name="F:TriadCompiler.Parser.Common.Var.VarInfo.Type">
            <summary>
            Тип переменной
            </summary>
        </member>
        <member name="P:TriadCompiler.Parser.Common.Var.VarInfo.HasNoError">
            <summary>
            Признак того, что переменная была разобрана правильно
            </summary>
        </member>
        <member name="P:TriadCompiler.Parser.Common.Var.VarInfo.Code">
            <summary>
            Представление в виде кода
            </summary>
        </member>
        <member name="T:TriadCompiler.Parser.Routine.Statement.Interlock">
            <summary>
            Разбор оператора блокирования полюса
            </summary>
        </member>
        <member name="M:TriadCompiler.Parser.Routine.Statement.Interlock.Parse(TriadCompiler.EndKeyList)">
            <summary>
            Оператор блокирования входов
            </summary>
            <syntax>Iterlock PolusVariable {,PolusVariable}</syntax>
            <param name="endKeys">Множество конечных символов</param>
            <returns>Представление для генерации кода</returns>
        </member>
        <member name="T:TriadCompiler.FunctionType">
            <summary>
            Тип функции
            </summary>
        </member>
        <member name="F:TriadCompiler.FunctionType.typeName">
            <summary>
            Имя типа
            </summary>
        </member>
        <member name="F:TriadCompiler.FunctionType.strCode">
            <summary>
            Имя функции в сгенерированном коде
            </summary>
        </member>
        <member name="F:TriadCompiler.FunctionType.returnedType">
            <summary>
            Тип, возращаемый функцией
            </summary>
        </member>
        <member name="P:TriadCompiler.FunctionType.Name">
            <summary>
            Имя
            </summary>
        </member>
        <member name="P:TriadCompiler.FunctionType.MethodCodeName">
            <summary>
            Имя функции в сгенерированном коде
            </summary>
        </member>
        <member name="P:TriadCompiler.FunctionType.ReturnedType">
            <summary>
            Тип, возращаемый функцией
            </summary>
        </member>
        <member name="T:TriadCompiler.EventType">
            <summary>
            Тип, описывающий событие
            </summary>
        </member>
        <member name="M:TriadCompiler.EventType.#ctor(System.String)">
            <summary>
            Конструктор
            </summary>
            <param name="eventName">Имя события</param>
        </member>
        <member name="F:TriadCompiler.EventType.eventName">
            <summary>
            Имя события
            </summary>
        </member>
        <member name="F:TriadCompiler.EventType.isSpyObject">
            <summary>
            Признак spy-объекта
            </summary>
        </member>
        <member name="P:TriadCompiler.EventType.Name">
            <summary>
            Имя события
            </summary>
        </member>
        <member name="P:TriadCompiler.EventType.IsSpyObject">
            <summary>
            Признак spy-объекта
            </summary>
        </member>
        <member name="T:TriadCompiler.Parser.InfProcedure.Header.InfInterface">
            <summary>
            Разбор интерфейса ИП
            </summary>
        </member>
        <member name="F:TriadCompiler.Parser.InfProcedure.Header.InfInterface.spyDeclarationStartKeys">
            <summary>
            Стартовые символы объявления объекта слежения
            </summary>
        </member>
        <member name="M:TriadCompiler.Parser.InfProcedure.Header.InfInterface.Parse(TriadCompiler.EndKeyList)">
            <summary>
            Интерфейс
            </summary>
            <syntax>SingleInterface {SingleInterface}</syntax>
            <param name="endKeys">Множество допустимых конечных символов</param>
            <returns>Список типов объектов слежения</returns>
        </member>
        <member name="M:TriadCompiler.Parser.InfProcedure.Header.InfInterface.SingleInterface(TriadCompiler.EndKeyList)">
            <summary>
            Отдельный интерфейс
            </summary>
            <syntax> ( NextDeclaration {; NextDeclaration} )</syntax>
            <param name="endKeys">Множество допустимых конечных символов</param>
            <returns>Список типов объектов слежения</returns>
        </member>
        <member name="M:TriadCompiler.Parser.InfProcedure.Header.InfInterface.SingleDeclaration(TriadCompiler.EndKeyList)">
            <summary>
            Разбор параметра в интерфейсе 
            </summary>
            <param name="endKey">Множество допустимых конечных символов</param>
            <returns>Список типов spy-объектов</returns>
        </member>
        <member name="P:TriadCompiler.Parser.InfProcedure.Header.InfInterface.SpyDeclarationStartKeys">
            <summary>
            Стартовые символы объявления объекта слежения
            </summary>
        </member>
        <member name="P:TriadCompiler.Parser.InfProcedure.Header.InfInterface.codeBuilder">
            <summary>
            Строитель кода
            </summary>
        </member>
        <member name="T:TriadCompiler.SetValue">
            <summary>
            Вычисление выражений над множествами
            </summary>
        </member>
        <member name="F:TriadCompiler.SetValue.set">
            <summary>
            Текущее значение
            </summary>
        </member>
        <member name="M:TriadCompiler.SetValue.#ctor(System.Object[])">
            <summary>
            Конструктор
            </summary>
            <param name="valueList">Элементы множества</param>
        </member>
        <member name="M:TriadCompiler.SetValue.#ctor(TriadCore.Set)">
            <summary>
            Конструктор
            </summary>
            <param name="set">Начальное множество</param>
        </member>
        <member name="M:TriadCompiler.SetValue.AddValue(TriadCompiler.ConstValue)">
            <summary>
            Добавить элемент в мн-во
            </summary>
            <param name="value">Значение добавляемого элемента</param>
        </member>
        <member name="M:TriadCompiler.SetValue.CalculateWith(TriadCompiler.Key,TriadCompiler.ConstValue)">
            <summary>
            Выполнить бинарную операцию
            </summary>
            <param name="operation">Код операции</param>
            <param name="operand">Второе множество</param>
            <returns>Итоговое множество</returns>
        </member>
        <member name="P:TriadCompiler.SetValue.Value">
            <summary> 
            Получить текущее значение
            </summary>
            <returns> Текущее значение </returns>
        </member>
        <member name="T:TriadCompiler.BitStringValue">
            <summary>
            Дочерний класс, предназначенный для хранения битовых строковых значений.
            </summary>
        </member>
        <member name="F:TriadCompiler.BitStringValue.BitStringInvertConst">
            <summary>
            Константа для инвертирования битовых строк
            </summary>
        </member>
        <member name="M:TriadCompiler.BitStringValue.#ctor(System.Int64)">
            <summary>
            Конструктор
            </summary>
            <param name="value"> Значение </param>
        </member>
        <member name="M:TriadCompiler.BitStringValue.CalculateWith(TriadCompiler.Key)">
            <summary>
            Произвести вычисления
            </summary>
            <param name="operation"> Код унарной операции </param>
            <returns> Результат </returns>
        </member>
        <member name="M:TriadCompiler.BitStringValue.CalculateWith(TriadCompiler.Key,TriadCompiler.ConstValue)">
            <summary>
            Произвести вычисления
            </summary>
            <param name="operation"> Код бинарной операции </param>
            <param name="operand"> Второй операнд </param>
            <returns> Результат </returns>
        </member>
        <member name="P:TriadCompiler.BitStringValue.Value">
            <summary>
            Получить текущее значение
            </summary>
            <returns> Текущее значение </returns>
        </member>
        <member name="T:TriadCompiler.IPolusType">
            <summary>
            Интерфейс, который реализуют типы полюсов
            </summary>
        </member>
        <member name="T:TriadCompiler.ErrorReg">
            <summary>
            Класс отвечает за регистрацию ошибок и их печать.
            </summary>
        </member>
        <member name="F:TriadCompiler.ErrorReg.ErrorFileName">
            <summary>
            Имя файла с кодами ошибок
            </summary>
        </member>
        <member name="F:TriadCompiler.ErrorReg.MaxErrorCodeNumber">
            <summary>
            Максимально возможный код ошибки
            </summary>
        </member>
        <member name="F:TriadCompiler.ErrorReg.NoTextForErrorCodeMessage">
            <summary>
            Ошибка отсутствия сообщения об ошибке
            </summary>
        </member>
        <member name="F:TriadCompiler.ErrorReg.WrongErrorTextFormatMessage">
            <summary>
            Неверный формат записи в файле 
            </summary>
        </member>
        <member name="M:TriadCompiler.ErrorReg.#ctor">
            <summary>
            Конструктор
            </summary>
        </member>
        <member name="M:TriadCompiler.ErrorReg.Reload">
            <summary>
            Обновить
            </summary>
        </member>
        <member name="M:TriadCompiler.ErrorReg.Register(System.UInt32)">
            <summary>
            Зарегистрировать ошибку
            </summary>
            <param name="errCode">Код сообщения об ошибке</param>
        </member>
        <member name="M:TriadCompiler.ErrorReg.Register(System.UInt32,System.String)">
            <summary>
            Зарегистрировать ошибку и добавить к сообщению произвольный текст
            </summary>
            <param name="errCode">Код сообщения об ошибке</param>
            <param name="additionalText">Дополнительный текст ошибки</param>
        </member>
        <member name="M:TriadCompiler.ErrorReg.Register(System.UInt32,System.Collections.Generic.List{TriadCompiler.Key})">
            <summary>
            Зарегистрировать ошибку и указать множество допустимых символов
            </summary>
            <param name="errCode">Код ошибки</param>
            <param name="allowedEndKeys">Множество допустимых символов</param>
        </member>
        <member name="M:TriadCompiler.ErrorReg.Register(System.UInt32,TriadCompiler.Key[])">
            <summary>
            Зарегистрировать ошибку и указать множество допустимых символов
            </summary>
            <param name="errCode">Код ошибки</param>
            <param name="keys">Множество допустимых символов</param>
        </member>
        <member name="M:TriadCompiler.ErrorReg.FillErrMessagesList">
            <summary>
            Заполнить список с сообщениями об ошибках
            </summary>
        </member>
        <member name="F:TriadCompiler.ErrorReg.errorCount">
            <summary>
            Общее число зарегистрированных ошибок
            </summary>
        </member>
        <member name="F:TriadCompiler.ErrorReg.printAllowedKeys">
            <summary>
            Определение печатать или нет множества допустимых символов при выводе ошибок
            </summary>
        </member>
        <member name="P:TriadCompiler.ErrorReg.ErrorCount">
            <summary>
            Общее число зарегистрированных ошибок
            </summary>
        </member>
        <member name="P:TriadCompiler.ErrorReg.PrintAllowedKeys">
            <summary>
            Определение печатать или нет множества допустимых символов при выводе ошибок
            </summary>
        </member>
        <member name="T:TriadCompiler.StructureParser">
            <summary>
            Разбор операторов в структуре
            </summary>
            <summary>
            Класс для разбора структур
            </summary>
        </member>
        <member name="F:TriadCompiler.StructureParser.structureStatementSet">
            <summary>
            Множество стартовых символов оператора в структуре
            </summary>
        </member>
        <member name="M:TriadCompiler.StructureParser.Statement(TriadCompiler.EndKeyList,TriadCompiler.Parser.Common.Statement.StatementContext)">
            <summary> 
            Оператор в структуре
            </summary>
            <param name="endKeys"> Множество конечных символов </param>
            <param name="context"> Текущий контекст </param>
            <returns> Представление для генерации кода </returns>
            <syntax> StructVarDeclaration | StructAssignement | Assignement | IfStatement | WhileStatement |
            ForStatement | DesignTypeConstructor | Print </syntax>
        </member>
        <member name="M:TriadCompiler.StructureParser.Compile(TriadCompiler.EndKeyList)">
            <summary>
            Начать разбор
            </summary>
            <param name="endKey">Множество допустимых конечных символов</param>
        </member>
        <member name="M:TriadCompiler.StructureParser.Structure(TriadCompiler.EndKeyList)">
            <summary>
            Объявление структуры
            </summary>
            <param name="endKeys">Множество конечных символов</param>
            <syntax>Structure Identificator Define StatementList EndStructure</syntax>
        </member>
        <member name="P:TriadCompiler.StructureParser.StartKeys">
            <summary>
            Стартовые символы оператора в структуре
            </summary>
        </member>
        <member name="P:TriadCompiler.StructureParser.codeBuilder">
            <summary>
             Строитель кода
            </summary>
        </member>
        <member name="T:TriadCompiler.Parser.Common.Statement.StatementContext">
            <summary>
            Контекст вызова оператора
            </summary>
        </member>
        <member name="F:TriadCompiler.Parser.Common.Statement.StatementContext.Initial">
            <summary>
            Секция инициализации
            </summary>
        </member>
        <member name="F:TriadCompiler.Parser.Common.Statement.StatementContext.MessageEvent">
            <summary>
            Событие обработки входных сообщений
            </summary>
        </member>
        <member name="F:TriadCompiler.Parser.Common.Statement.StatementContext.Common">
            <summary>
            Обычный контекст
            </summary>
        </member>
        <member name="F:TriadCompiler.Parser.Common.Statement.StatementContext.Handling">
            <summary>
            Секция обработки в информационной процедуре
            </summary>
        </member>
        <member name="T:TriadCompiler.Parser.Common.Statement.StatementList">
            <summary>
            Разбор последовательности операторов
            </summary>
        </member>
        <member name="M:TriadCompiler.Parser.Common.Statement.StatementList.Parse(TriadCompiler.EndKeyList,TriadCompiler.Parser.Common.Statement.StatementContext)">
            <summary>
            Последовательность операторов
            </summary>
            <syntax>Statement {;Statement}</syntax>
            <param name="endKeys">Множество допустимых конечных символов</param>
            <param name="context">Контекст оператора</param>
            <returns>Класс для генерации кода</returns>
        </member>
        <member name="T:TriadCompiler.Parser.Common.Declaration.Polus.PolusDeclaration">
            <summary>
            Разбор объявления полюсов
            </summary>
        </member>
        <member name="F:TriadCompiler.Parser.Common.Declaration.Polus.PolusDeclaration.startKeys">
            <summary>
            Множество стартовых символов объявления полюса
            </summary>
        </member>
        <member name="M:TriadCompiler.Parser.Common.Declaration.Polus.PolusDeclaration.Parse(TriadCompiler.EndKeyList,System.Boolean)">
            <summary>
            Объявление полюсов
            </summary>
            <syntax>Input | Output | InOut PolusNameInDeclaration {,PolusNameInDeclaration}</syntax>
            <param name="endKeys">Множество допустимых конечных символов</param>
            <param name="isSpyObject">Признак spy-объекта</param>
            <returns>Список типов объявленных полюсов</returns>
        </member>
        <member name="M:TriadCompiler.Parser.Common.Declaration.Polus.PolusDeclaration.PolusName(TriadCompiler.EndKeyList,System.Boolean,System.Boolean)">
            <summary>
            Имя полюса
            </summary>
            <syntax>Identificator # RangeDeclaration #</syntax>
            <param name="endKeys">Множество допустимых конечных символов</param>
            <param name="isInput">Это входной полюс</param>
            <param name="isOutput">Это выходной полюс</param>
            <returns>Тип полюса</returns>
        </member>
        <member name="P:TriadCompiler.Parser.Common.Declaration.Polus.PolusDeclaration.StartKeys">
            <summary>
            Стартовые символы объявления полюса
            </summary>
        </member>
        <member name="M:TriadCompiler.Parser.Common.Declaration.Event.EventDeclaration.Parse(TriadCompiler.EndKeyList,System.Boolean)">
            <summary>
            Объявление событий
            </summary>
            <syntax>Identificator {,Identificator}</syntax>
            <param name="endKeys">Множество допустимых конечных символов</param>
            <param name="isSpyObject">Признак spy-объектов</param>
            <returns>Список типов объявленных событий</returns>
        </member>
        <member name="M:TriadCompiler.Parser.Common.Declaration.Event.EventDeclaration.EventName(TriadCompiler.EndKeyList,System.Boolean)">
            <summary>
            Разбор имени события в объявлении
            </summary>
            <param name="endKeys">Допустимые конечные символы</param>
            <param name="isSpyObject">Признак spy-объекта</param>
            <returns>Тип события</returns>
        </member>
        <member name="T:TriadCompiler.Parser.Common.Function.FunctionInfo">
            <summary>
            Информация о разобранном вызове функции
            </summary>
        </member>
        <member name="F:TriadCompiler.Parser.Common.Function.FunctionInfo.Type">
            <summary>
            Тип функции
            </summary>
        </member>
        <member name="F:TriadCompiler.Parser.Common.Function.FunctionInfo.code">
            <summary>
            Код вызова функции
            </summary>
        </member>
        <member name="F:TriadCompiler.Parser.Common.Function.FunctionInfo.strCode">
            <summary>
            Строковое представление кода
            </summary>
        </member>
        <member name="P:TriadCompiler.Parser.Common.Function.FunctionInfo.StrCode">
            <summary>
            Строковое представление
            </summary>
        </member>
        <member name="P:TriadCompiler.Parser.Common.Function.FunctionInfo.Code">
            <summary>
            Представление в виде кода
            </summary>
        </member>
        <member name="T:TriadCompiler.Parser.Common.Expr.Fact.Factor">
            <summary>
            Разбор множителя в арифметическом выражении
            </summary>
            <summary>
            Проверка типов для множителя в арифметическом выражении
            </summary>
            <summary>
            Генерация кода для множителя в арифметическом выражении
            </summary>
        </member>
        <member name="M:TriadCompiler.Parser.Common.Expr.Fact.Factor.Parse(TriadCompiler.EndKeyList)">
            <summary>
            Множитель
            </summary>
            <syntax>Not Factor | SimpleFactor {Power SimpleFactor}</syntax>
            <param name="endKeys">Множество конечных символов</param>
            <returns>Информация о множителе</returns>
        </member>
        <member name="M:TriadCompiler.Parser.Common.Expr.Fact.Factor.CheckTypeInNotFactor(TriadCompiler.IExprType)">
            <summary>
            Совместимость типов в операции not
            </summary>
            <param name="type">Тестируемый тип</param>
            <returns>Результирующий тип после выполнения операции</returns>
        </member>
        <member name="M:TriadCompiler.Parser.Common.Expr.Fact.Factor.CheckTypeInSimpleFactor(TriadCompiler.IExprType,TriadCompiler.IExprType)">
            <summary>
            Совместимость типов на уровне SimpleFactor
            </summary>
            <param name="prevType">Тестируемый тип</param>
            <param name="nextType">Тестируемый тип</param>
            <returns>Результирующий тип после выполнения операции</returns>
        </member>
        <member name="M:TriadCompiler.Parser.Common.Expr.Fact.Factor.BuildStringCodeForNotFactor(TriadCompiler.Parser.Common.Expr.ExprInfo)">
            <summary>
            Сгенерировать строковое представление для отрицания множителя
            </summary>
            <param name="info">Информация о множителе</param>
        </member>
        <member name="M:TriadCompiler.Parser.Common.Expr.Fact.Factor.BuildStringCodeForFactor(TriadCompiler.Parser.Common.Expr.ExprInfo,TriadCompiler.Parser.Common.Expr.ExprInfo)">
            <summary>
            Сгенерировать строковое представление для множителя
            </summary>
            <param name="info">Информация о всем множителе</param>
            <param name="nextSimpleFactorInfo">Информация о текущес простом множителе</param>
        </member>
        <member name="T:TriadCompiler.Parser.Common.Expr.Add.Addend">
            <summary>
            Генерация кода для слагаемого в арифметическом выражении
            </summary>
            <summary>
            Проверка типов для слагаемого в арифметическом выражении
            </summary>
            <summary>
            Разбор слагаемого в арифметическом выражении
            </summary>
        </member>
        <member name="M:TriadCompiler.Parser.Common.Expr.Add.Addend.BuildStringCodeForAddend(TriadCompiler.Parser.Common.Expr.ExprInfo,TriadCompiler.Parser.Common.Expr.ExprInfo,TriadCompiler.Key)">
            <summary>
            Генерация кода в слагаемом
            </summary>
            <param name="info">Информация о всем слагаемом</param>
            <param name="nextFactorInfo">Информация о текущем множителе</param>
            <param name="multiplierOperation">Операция умножения</param>
        </member>
        <member name="M:TriadCompiler.Parser.Common.Expr.Add.Addend.CheckTypeInFactor(TriadCompiler.IExprType,TriadCompiler.IExprType,TriadCompiler.Key)">
            <summary>
            Проверить совместимость типов на уровне Factor
            </summary>
            <param name="prevType">Тестируемый тип</param>
            <param name="nextType">Тестируемый тип</param>
            <param name="operation">Код операции</param>
            <returns>Результирующий тип после выполнения операции</returns>
        </member>
        <member name="F:TriadCompiler.Parser.Common.Expr.Add.Addend.multSet">
            <summary>
            Множество операций умножения
            </summary>
        </member>
        <member name="M:TriadCompiler.Parser.Common.Expr.Add.Addend.Parse(TriadCompiler.EndKeyList)">
            <summary>
            Слагаемое
            </summary>
            <syntax>Factor {MULT_OP Factor}</syntax>
            <param name="endKeys">Множество конечных символов</param>
            <returns>Информация о слагаемом</returns>
        </member>
        <member name="P:TriadCompiler.Parser.Common.Expr.Add.Addend.MultKeys">
            <summary>
            Множество операций умножения
            </summary>
        </member>
        <member name="T:TriadCompiler.VarDeclarationContext">
            <summary>
            Контекст разбора параметров
            </summary>
        </member>
        <member name="F:TriadCompiler.VarDeclarationContext.Common">
            <summary>
            Общий
            </summary>
        </member>
        <member name="F:TriadCompiler.VarDeclarationContext.SpyObjectList">
            <summary>
            Список spy-объектов
            </summary>
        </member>
        <member name="F:TriadCompiler.VarDeclarationContext.IncludeSection">
            <summary>
            Секция подключения
            </summary>
        </member>
        <member name="T:TriadCompiler.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:TriadCompiler.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:TriadCompiler.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:TriadCompiler.Properties.Resources.ErrMessages">
             <summary>
               Looks up a localized string similar to 1 Здесь должен быть идентификатор
            5 Здесь должен быть символ  &quot;,&quot; (запятая)
            6 Здесь должен быть символ  &quot;;&quot; (точка с запятой)
            7 Здесь должен быть символ  &quot;:&quot; (двоеточие)
            8 Здесь должен быть символ  &quot;.&quot; (точка)
            10 Здесь должен быть символ  &quot;(&quot; (левая круглая скобка)
            11 Здесь должен быть символ  &quot;)&quot; (правая круглая скобка)
            12 Здесь должен быть символ  &quot;[&quot; (левая квадратная скобка)
            13 Здесь должен быть символ  &quot;]&quot; (правая квадратная скобка)
            17 Здесь должен быть символ  &quot;&gt;&quot; (правая угловая скобка)
            26  [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="T:TriadCompiler.CompilerFacade">
            <summary>
            Фасад для подсистемы компиляции
            </summary>
        </member>
        <member name="F:TriadCompiler.CompilerFacade.designTypeName">
            <summary>
            Имя компилируемого объекта
            </summary>
        </member>
        <member name="F:TriadCompiler.CompilerFacade.showExtendedErrorInfo">
            <summary>
            Показывать дополнительную информацию об ошибках
            </summary>
        </member>
        <member name="M:TriadCompiler.CompilerFacade.ConfigureCompiler(TriadCompiler.IO,TriadCompiler.CodeBuilderMode,TriadCompiler.Code.Generator.CodeFormat,System.String)">
            <summary>
            Настроить компилятор
            </summary>
            <param name="io">Ввод-вывод</param>
            <param name="builderMode">Режим компиляции</param>
            <param name="codeFormat">Формат результирующего кода</param>
            <param name="fileName">Имя файла</param>
        </member>
        <member name="M:TriadCompiler.CompilerFacade.CompileModelToTxt(TriadCompiler.IO,System.String)">
             <summary>
             Скомпилировать модель в текстовый файл
             </summary>
            <param name="io">Ввод-вывод</param>
            <param name="fileName">Имя файла для записи в него кода</param>
        </member>
        <member name="M:TriadCompiler.CompilerFacade.CompileModelToDll(TriadCompiler.IO,System.String)">
             <summary>
             Скомпилировать модель в dll
             </summary>
            <param name="io">Ввод-вывод</param>
            <param name="fileName">Имя файла для записи в него кода</param>
        </member>
        <member name="M:TriadCompiler.CompilerFacade.CompileRoutineToTxt(TriadCompiler.IO,System.String)">
             <summary>
             Скомпилировать рутину в текстовый файл
             </summary>
            <param name="io">Ввод-вывод</param>
            <param name="fileName">Имя файла для записи в него кода</param>
        </member>
        <member name="M:TriadCompiler.CompilerFacade.CompileRoutineToDll(TriadCompiler.IO,System.String)">
            <summary>
            Скомпилировать рутину в dll
            </summary>
            <param name="io">Ввод-вывод</param>
            <param name="fileName">Имя файла для записи в него кода</param>
        </member>
        <member name="M:TriadCompiler.CompilerFacade.CompileStructureToTxt(TriadCompiler.IO,System.String)">
            <summary>
            Скомпилировать структуру в txt
            </summary>
            <param name="io">Ввод-вывод</param>
            <param name="fileName">Имя файла для записи в него кода</param>
        </member>
        <member name="M:TriadCompiler.CompilerFacade.CompileStructureToDll(TriadCompiler.IO,System.String)">
            <summary>
            Скомпилировать структуру в dll
            </summary>
            <param name="io">Ввод-вывод</param>
            <param name="fileName">Имя файла для записи в него кода</param>
        </member>
        <member name="M:TriadCompiler.CompilerFacade.CompileIProcedureToTxt(TriadCompiler.IO,System.String)">
             <summary>
             Скомпилировать информационную процедуру в текстовый файл
             </summary>
            <param name="io">Ввод-вывод</param>
            <param name="fileName">Имя файла для записи в него кода</param>
        </member>
        <member name="M:TriadCompiler.CompilerFacade.CompileIProcedureToDll(TriadCompiler.IO,System.String)">
            <summary>
            Скомпилировать информационную процедуру в dll
            </summary>
            <param name="io">Ввод-вывод</param>
            <param name="fileName">Имя файла для записи в него кода</param>
        </member>
        <member name="M:TriadCompiler.CompilerFacade.CompileIConditionToTxt(TriadCompiler.IO,System.String)">
             <summary>
             Скомпилировать условия моделирования в текстовый файл
             </summary>
            <param name="io">Ввод-вывод</param>
            <param name="fileName">Имя файла для записи в него кода</param>
        </member>
        <member name="M:TriadCompiler.CompilerFacade.CompileIConditionToDll(TriadCompiler.IO,System.String)">
            <summary>
            Скомпилировать условия моделирования в dll
            </summary>
            <param name="io">Ввод-вывод</param>
            <param name="fileName">Имя файла для записи в него кода</param>
        </member>
        <member name="M:TriadCompiler.CompilerFacade.CompileDesignToTxt(TriadCompiler.IO,System.String)">
             <summary>
             Скомпилировать дизайн в текстовый файл
             </summary>
            <param name="io">Ввод-вывод</param>
            <param name="fileName">Имя файла для записи в него кода</param>
        </member>
        <member name="M:TriadCompiler.CompilerFacade.CompileDesignToDll(TriadCompiler.IO,System.String)">
            <summary>
            Скомпилировать дизайн в dll
            </summary>
            <param name="io">Ввод-вывод</param>
            <param name="fileName">Имя файла для записи в него кода</param>
        </member>
        <member name="M:TriadCompiler.CompilerFacade.TestModel(TriadCompiler.IO,System.String)">
             <summary>
             Протестировать модель
             </summary>
            <param name="io">Ввод-вывод</param>
            <param name="fileName">Имя файла с исходным текстом</param>
        </member>
        <member name="M:TriadCompiler.CompilerFacade.TestRoutine(TriadCompiler.IO,System.String)">
            <summary>
            Протестировать рутины
            </summary>
            <param name="io">Ввод-вывод</param>
            <param name="sourceFileName">Имя файла с исходным текстом</param>
        </member>
        <member name="M:TriadCompiler.CompilerFacade.TestStructure(TriadCompiler.IO,System.String)">
            <summary>
            Протестировать структуры
            </summary>
            <param name="io">Ввод-вывод</param>
            <param name="sourceFileName">Имя файла с исходным текстом</param>
        </member>
        <member name="M:TriadCompiler.CompilerFacade.TestIProcedure(TriadCompiler.IO,System.String)">
            <summary>
            Протестировать информационные процедуры
            </summary>
            <param name="io">Ввод-вывод</param>
            <param name="sourceFileName">Имя файла с исходным текстом</param>
        </member>
        <member name="M:TriadCompiler.CompilerFacade.TestICondition(TriadCompiler.IO,System.String)">
            <summary>
            Протестировать условия моделирования
            </summary>
            <param name="io">Ввод-вывод</param>
            <param name="sourceFileName">Имя файла с исходным текстом</param>
        </member>
        <member name="M:TriadCompiler.CompilerFacade.TestDesign(TriadCompiler.IO,System.String)">
            <summary>
            Протестировать дизайн
            </summary>
            <param name="io">Ввод-вывод</param>
            <param name="sourceFileName">Имя файла с исходным текстом</param>
        </member>
        <member name="M:TriadCompiler.CompilerFacade.GetPolusesCompiledRoutine">
            <summary>
            список полюсов скомпилированной рутины
            </summary>
            <returns></returns>
        </member>
        <member name="M:TriadCompiler.CompilerFacade.GetVariablesCompiledRoutine">
            <summary>
            список объявленных в рутине переменных
            </summary>
            <returns></returns>
        </member>
        <member name="M:TriadCompiler.CompilerFacade.GetEventNamesCompiledRoutine">
            <summary>
            список имен событий рутины
            </summary>
            <returns></returns>
        </member>
        <member name="P:TriadCompiler.CompilerFacade.DesignTypeName">
            <summary>
            Имя компилируемого объекта
            </summary>
        </member>
        <member name="P:TriadCompiler.CompilerFacade.ShowExtendedErrorInfo">
            <summary>
            Показывать дополнительную информацию об ошибках
            </summary>
        </member>
        <member name="T:TriadCompiler.Parser.Common.Header.Interface">
            <summary>
            Разбор интерфейса объекта
            </summary>
        </member>
        <member name="M:TriadCompiler.Parser.Common.Header.Interface.Parse(TriadCompiler.EndKeyList)">
            <summary>
            Интерфейс
            </summary>
            <syntax>SingleInterface {SingleInterface}</syntax>
            <param name="endKeys">Множество допустимых конечных символов</param>
        </member>
        <member name="M:TriadCompiler.Parser.Common.Header.Interface.SingleInterface(TriadCompiler.EndKeyList)">
            <summary>
            Отдельный интерфейс
            </summary>
            <syntax> ( PolusDeclaration {; PolusDeclaration} )</syntax>
            <param name="endKeys">Множество допустимых конечных символов</param>
        </member>
        <member name="T:TriadCompiler.Parser.Common.Header.Header">
            <summary>
            Разбор заголовка объекта
            </summary>
        </member>
        <member name="M:TriadCompiler.Parser.Common.Header.Header.Parse(TriadCompiler.EndKeyList)">
            <summary>
            Заголовок объекта
            </summary>
            <syntax>{ ParameterList | Interface }</syntax>
            <param name="endKeys">Множество допустимых конечных символов</param>
            <returns>Список типов параметров</returns>
        </member>
        <member name="T:TriadCompiler.Parser.Structure.StructExpr.Add.Addend">
            <summary>
            Разбор слагаемого в структурном выражении
            </summary>
        </member>
        <member name="M:TriadCompiler.Parser.Structure.StructExpr.Add.Addend.Parse(TriadCompiler.EndKeyList)">
            <summary>
            Структурное слагаемое
            </summary>
            <param name="endKeys">Множество конечных символов</param>
            <syntax>StructFactor { structMultOP StructFactor }</syntax>
        </member>
        <member name="M:TriadCompiler.Parser.Structure.StructExpr.Add.Addend.AddendCode(TriadCompiler.Key)">
            <summary>
            Сгенерировать код для структурного слагаемого
            </summary>
            <param name="operation">Код операции</param>
            <returns>Сгенерированный код</returns>
        </member>
        <member name="M:TriadCompiler.IProcedureCodeBuilder.#ctor">
            <summary>
            Конструктор
            </summary>
        </member>
        <member name="M:TriadCompiler.IProcedureCodeBuilder.CreateRegisterSpyObjectMethod">
            <summary>
            Создать метод, регистрирующий все spy-объекты
            </summary>
        </member>
        <member name="M:TriadCompiler.IProcedureCodeBuilder.CreateGetOutVarMethod">
            <summary>
            Создать метод, возвращающий все out-переменные
            </summary>
        </member>
        <member name="M:TriadCompiler.IProcedureCodeBuilder.CreateDoProcessingMethod">
            <summary>
            Создать метод, возвращающий значение ИП
            </summary>
        </member>
        <member name="M:TriadCompiler.IProcedureCodeBuilder.CreateDoHandlingMethod">
            <summary>
            Создать метод, обрабатывающий изменения spy-объектов
            </summary>
        </member>
        <member name="M:TriadCompiler.IProcedureCodeBuilder.AddSpyObject(TriadCompiler.ISpyType)">
            <summary>
            Добавить spy-объект
            </summary>
            <param name="spyObjectType">Тип spy-объекта</param>
        </member>
        <member name="M:TriadCompiler.IProcedureCodeBuilder.AddProperty(TriadCompiler.IExprType)">
            <summary>
            Добавить свойство для объекта, следящего за переменной
            </summary>
            <param name="spyVarType">Объект</param>
        </member>
        <member name="M:TriadCompiler.IProcedureCodeBuilder.AddRegisterSpyObjectMethod(TriadCompiler.ISpyType)">
            <summary>
            Добавить метод, регистрирующий один spy-объект
            </summary>
            <param name="spyObjectType">Тип spy-объекта</param>
        </member>
        <member name="M:TriadCompiler.IProcedureCodeBuilder.AddSpyHandler(TriadCompiler.ISpyType)">
            <summary>
            Добавить метод, регистрирующий обработчик изменений объекта слежения
            </summary>
            <param name="spyObjectType">Тип объекта слежения</param>
        </member>
        <member name="M:TriadCompiler.IProcedureCodeBuilder.AddOutVariable(TriadCompiler.IExprType)">
            <summary>
            Добавить out-переменную
            </summary>
            <param name="varType">Тип переменной</param>
        </member>
        <member name="M:TriadCompiler.IProcedureCodeBuilder.SetIPResultType(TriadCompiler.IExprType)">
            <summary>
            Задать тип значения, возращаемого ИП
            </summary>
            <param name="varType">Тип значения</param>
        </member>
        <member name="M:TriadCompiler.IProcedureCodeBuilder.SetDoProcessing(System.CodeDom.CodeStatementCollection)">
            <summary>
            Задать операторы в секции processing
            </summary>
            <param name="statList">Список операторов</param>
        </member>
        <member name="M:TriadCompiler.IProcedureCodeBuilder.SetDoHandling(System.CodeDom.CodeStatementCollection)">
            <summary>
            Задать операторы в секции handling
            </summary>
            <param name="statList">Список операторов</param>
        </member>
        <member name="M:TriadCompiler.IProcedureCodeBuilder.Reload">
            <summary>
            Перезагрузить генератор кода
            </summary>
        </member>
        <member name="F:TriadCompiler.IProcedureCodeBuilder.registerSpyObjectsMethod">
            <summary>
            Метод регистрирующий spy-объекты
            </summary>
        </member>
        <member name="F:TriadCompiler.IProcedureCodeBuilder.getOutVarMethod">
            <summary>
            Метод, возвращающий все out-переменные
            </summary>
        </member>
        <member name="F:TriadCompiler.IProcedureCodeBuilder.doProcessingMethod">
            <summary>
            Метод, возвращающий значение ИП
            </summary>
        </member>
        <member name="F:TriadCompiler.IProcedureCodeBuilder.doHandlingMethod">
            <summary>
            Метод, обрабатывающий изменение spy-объектов
            </summary>
        </member>
        <member name="T:TriadCompiler.BooleanSymbol">
             <summary>
            Информация о логической константе (true или false)
             </summary>
             <syntax>Значение у поля indexStringCode должно быть BitStringValue</syntax>
        </member>
        <member name="F:TriadCompiler.BooleanSymbol.value">
            <summary>
            Битовое значение символа
            </summary>
        </member>
        <member name="M:TriadCompiler.BooleanSymbol.#ctor">
            <summary>
            Конструктор
            </summary>
        </member>
        <member name="M:TriadCompiler.BooleanSymbol.#ctor(System.Boolean)">
            <summary>
            Конструктор
            </summary>
        </member>
        <member name="P:TriadCompiler.BooleanSymbol.Value">
            <summary>
            Битовое значение символа
            </summary>
        </member>
        <member name="T:TriadCompiler.Parser.Model.Declaration.DesignVariable.DesignVarDeclaration">
            <summary>
            Разбор объявления дизайн-переменных
            </summary>
        </member>
        <member name="M:TriadCompiler.Parser.Model.Declaration.DesignVariable.DesignVarDeclaration.Parse(TriadCompiler.EndKeyList)">
            <summary>
            Список объявлений design переменных
            </summary>
            <param name="endKeys">Множество конечных символов</param>
            <sysntax>Structure | Routine | Model | InfProcedure | ModelCondition
            DesignVarDeclaration {,DesignVarDeclaration}</sysntax>
        </member>
        <member name="M:TriadCompiler.Parser.Model.Declaration.DesignVariable.DesignVarDeclaration.DesignDeclaration(TriadCompiler.EndKeyList,TriadCompiler.DesignTypeCode)">
            <summary>
            Объявление design переменной
            </summary>
            <param name="endKeys">Множество конечных символов</param>
            <param name="designTypeCode">Тип design переменной</param>
            <syntax>Identificator # RangeDeclaration #</syntax>
        </member>
        <member name="T:TriadCompiler.Parser.Structure.StructExpr.Node.NodeDeclaration">
            <summary>
            Разбор объявления вершины в структурном выражении
            </summary>
        </member>
        <member name="M:TriadCompiler.Parser.Structure.StructExpr.Node.NodeDeclaration.Parse(TriadCompiler.EndKeyList)">
            <summary>
            Объявление вершины в структурном выражении
            </summary>
            <param name="endKeys">Множество конечных символов</param>
            <syntax>ObjectReference # ObjectReference  {,ObjectReference } #</syntax>
        </member>
        <member name="T:TriadCompiler.Parser.Common.Statement.Foreach">
            <summary>
            Оператор перебора элементов в мн-ве
            </summary>
        </member>
        <member name="F:TriadCompiler.Parser.Common.Statement.Foreach.invokeCount">
            <summary>
            Число вызовов разбора оператора
            </summary>
        </member>
        <member name="M:TriadCompiler.Parser.Common.Statement.Foreach.Parse(TriadCompiler.EndKeyList,TriadCompiler.Parser.Common.Statement.StatementContext)">
            <summary>
            Разбор оператора
            </summary>
            <syntax>Foreach Variable In Expression Do StatementList EndF</syntax>
            <param name="endKeys">Множество конечных символов</param>
            <param name="context">Текущий контекст</param>
            <returns>Представление для генерации кода</returns>
        </member>
        <member name="M:TriadCompiler.Parser.Common.Statement.Foreach.GenerateCode(TriadCompiler.Parser.Common.Var.VarInfo,TriadCompiler.Parser.Common.Expr.ExprInfo,System.CodeDom.CodeStatementCollection)">
            <summary>
            Сгенерировать код
            </summary>
            <param name="varInfo">Описание переменной-счетчика</param>
            <param name="exprInfo">Описание множества</param>
            <param name="internalStatList">Список внутренних операторов</param>
            <returns>Сгенерированный код</returns>
        </member>
        <member name="M:TriadCompiler.Parser.Common.Statement.Foreach.GetEnumeratorName">
            <summary>
            Получить имя счетчика
            </summary>
            <returns></returns>
        </member>
        <member name="T:TriadCompiler.RealSymbol">
            <summary>
            Информация о вещественной константе.
            </summary>
            <syntax>Значение поля indexStringCode должно быть RealValue</syntax>
        </member>
        <member name="F:TriadCompiler.RealSymbol.value">
            <summary>
            Вещественное значение символа
            </summary> 
        </member>
        <member name="M:TriadCompiler.RealSymbol.#ctor">
            <summary>
            Конструктор
            </summary>
        </member>
        <member name="P:TriadCompiler.RealSymbol.Value">
            <summary>
            Вещественное значение символа
            </summary> 
        </member>
        <member name="T:TriadCompiler.NilSymbol">
            <summary>
            Пустой символ nil
            </summary>
        </member>
        <member name="M:TriadCompiler.NilSymbol.#ctor">
            <summary>
            Конструктор
            </summary>
        </member>
        <member name="T:TriadCompiler.Parser.Structure.StructExpr.Conn.Connection">
            <summary>
            Разбор соединения в структурном выражении
            </summary>
        </member>
        <member name="M:TriadCompiler.Parser.Structure.StructExpr.Conn.Connection.Parse(TriadCompiler.EndKeyList,System.String)">
            <summary>
            Дуга или ребро, соединяющая полюса
            </summary>
            <param name="endKeys">Множество допустимых конечных символов</param>
            <param name="createConnectionMethodName">Имя метода, создающего соединение</param>
            <syntax>Arc | Edge ConnectionTerminalNode -- ConnectionTerminalNode</syntax>
            <returns>Сгенерированный код</returns>
        </member>
        <member name="M:TriadCompiler.Parser.Structure.StructExpr.Conn.Connection.ConnectionEndPoint(TriadCompiler.EndKeyList,System.CodeDom.CodeMethodInvokeExpression)">
            <summary>
            Один из концов дуги или ребра
            </summary>
            <param name="endKeys">Множество допустимых конечных символов</param>
            <param name="addConnectionStat">Ссылка на метод, формирующий соединение</param>
            <returns>Сгенерированный код</returns>
            <synatx>ObjectReference . ObjectReference</synatx>
        </member>
        <member name="F:TriadCompiler.Parser.InfProcedure.Statement.InfCase.caseConditionStartKeys">
            <summary>
            Стартовые символы  условия в операторе case
            </summary>
        </member>
        <member name="M:TriadCompiler.Parser.InfProcedure.Statement.InfCase.Parse(TriadCompiler.EndKeyList)">
            <summary>
            Оператор множественного выбора 
            </summary>        
            <param name="endKeys">Множество конечных символов</param> 
            <returns>Представление для генерации кода</returns>
        </member>
        <member name="M:TriadCompiler.Parser.InfProcedure.Statement.InfCase.CaseConditionList(TriadCompiler.EndKeyList)">
            <summary>
            Ветка в операторе case
            </summary>
            <syntax>caseCondition{,caseCondition}</syntax>
            <param name="endKeys">Множество конечных символов</param>
            <returns>Представление для генерации кода</returns>
        </member>
        <member name="M:TriadCompiler.Parser.InfProcedure.Statement.InfCase.CaseCondition(TriadCompiler.EndKeyList)">
            <summary>
            Имя объекта слежения в операторе case
            </summary>
            <syntax># polus PolusVar | event EventVar | in Variable # </syntax>
            <param name="endKeys">Множество конечных символов</param>
            <returns>Представление для генерации кода</returns>
        </member>
        <member name="P:TriadCompiler.Parser.InfProcedure.Statement.InfCase.CaseConditionStartKeys">
            <summary>
            Стартовые символы  условия в операторе case
            </summary>
        </member>
        <member name="T:TriadCompiler.Parser.Common.Function.FunctionInvoke">
            <summary>
            Разбор вызова функции
            </summary>
        </member>
        <member name="M:TriadCompiler.Parser.Common.Function.FunctionInvoke.Parse(TriadCompiler.EndKeyList)">
            <summary>
            Разбор вызова фунцкии
            </summary>
            <syntax>Identificator ParameterList</syntax>
            <param name="endKeys">Множество допустимых конечных символов</param>
            <returns>Представление для генерации кода</returns>
        </member>
        <member name="M:TriadCompiler.Parser.Common.Function.FunctionInvoke.ParameterList(TriadCompiler.EndKeyList,TriadCompiler.ParameterList{TriadCompiler.IExprType},TriadCompiler.Key,TriadCompiler.Key)">
            <summary>
            Разбор списка параметров вызова функции
            </summary>
            <syntax>( {Expression} )</syntax>
            <param name="endKeys">Множество допустимых конечных символов</param>
            <param name="type">Тип функции</param>
            <param name="openPar">Символ открывающейся скобки</param>
            <param name="closePar">Символ закрывающейся скобки</param>
            <returns>Список выражений, представляющих параметры</returns>
        </member>
        <member name="M:TriadCompiler.Parser.Common.Function.FunctionInvoke.CheckParameterType(System.Collections.Generic.IEnumerator{TriadCompiler.IExprType},TriadCompiler.IExprType)">
            <summary>
            Проверить параметр
            </summary>
            <param name="paramEnumerator">Счетчик типов параметров</param>
            <param name="varType">Фактический тип</param>
        </member>
        <member name="T:TriadCompiler.IConditionCodeBuilder">
            <summary>
            Строитель кода условий моделирования
            </summary>
        </member>
        <member name="F:TriadCompiler.IConditionCodeBuilder.doCheckMethod">
            <summary>
            Метод, проверяющий условия окончания моделирования
            </summary>
        </member>
        <member name="M:TriadCompiler.IConditionCodeBuilder.#ctor">
            <summary>
            Конструктор
            </summary>
        </member>
        <member name="M:TriadCompiler.IConditionCodeBuilder.CreateDoCheckMethod">
            <summary>
            Создать метод, проверяющий условия окончания моделирования
            </summary>
        </member>
        <member name="M:TriadCompiler.IConditionCodeBuilder.SetDoCheckMethod(System.CodeDom.CodeStatementCollection)">
            <summary>
            Задать операторы в методе, проверяющем условие окончания моделирования
            </summary>
            <param name="statList">Список операторов</param>
        </member>
        <member name="M:TriadCompiler.IConditionCodeBuilder.Reload">
            <summary>
            Перезагрузить строитель кода
            </summary>
        </member>
        <member name="T:TriadCompiler.TestErrorReg">
            <summary>
            Класс для сравнения зарегистрированных ошибок с ожидаемыми
            </summary>
        </member>
        <member name="M:TriadCompiler.TestErrorReg.Register(System.UInt32)">
            <summary>
            Регистрация ошибки
            </summary>
            <param name="errCode">Код ошибки</param>
        </member>
        <member name="M:TriadCompiler.TestErrorReg.Register(System.UInt32,System.String)">
            <summary>
            Регистрация ошибки
            </summary>
            <param name="errCode">Код ошибки</param>
            <param name="additionalText">Дополнительный текст</param>
        </member>
        <member name="M:TriadCompiler.TestErrorReg.Register(System.UInt32,System.Collections.Generic.List{TriadCompiler.Key})">
            <summary>
            Регистрация ошибки, связанной с неожиданным символом
            </summary>
            <param name="errCode">Код ошибки</param>
            <param name="allowedEndKeys">Допустимые конечные символы</param>
        </member>
        <member name="T:TriadCompiler.IOTest">
            <summary>
            Для тестирования
            </summary>
        </member>
        <member name="M:TriadCompiler.IOTest.#ctor(TriadCompiler.Input,TriadCompiler.Output)">
            <summary>
            Конструктор
            </summary>
            <param name="input">Класс, который отвечает за чтение информации</param>
            <param name="output">Отвечает за печать листинга</param>
        </member>
        <member name="M:TriadCompiler.IOTest.SetNextString">
            <summary>
            Начать считывать символы со следующей строки.
            Следующим считанным символом станет пробел.
            </summary>
        </member>
        <member name="M:TriadCompiler.IOTest.GetCh">
            <summary>
            Посимвольный ввод
            </summary>
            <returns>Прочитанный символ</returns>
        </member>
        <member name="M:TriadCompiler.IOTest.TestError(System.UInt32)">
            <summary>
            Протестировать ошибку (проверить ожидаема ли она)
            </summary>
            <param name="errorCode">Код ошибки</param>
        </member>
        <member name="F:TriadCompiler.IOTest.recognizedErrorCodeList">
            <summary>
            Таблица уже распознанных целых чисел (нужна для оптимизации)
            </summary>
        </member>
        <member name="T:TriadCompiler.Parser.Common.Polus.PolusInfo">
            <summary>
            Информация о полюсе-переменной
            </summary>
        </member>
        <member name="F:TriadCompiler.Parser.Common.Polus.PolusInfo.Type">
            <summary>
            Тип полюса
            </summary>
        </member>
        <member name="F:TriadCompiler.Parser.Common.Polus.PolusInfo.CoreNameCode">
            <summary>
            Представление в коде
            </summary>
        </member>
        <member name="T:TriadCompiler.IntegerValue">
            <summary>
            Дочерний класс, предназначенный для хранения целых значений.
            </summary>
        </member>
        <member name="M:TriadCompiler.IntegerValue.#ctor(System.Int32)">
            <summary>
            Конструктор
            </summary>
            <param name="value"> Значение </param>
        </member>
        <member name="M:TriadCompiler.IntegerValue.CalculateWith(TriadCompiler.Key)">
            <summary>
            Произвести вычисления
            </summary>
            <param name="operation"> Код унарной операции </param>
            <returns> Результат </returns>
        </member>
        <member name="M:TriadCompiler.IntegerValue.CalculateWith(TriadCompiler.Key,TriadCompiler.ConstValue)">
            <summary> 
            Произвести вычисления
            </summary>
            <param name="operation"> Код бинарной операции </param>
            <param name="operand"> Второй операнд </param>
            <returns> Результат </returns>
        </member>
        <member name="P:TriadCompiler.IntegerValue.Value">
            <summary> 
            Получить текущее значение
            </summary>
            <returns> Текущее значение </returns>
        </member>
        <member name="T:TriadCompiler.Key">
            <summary>
            Коды лексем. Численные значения у некоторых элементов указаны явно,
            так как такие же коды имеют ошибки вида "Должен идти символ..." 
            </summary>
        </member>
        <member name="F:TriadCompiler.Key.Identificator">
            <summary>
            Идентфикатор
            </summary>
        </member>
        <member name="F:TriadCompiler.Key.Star">
            <summary>
            Умножение
            </summary>
        </member>
        <member name="F:TriadCompiler.Key.Slash">
            <summary>
            Деление
            </summary>
        </member>
        <member name="F:TriadCompiler.Key.Equal">
            <summary>
            Равенство
            </summary>
        </member>
        <member name="F:TriadCompiler.Key.Comma">
            <summary>
            Запятая
            </summary>
        </member>
        <member name="F:TriadCompiler.Key.Semicolon">
            <summary>
            Точка с запятой
            </summary>
        </member>
        <member name="F:TriadCompiler.Key.Colon">
            <summary>
            Двоеточие
            </summary>
        </member>
        <member name="F:TriadCompiler.Key.Point">
            <summary>
            Точка
            </summary>
        </member>
        <member name="F:TriadCompiler.Key.Power">
            <summary>
            Возведение в степень
            </summary>
        </member>
        <member name="F:TriadCompiler.Key.LeftPar">
            <summary>
            Открывающаяся скобка
            </summary>
        </member>
        <member name="F:TriadCompiler.Key.RightPar">
            <summary>
            Закрывающаяся скобка
            </summary>
        </member>
        <member name="F:TriadCompiler.Key.LeftBracket">
            <summary>
            Открывающаяся квадратная скобка
            </summary>
        </member>
        <member name="F:TriadCompiler.Key.RightBracket">
            <summary>
            Закрывающаяся квадратная скобка
            </summary>
        </member>
        <member name="F:TriadCompiler.Key.Later">
            <summary>
            Меньше
            </summary>
        </member>
        <member name="F:TriadCompiler.Key.Greater">
            <summary>
            Больше
            </summary> 
        </member>
        <member name="F:TriadCompiler.Key.LaterEqual">
            <summary>
            Меньше или равно
            </summary>
        </member>
        <member name="F:TriadCompiler.Key.GreaterEqual">
            <summary>
            Больше или равно
            </summary>
        </member>
        <member name="F:TriadCompiler.Key.NotEqual">
            <summary>
            Не равно
            </summary>
        </member>
        <member name="F:TriadCompiler.Key.Plus">
            <summary>
            Плюс
            </summary>
        </member>
        <member name="F:TriadCompiler.Key.Minus">
            <summary>
            Минус
            </summary>
        </member>
        <member name="F:TriadCompiler.Key.Not">
            <summary>
            Отрицание
            </summary>
        </member>
        <member name="F:TriadCompiler.Key.Or">
            <summary>
            Или
            </summary>
        </member>
        <member name="F:TriadCompiler.Key.And">
            <summary>
            И
            </summary>
        </member>
        <member name="F:TriadCompiler.Key.Assign">
            <summary>
            Присваивание
            </summary>
        </member>
        <member name="F:TriadCompiler.Key.Connection">
            <summary>
            Графическое обозначение дуги
            </summary>
        </member>
        <member name="F:TriadCompiler.Key.StringValue">
            <summary>
            Строка
            </summary>
        </member>
        <member name="F:TriadCompiler.Key.LeftFigurePar">
            <summary>
            Левая фигурная скобка
            </summary>
        </member>
        <member name="F:TriadCompiler.Key.RightFigurePar">
            <summary>
            Правая фигурная скобка
            </summary>
        </member>
        <member name="F:TriadCompiler.Key.ResidueOfDivision">
            <summary>
            Остаток от деления
            </summary>
        </member>
        <member name="F:TriadCompiler.Key.IntegerValue">
            <summary>
            Целое число
            </summary>
        </member>
        <member name="F:TriadCompiler.Key.BooleanValue">
            <summary>
            Логическая константа (true или false)
            </summary>
        </member>
        <member name="F:TriadCompiler.Key.RealValue">
            <summary>
            Вещественное число
            </summary>
        </member>
        <member name="F:TriadCompiler.Key.CharValue">
            <summary>
            Символ (буква)
            </summary>
        </member>
        <member name="F:TriadCompiler.Key.BitStringValue">
            <summary>
            Строка бит 
            </summary>
        </member>
        <member name="F:TriadCompiler.Key.EndOfFile">
            <summary>
            Код конца файла 
            </summary>
        </member>
        <member name="F:TriadCompiler.Key.Routine">
            <summary>
            Начало рутины
            </summary>
        </member>
        <member name="F:TriadCompiler.Key.EndRoutine">
            <summary>
            Конец рутины
            </summary>
        </member>
        <member name="F:TriadCompiler.Key.In">
            <summary>
            Указание времени
            </summary>
        </member>
        <member name="F:TriadCompiler.Key.Initial">
            <summary>
            Начало секции initialSet
            </summary>
        </member>
        <member name="F:TriadCompiler.Key.EndInitial">
            <summary>
            Конец секции initialSet
            </summary>
        </member>
        <member name="F:TriadCompiler.Key.Event">
            <summary>
            Начало секции событие
            </summary>
        </member>
        <member name="F:TriadCompiler.Key.EndEvent">
            <summary>
            Конец секции событие
            </summary>
        </member>
        <member name="F:TriadCompiler.Key.Then">
            <summary>
            Конец условия в операторе if
            </summary>
        </member>
        <member name="F:TriadCompiler.Key.Do">
            <summary>
            Начало секции итераций оператора цикла
            </summary>
        </member>
        <member name="F:TriadCompiler.Key.EndWhile">
            <summary>
            Коней цикла while
            </summary>
        </member>
        <member name="F:TriadCompiler.Key.EndFor">
            <summary>
            Конец цикла for
            </summary>
        </member>
        <member name="F:TriadCompiler.Key.To">
            <summary>
            Направление возрастания в цикле for
            </summary>
        </member>
        <member name="F:TriadCompiler.Key.EndCase">
            <summary>
            Конец оператора case
            </summary>
        </member>
        <member name="F:TriadCompiler.Key.Of">
            <summary>
            Спецификация базового типа
            </summary>
        </member>
        <member name="F:TriadCompiler.Key.By">
            <summary>
            Шаг в цикле for
            </summary>
        </member>
        <member name="F:TriadCompiler.Key.EndIf">
            <summary>
            Конец условного оператора if
            </summary>
        </member>
        <member name="F:TriadCompiler.Key.Through">
            <summary>
            Указание выходов в операторе посылки сообщений
            </summary>
        </member>
        <member name="F:TriadCompiler.Key.EndStructure">
            <summary>
            Конец объявления структуры
            </summary>
        </member>
        <member name="F:TriadCompiler.Key.Define">
            <summary>
            Начало тела структуры
            </summary>
        </member>
        <member name="F:TriadCompiler.Key.Be">
            <summary>
            Указание типа создаваемой модельной переменной
            </summary>
        </member>
        <member name="F:TriadCompiler.Key.From">
            <summary>
            Указание имени файла
            </summary>
        </member>
        <member name="F:TriadCompiler.Key.EndModel">
            <summary>
            Конец описания модели
            </summary>
        </member>
        <member name="F:TriadCompiler.Key.On">
            <summary>
            Указание объекта наложения
            </summary>
        </member>
        <member name="F:TriadCompiler.Key.EndInf">
            <summary>
            Конец информационной процедуры
            </summary>
        </member>
        <member name="F:TriadCompiler.Key.EndCond">
            <summary>
            Конец описания условий моделирования
            </summary>
        </member>
        <member name="F:TriadCompiler.Key.EndHandling">
            <summary>
            Конец секции обработки информационной процедуры
            </summary>
        </member>
        <member name="F:TriadCompiler.Key.EndProcessing">
            <summary>
            Конец секции заключительной обработки информационной процедуры
            </summary>
        </member>
        <member name="F:TriadCompiler.Key.EndDesign">
            <summary>
            Конец design
            </summary>
        </member>
        <member name="F:TriadCompiler.Key.DownTo">
            <summary>
            Направление убывания в цикле for
            </summary>
        </member>
        <member name="F:TriadCompiler.Key.Array">
            <summary>
            Массив
            </summary>
        </member>
        <member name="F:TriadCompiler.Key.Available">
            <summary>
            Разблокирование входных полюсов
            </summary>
        </member>
        <member name="F:TriadCompiler.Key.Boolean">
            <summary>
            Логический тип
            </summary>
        </member>
        <member name="F:TriadCompiler.Key.Bit">
            <summary>
            Битовая строка
            </summary>
        </member>
        <member name="F:TriadCompiler.Key.Break">
            <summary>
            Оператор break в операторе выбора
            </summary>
        </member>
        <member name="F:TriadCompiler.Key.Cancel">
            <summary>
            Отмена событий
            </summary>
        </member>
        <member name="F:TriadCompiler.Key.Case">
            <summary>
            Оператор case
            </summary>
        </member>
        <member name="F:TriadCompiler.Key.Char">
            <summary>
            Символьный тип
            </summary>
        </member>
        <member name="F:TriadCompiler.Key.Else">
            <summary>
            Начало вспомогательной ветви операторов в if
            </summary>
        </member>
        <member name="F:TriadCompiler.Key.For">
            <summary>
            Начало цикла for
            </summary>
        </member>
        <member name="F:TriadCompiler.Key.If">
            <summary>
            Начало оператора if
            </summary>
        </member>
        <member name="F:TriadCompiler.Key.Input">
            <summary>
            Входной тип полюса
            </summary>
        </member>
        <member name="F:TriadCompiler.Key.Output">
            <summary>
            Выходной тип полюса
            </summary>
        </member>
        <member name="F:TriadCompiler.Key.Integer">
            <summary>
            Целочисленный тип
            </summary>
        </member>
        <member name="F:TriadCompiler.Key.Interlock">
            <summary>
            Блокирование выходных полюсов
            </summary>
        </member>
        <member name="F:TriadCompiler.Key.Notype">
            <summary>
            Неопределеный тип
            </summary>
        </member>
        <member name="F:TriadCompiler.Key.Out">
            <summary>
            Оператор посылки сообщений
            </summary>
        </member>
        <member name="F:TriadCompiler.Key.Real">
            <summary>
            Вещественный тип
            </summary>
        </member>
        <member name="F:TriadCompiler.Key.Shedule">
            <summary>
            Оператор планирования событий
            </summary>
        </member>
        <member name="F:TriadCompiler.Key.String">
            <summary>
            Строковый тип
            </summary>
        </member>
        <member name="F:TriadCompiler.Key.While">
            <summary>
            Начало оператора while
            </summary>
        </member>
        <member name="F:TriadCompiler.Key.Print">
            <summary>
            Отладочная печать
            </summary>
        </member>
        <member name="F:TriadCompiler.Key.Structure">
            <summary>
            Начало объявления структуры
            </summary>
        </member>
        <member name="F:TriadCompiler.Key.Node">
            <summary>
            Объявление вершины
            </summary>
        </member>
        <member name="F:TriadCompiler.Key.Polus">
            <summary>
            Объявление полюса
            </summary>
        </member>
        <member name="F:TriadCompiler.Key.InOut">
            <summary>
            Универсальный полюс
            </summary>
        </member>
        <member name="F:TriadCompiler.Key.Arc">
            <summary>
            Объявление дуги
            </summary>
        </member>
        <member name="F:TriadCompiler.Key.Edge">
            <summary>
            Объявление ребра
            </summary>
        </member>
        <member name="F:TriadCompiler.Key.UndirectCycle">
            <summary>
            Граф - ненаправленное кольцо
            </summary>
        </member>
        <member name="F:TriadCompiler.Key.DirectCycle">
            <summary>
            Граф - направленное кольцо
            </summary>
        </member>
        <member name="F:TriadCompiler.Key.UndirectPath">
            <summary>
            Граф - ненаправленная цепочка
            </summary>
        </member>
        <member name="F:TriadCompiler.Key.DirectPath">
            <summary>
            Граф - направленная цепочка
            </summary>
        </member>
        <member name="F:TriadCompiler.Key.UndirectStar">
            <summary>
            Граф - ненаправленная звезда
            </summary>
        </member>
        <member name="F:TriadCompiler.Key.DirectStar">
            <summary>
            Граф - направленная звезда
            </summary>
        </member>
        <member name="F:TriadCompiler.Key.Include">
            <summary>
            Секция Include
            </summary>
        </member>
        <member name="F:TriadCompiler.Key.Model">
            <summary>
            Модель
            </summary>
        </member>
        <member name="F:TriadCompiler.Key.IProcedure">
            <summary>
            Информационная процедура
            </summary>
        </member>
        <member name="F:TriadCompiler.Key.SimCondition">
            <summary>
            Условия моделирования
            </summary>
        </member>
        <member name="F:TriadCompiler.Key.Design">
            <summary>
            Дизайн
            </summary>
        </member>
        <member name="F:TriadCompiler.Key.Let">
            <summary>
            Конструктор модельной переменной
            </summary>
        </member>
        <member name="F:TriadCompiler.Key.Simulate">
            <summary>
            Оператор начала моделирования
            </summary>
        </member>
        <member name="F:TriadCompiler.Key.Put">
            <summary>
            Оператор наложения
            </summary>
        </member>
        <member name="F:TriadCompiler.Key.Handling">
            <summary>
            Начало секции обработки информационной процедуры
            </summary>
        </member>
        <member name="F:TriadCompiler.Key.Processing">
            <summary>
            Начало секции заключительной обработки информационной процедуры
            </summary>
        </member>
        <member name="F:TriadCompiler.Key.Passive">
            <summary>
            Пассивная переменная
            </summary>
        </member>
        <member name="F:TriadCompiler.Key.Eor">
            <summary>
            Оператор окончания моделирования
            </summary>
        </member>
        <member name="F:TriadCompiler.Key.Set">
            <summary>
            Объявление множества
            </summary>
        </member>
        <member name="F:TriadCompiler.Key.Foreach">
            <summary>
            Оператор перебора элементов мн-ва
            </summary>
        </member>
        <member name="F:TriadCompiler.Key.Nil">
            <summary>
            Пустой символ
            </summary>
        </member>
        <member name="F:TriadCompiler.Key.Graph">
            <summary>
            объявление графа
            </summary>
        </member>
        <member name="T:TriadCompiler.KeyIdentificatorContainer">
            <summary>
            Контейнер ключевых идентификаторов
            </summary>
        </member>
        <member name="M:TriadCompiler.KeyIdentificatorContainer.#cctor">
            <summary>
            Конструктор
            </summary>
        </member>
        <member name="M:TriadCompiler.KeyIdentificatorContainer.FillKeyIdentificatorTable">
            <summary>
            Заполнить таблицу ключевых идентификаторов
            </summary>
        </member>
        <member name="M:TriadCompiler.KeyIdentificatorContainer.Contains(System.String)">
            <summary>
            Проверить, есть ли идентификатор в списке ключевых идентификаторов
            </summary>
            <param name="keyIdentificatorStringCode">Строковое значение идентификатора</param>
            <returns>True, если содержит</returns>
        </member>
        <member name="M:TriadCompiler.KeyIdentificatorContainer.GetKeyIdentificator(System.String)">
            <summary>
            Получить код ключевого идентфикатора
            </summary>
            <param name="keyIdentificatorStringCode">Строковое значение идентификатора</param>
            <returns>Код ключевого идентификатора</returns>
        </member>
        <member name="M:TriadCompiler.KeyIdentificatorContainer.TransformIdentificatorStringCode(System.String)">
            <summary>
            Преобразование, используемое для всех идентификаторов
            </summary>
            <param name="identificatorStringCode">Строковое значение идентификатора</param>
            <returns>Приведенное строковое значение идентификатора</returns>
        </member>
        <member name="F:TriadCompiler.KeyIdentificatorContainer.keyIdentificatorTable">
            <summary>
            Таблица ключевых идентификаторов
            </summary>
        </member>
        <member name="T:TriadCompiler.PolusType">
            <summary>
            Тип стандартных полюсов.
            </summary>
        </member>
        <member name="M:TriadCompiler.PolusType.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Конструктор
            </summary>
            <param name="isInput">Признак того, что тип полюса Input</param>
            <param name="isOutput">Признак того, что тип полюса Output</param>
        </member>
        <member name="M:TriadCompiler.PolusType.#ctor(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Конструктор
            </summary>
            <param name="isInput">Признак того, что тип полюса Input</param>
            <param name="isOutput">Признак того, что тип полюса Output</param>
            <param name="isSpyObject">Признак spy-объекта</param>
        </member>
        <member name="F:TriadCompiler.PolusType.polusName">
            <summary>
            Имя полюса
            </summary>
        </member>
        <member name="F:TriadCompiler.PolusType.isInput">
            <summary>
            Признак входного полюса
            </summary>
        </member>
        <member name="F:TriadCompiler.PolusType.isOutput">
            <summary>
            Признак выходного полюса
            </summary>
        </member>
        <member name="F:TriadCompiler.PolusType.isSpyObject">
            <summary>
            Признак spy-объекта
            </summary>
        </member>
        <member name="P:TriadCompiler.PolusType.IsInput">
            <summary>
            Проверка того, что тип полюса - Input
            </summary>
        </member>
        <member name="P:TriadCompiler.PolusType.IsOutput">
            <summary>
            Проверка того, что тип полюса - Output
            </summary>
        </member>
        <member name="P:TriadCompiler.PolusType.Name">
            <summary>
            Имя полюса
            </summary>
        </member>
        <member name="P:TriadCompiler.PolusType.IsSpyObject">
            <summary>
            Признак spy-объекта
            </summary>
        </member>
        <member name="T:TriadCompiler.Err">
            <summary>
            Коды ошибок
            </summary>
        </member>
        <member name="T:TriadCompiler.Err.Lexer">
            <summary>
            Ошибки лексического разбора
            </summary>
        </member>
        <member name="F:TriadCompiler.Err.Lexer.BitStringIsTooLong">
            <summary>
            Максимальная длина строки бит
            </summary>
        </member>
        <member name="F:TriadCompiler.Err.Lexer.WrongCharFormat">
            <summary>
            Неверный формат записи символа
            </summary>
        </member>
        <member name="F:TriadCompiler.Err.Lexer.NotClosedCommentary">
            <summary>
            Незакрытый комментарий
            </summary>
        </member>
        <member name="F:TriadCompiler.Err.Lexer.NotClosedString">
            <summary>
            Незакрытая строка
            </summary>
        </member>
        <member name="F:TriadCompiler.Err.Lexer.UnknownChar">
            <summary>
            Неизвестный символ
            </summary>
        </member>
        <member name="F:TriadCompiler.Err.Lexer.WrongRealFormat">
            <summary>
            Неверный формат вещественного числа
            </summary>
        </member>
        <member name="F:TriadCompiler.Err.Lexer.WrongIntegerFormat">
            <summary>
            Неверный формат целого числа
            </summary>
        </member>
        <member name="F:TriadCompiler.Err.Lexer.NotClosedBitString">
            <summary>
            Незакрытая битовая строка
            </summary>
        </member>
        <member name="F:TriadCompiler.Err.Lexer.WrongSymbolInBitSTring">
            <summary>
            Недопустимый символ в битовой строке
            </summary>
        </member>
        <member name="F:TriadCompiler.Err.Lexer.TooLongBitString">
            <summary>
            Слишком длинная битовая строка
            </summary>
        </member>
        <member name="T:TriadCompiler.Err.Parser">
            <summary>
            Ошибки синтаксического и семантического разбора
            </summary>
        </member>
        <member name="T:TriadCompiler.Err.Parser.Type">
            <summary>
            Неверный тип
            </summary>
        </member>
        <member name="T:TriadCompiler.Err.Parser.Type.Var">
            <summary>
            Неверный тип переменной
            </summary>
        </member>
        <member name="F:TriadCompiler.Err.Parser.Type.Var.Unknown">
            <summary>
            Неизвестный тип переменной
            </summary>
        </member>
        <member name="T:TriadCompiler.Err.Parser.Type.Var.Need">
            <summary>
            Нужен другой тип
            </summary>
        </member>
        <member name="F:TriadCompiler.Err.Parser.Type.Var.Need.Integer">
            <summary>
            Должно быть целое
            </summary>
        </member>
        <member name="F:TriadCompiler.Err.Parser.Type.Var.Need.IntegerOrReal">
            <summary>
            Тип выражения должен быть целым или вещественным
            </summary>
        </member>
        <member name="F:TriadCompiler.Err.Parser.Type.Var.Need.Boolean">
            <summary>
            Необходим логический тип
            </summary>
        </member>
        <member name="F:TriadCompiler.Err.Parser.Type.Var.Need.String">
            <summary>
            Тип выражения должен быть строковым
            </summary>
        </member>
        <member name="F:TriadCompiler.Err.Parser.Type.Var.Need.BooleanOrBit">
            <summary>
            Тип выражения должен быть логическим или битовым
            </summary> 
        </member>
        <member name="T:TriadCompiler.Err.Parser.Type.Var.WrongType">
            <summary>
            Недопустимый в этом контексте тип
            </summary>
        </member>
        <member name="F:TriadCompiler.Err.Parser.Type.Var.WrongType.InSimpleExpr">
            <summary>
            Несовместимые типы в простом выражении
            </summary>
        </member>
        <member name="F:TriadCompiler.Err.Parser.Type.Var.WrongType.InAssign">
            <summary>
            Несовместимые типы в операторе assign
            </summary>
        </member>
        <member name="F:TriadCompiler.Err.Parser.Type.Var.WrongType.InPlus">
            <summary>
            Недопустимые типы в операции +
            </summary>
        </member>
        <member name="F:TriadCompiler.Err.Parser.Type.Var.WrongType.InOrAnd">
            <summary>
            Недопустимые типы в операции Or/And
            </summary>
        </member>
        <member name="F:TriadCompiler.Err.Parser.Type.Var.WrongType.InStarSlash">
            <summary>
            Недопустимые типы в операции Star/Slash
            </summary>
        </member>
        <member name="F:TriadCompiler.Err.Parser.Type.Var.WrongType.InResidueOfDivision">
            <summary>
            Недопустимые типы в операции Residue of division (остаток от деления)
            </summary>
        </member>
        <member name="F:TriadCompiler.Err.Parser.Type.Var.WrongType.InArrow">
            <summary>
            Недопустимые типы в операции ARROW
            </summary>
        </member>
        <member name="F:TriadCompiler.Err.Parser.Type.Var.WrongType.NotCompatibleDimensionArrayInAssign">
            <summary>
            Массив имеют раличные размерности
            </summary>
        </member>
        <member name="F:TriadCompiler.Err.Parser.Type.Var.WrongType.InReturn">
            <summary>
            Недопустимые типы при возврате значения функции
            </summary>
        </member>
        <member name="T:TriadCompiler.Err.Parser.Type.Polus">
            <summary>
            Неверный тип полюса
            </summary>
        </member>
        <member name="T:TriadCompiler.Err.Parser.Type.Polus.Need">
            <summary>
            Нужен другой тип полюса
            </summary>
        </member>
        <member name="F:TriadCompiler.Err.Parser.Type.Polus.Need.Output">
            <summary>
            Тип полюса должен быть Output
            </summary>
        </member>
        <member name="F:TriadCompiler.Err.Parser.Type.Polus.Need.Input">
            <summary>
            Тип полюса должен быть Input
            </summary>
        </member>
        <member name="T:TriadCompiler.Err.Parser.Value">
            <summary>
            Недопустимое значение
            </summary>
        </member>
        <member name="T:TriadCompiler.Err.Parser.Value.Need">
            <summary>
            Нужно другое значение
            </summary>
        </member>
        <member name="F:TriadCompiler.Err.Parser.Value.Need.Constant">
            <summary>
            Должна быть константа
            </summary>
        </member>
        <member name="F:TriadCompiler.Err.Parser.Value.Need.NotNegative">
            <summary>
            Выражение должно быть неотрицательным
            </summary>
        </member>
        <member name="F:TriadCompiler.Err.Parser.Value.Need.Positive">
            <summary>
            Шаг в цикле for должен быть положительным
            </summary>
        </member>
        <member name="F:TriadCompiler.Err.Parser.Value.Need.NotConstant">
            <summary>
            Значение выражения не должно быть константой
            </summary>
        </member>
        <member name="T:TriadCompiler.Err.Parser.Usage">
            <summary>
            Неверный контекст
            </summary>
        </member>
        <member name="F:TriadCompiler.Err.Parser.Usage.WrongMinusUsage">
            <summary>
            Неверное употребление знака минус
            </summary>
        </member>
        <member name="F:TriadCompiler.Err.Parser.Usage.DeclaredAgain">
            <summary>
            Объект с таким именем уже описан
            </summary>
        </member>
        <member name="F:TriadCompiler.Err.Parser.Usage.NotDeclared">
            <summary>
            Объект с таким именем не был описан
            </summary>
        </member>
        <member name="F:TriadCompiler.Err.Parser.Usage.NeedNotIndexed">
            <summary>
            Использование индексированного типа не допускается
            </summary>
        </member>
        <member name="F:TriadCompiler.Err.Parser.Usage.NeedSpyObject">
            <summary>
            Необходим spy-объект
            </summary>
        </member>
        <member name="F:TriadCompiler.Err.Parser.Usage.NeedRange">
            <summary>
            Необходимо указать диапазон объектов
            </summary>
        </member>
        <member name="F:TriadCompiler.Err.Parser.Usage.NeedNotRange">
            <summary>
            Диапазоны объектов не допустимы
            </summary>
        </member>
        <member name="F:TriadCompiler.Err.Parser.Usage.NeedNotSet">
            <summary>
            Тип-множество здесь недопустимо
            </summary>
        </member>
        <member name="F:TriadCompiler.Err.Parser.Usage.NeedIndexedOrSet">
            <summary>
            Необходим массив или мн-во
            </summary>
        </member>
        <member name="F:TriadCompiler.Err.Parser.Usage.UnableToCastType">
            <summary>
            Тип выражения не может быть приведен к указанному типу
            </summary>
        </member>
        <member name="T:TriadCompiler.Err.Parser.Usage.Polus">
            <summary>
            Неверное использование полюса
            </summary>
        </member>
        <member name="F:TriadCompiler.Err.Parser.Usage.Polus.LowIndexIsGreaterThanTopInRange">
            <summary>
            Нижняя граница диапазона превосходит верхнюю
            </summary>
        </member>
        <member name="T:TriadCompiler.Err.Parser.Usage.Event">
            <summary>
            Неверное использование событий
            </summary>
        </member>
        <member name="F:TriadCompiler.Err.Parser.Usage.Event.NotDeclared">
            <summary>
            Обращение к неописанному имени события
            </summary> 
        </member>
        <member name="F:TriadCompiler.Err.Parser.Usage.Event.DeclaredAgain">
            <summary>
            Событие с таким именем уже было описано
            </summary>
        </member>
        <member name="T:TriadCompiler.Err.Parser.Usage.DesignVar">
            <summary>
            Неверное использование design переменной
            </summary>
        </member>
        <member name="F:TriadCompiler.Err.Parser.Usage.DesignVar.NotCompatibleWithDesignType">
            <summary>
            Тип design переменной не соответствует типу design типа
            </summary>
        </member>
        <member name="F:TriadCompiler.Err.Parser.Usage.DesignVar.NotExpectedTypeCode">
            <summary>
            Неожидаемый тип design переменной
            </summary>
        </member>
        <member name="T:TriadCompiler.Err.Parser.Usage.DesignType">
            <summary>
            Модельный тип
            </summary>
        </member>
        <member name="F:TriadCompiler.Err.Parser.Usage.DesignType.NotDeclared">
            <summary>
            Модельный тип с таким именем описан не был
            </summary>
        </member>
        <member name="T:TriadCompiler.Err.Parser.Usage.IProcedure">
            <summary>
            Информационная процедура
            </summary>
        </member>
        <member name="F:TriadCompiler.Err.Parser.Usage.IProcedure.NoReturnedValue">
            <summary>
            ИП не возращается никакого значения
            </summary>
        </member>
        <member name="T:TriadCompiler.Err.Parser.Usage.ParameterList">
            <summary>
            Список параметров
            </summary>
        </member>
        <member name="F:TriadCompiler.Err.Parser.Usage.ParameterList.NotEnoughParameters">
            <summary>
            Указаны не все параметры
            </summary>
        </member>
        <member name="F:TriadCompiler.Err.Parser.Usage.ParameterList.TooManyParameters">
            <summary>
            Указаны лишние параметры
            </summary>
        </member>
        <member name="T:TriadCompiler.Err.Parser.Usage.Array">
            <summary>
            Неверное использование массива
            </summary>
        </member>
        <member name="F:TriadCompiler.Err.Parser.Usage.Array.VarIsNotArray">
            <summary>
            Переменная не является массивом
            </summary>
        </member>
        <member name="F:TriadCompiler.Err.Parser.Usage.Array.LostIndex">
            <summary>
            Указаны не все индексы
            </summary>
        </member>
        <member name="F:TriadCompiler.Err.Parser.Usage.Array.TooManyIndexes">
            <summary>
            Указаны лишние индексы
            </summary>
        </member>
        <member name="F:TriadCompiler.Err.Parser.Usage.Array.ArrayIsNotVar">
            <summary>
            Это не индексированная переменная
            </summary>
        </member>
        <member name="F:TriadCompiler.Err.Parser.Usage.Array.OutOfArrayBound">
            <summary>
            Индекс выходит за допустимые границы
            </summary>
        </member>
        <member name="T:TriadCompiler.Err.Parser.Usage.For">
            <summary>
            Неверное использование цикла for
            </summary>
        </member>
        <member name="F:TriadCompiler.Err.Parser.Usage.For.InitExprIsGreaterThanTerminal">
            <summary>
            Значение начального выражения в цикле for to больше конечного
            </summary>
        </member>
        <member name="F:TriadCompiler.Err.Parser.Usage.For.InitExprIsLowerThanTerminal">
            <summary>
            Значение начального выражения в цикле for downto меньше конечного
            </summary>
        </member>
        <member name="T:TriadCompiler.Err.Parser.Usage.Foreach">
            <summary>
            Неверное использование цикла foreach
            </summary>
        </member>
        <member name="F:TriadCompiler.Err.Parser.Usage.Foreach.IncompatibleTypes">
            <summary>
            Тип переменной-счетчика и множества/массива не совпадают
            </summary>
        </member>
        <member name="T:TriadCompiler.Err.Parser.Usage.Context">
            <summary>
            Недопустимый констект
            </summary>
        </member>
        <member name="F:TriadCompiler.Err.Parser.Usage.Context.Case">
            <summary>
            Неверный контекст Case
            </summary>
        </member>
        <member name="F:TriadCompiler.Err.Parser.Usage.Context.VarDeclaration">
            <summary>
            Недопустимый контекст объявления переменной
            </summary>
        </member>
        <member name="T:TriadCompiler.Err.Parser.WrongStartSymbol">
            <summary>
            Неверные начальные символы
            </summary>
        </member>
        <member name="F:TriadCompiler.Err.Parser.WrongStartSymbol.Routine">
            <summary>
            Рутина
            </summary>
        </member>
        <member name="F:TriadCompiler.Err.Parser.WrongStartSymbol.Type">
            <summary>
            Тип
            </summary>
        </member>
        <member name="F:TriadCompiler.Err.Parser.WrongStartSymbol.PolusDeclaration">
            <summary>
            Объявление полюса
            </summary>
        </member>
        <member name="F:TriadCompiler.Err.Parser.WrongStartSymbol.PolusDeclarationName">
            <summary>
            Имя полюса в объявлении
            </summary>
        </member>
        <member name="F:TriadCompiler.Err.Parser.WrongStartSymbol.VarDeclarationName">
            <summary>
            Имя переменной в объявлении
            </summary>
        </member>
        <member name="F:TriadCompiler.Err.Parser.WrongStartSymbol.SimpleFactor">
            <summary>
            Простой множитель
            </summary>
        </member>
        <member name="F:TriadCompiler.Err.Parser.WrongStartSymbol.Statement">
            <summary>
            Оператор
            </summary>
        </member>
        <member name="F:TriadCompiler.Err.Parser.WrongStartSymbol.EventDeclarationName">
            <summary>
            Объявление события
            </summary>
        </member>
        <member name="F:TriadCompiler.Err.Parser.WrongStartSymbol.Structure">
            <summary>
            Структура
            </summary>
        </member>
        <member name="F:TriadCompiler.Err.Parser.WrongStartSymbol.StuctVarDeclaration">
            <summary>
            Объявление структурной переменной
            </summary>
        </member>
        <member name="F:TriadCompiler.Err.Parser.WrongStartSymbol.StructFactor">
            <summary>
            Структурный множитель
            </summary>
        </member>
        <member name="F:TriadCompiler.Err.Parser.WrongStartSymbol.DesignVarDeclaration">
            <summary>
            Объявление design переменной
            </summary>
        </member>
        <member name="F:TriadCompiler.Err.Parser.WrongStartSymbol.NodeDeclaration">
            <summary>
            Объявления вершины
            </summary>
        </member>
        <member name="F:TriadCompiler.Err.Parser.WrongStartSymbol.Connection">
            <summary>
            Соединение
            </summary>
        </member>
        <member name="F:TriadCompiler.Err.Parser.WrongStartSymbol.StructConstant">
            <summary>
            Структурная константа
            </summary>
        </member>
        <member name="F:TriadCompiler.Err.Parser.WrongStartSymbol.IncludeSection">
            <summary>
            Секция include
            </summary>
        </member>
        <member name="F:TriadCompiler.Err.Parser.WrongStartSymbol.Model">
            <summary>
            Модель
            </summary>
        </member>
        <member name="F:TriadCompiler.Err.Parser.WrongStartSymbol.HeaderName">
            <summary>
            Модель
            </summary>
        </member>
        <member name="F:TriadCompiler.Err.Parser.WrongStartSymbol.FunctionParameterList">
            <summary>
            Список параметров функции
            </summary>
        </member>
        <member name="F:TriadCompiler.Err.Parser.WrongStartSymbol.IProcedure">
            <summary>
            Информационная процедура
            </summary>
        </member>
        <member name="F:TriadCompiler.Err.Parser.WrongStartSymbol.ICondition">
            <summary>
            Условия моделирования
            </summary>
        </member>
        <member name="F:TriadCompiler.Err.Parser.WrongStartSymbol.SpyObjectDeclaration">
            <summary>
            Объявление spy-объекта
            </summary>
        </member>
        <member name="F:TriadCompiler.Err.Parser.WrongStartSymbol.ObjectReference">
            <summary>
            Ссылка на объект или диапазон объектов
            </summary>
        </member>
        <member name="F:TriadCompiler.Err.Parser.WrongStartSymbol.IPCaseCondition">
            <summary>
            Условие в операторе case ИП
            </summary>
        </member>
        <member name="F:TriadCompiler.Err.Parser.WrongStartSymbol.Design">
            <summary>
            Дизайн
            </summary>
        </member>
        <member name="F:TriadCompiler.Err.Parser.WrongStartSymbol.SpyObject">
            <summary>
            Spy-объект
            </summary>
        </member>
        <member name="T:TriadCompiler.Err.Parser.WrongEndSymbol">
            <summary>
            Неверные конечные символы
            </summary>
        </member>
        <member name="F:TriadCompiler.Err.Parser.WrongEndSymbol.Type">
            <summary>
            Тип
            </summary>
        </member>
        <member name="F:TriadCompiler.Err.Parser.WrongEndSymbol.PolusDeclarationName">
            <summary>
            Имя полюса в его объявлении
            </summary>
        </member>
        <member name="F:TriadCompiler.Err.Parser.WrongEndSymbol.InitialPart">
            <summary>
            Секция инициализации
            </summary>
        </member>
        <member name="F:TriadCompiler.Err.Parser.WrongEndSymbol.Event">
            <summary>
            Событие
            </summary>
        </member>
        <member name="F:TriadCompiler.Err.Parser.WrongEndSymbol.Constant">
            <summary>
            Константа
            </summary>
        </member>
        <member name="F:TriadCompiler.Err.Parser.WrongEndSymbol.VarDeclarationName">
            <summary>
            Имя переменной в объявлении
            </summary>
        </member>
        <member name="F:TriadCompiler.Err.Parser.WrongEndSymbol.Statement">
            <summary>
            Оператор
            </summary>
        </member>
        <member name="F:TriadCompiler.Err.Parser.WrongEndSymbol.PolusVarIndex">
            <summary>
            Индекс переменной
            </summary>
        </member>
        <member name="F:TriadCompiler.Err.Parser.WrongEndSymbol.ExprInPar">
            <summary>
            Выражение в скобках
            </summary>
        </member>
        <member name="F:TriadCompiler.Err.Parser.WrongEndSymbol.Routine">
            <summary>
            Рутина
            </summary>
        </member>
        <member name="F:TriadCompiler.Err.Parser.WrongEndSymbol.EventDeclarationName">
            <summary>
            Имя события
            </summary>
        </member>
        <member name="F:TriadCompiler.Err.Parser.WrongEndSymbol.Structure">
            <summary>
            Структура
            </summary>
        </member>
        <member name="F:TriadCompiler.Err.Parser.WrongEndSymbol.NodeDeclaration">
            <summary>
            Объявление вершины
            </summary>
        </member>
        <member name="F:TriadCompiler.Err.Parser.WrongEndSymbol.DesignVarDeclaration">
            <summary>
            Объявление design переменной
            </summary>
        </member>
        <member name="F:TriadCompiler.Err.Parser.WrongEndSymbol.SingleHeader">
            <summary>
            Одиночный заголовок
            </summary>
        </member>
        <member name="F:TriadCompiler.Err.Parser.WrongEndSymbol.StructConstant">
            <summary>
            Структурная константа
            </summary>
        </member>
        <member name="F:TriadCompiler.Err.Parser.WrongEndSymbol.Connection">
            <summary>
            Соединение
            </summary>
        </member>
        <member name="F:TriadCompiler.Err.Parser.WrongEndSymbol.IncludeSection">
            <summary>
            Секция include
            </summary>
        </member>
        <member name="F:TriadCompiler.Err.Parser.WrongEndSymbol.Model">
            <summary>
            Модель
            </summary>
        </member>
        <member name="F:TriadCompiler.Err.Parser.WrongEndSymbol.HeaderName">
            <summary>
            Имя модели
            </summary>
        </member>
        <member name="F:TriadCompiler.Err.Parser.WrongEndSymbol.FunctionParameterList">
            <summary>
            Список параметров функции
            </summary>
        </member>
        <member name="F:TriadCompiler.Err.Parser.WrongEndSymbol.Handling">
            <summary>
            Секция обработки информационной процедуры
            </summary>
        </member>
        <member name="F:TriadCompiler.Err.Parser.WrongEndSymbol.Processing">
            <summary>
            Секция заключительной обработки информационной процедуры
            </summary>
        </member>
        <member name="F:TriadCompiler.Err.Parser.WrongEndSymbol.IProcedure">
            <summary>
            Информационная процедура
            </summary>
        </member>
        <member name="F:TriadCompiler.Err.Parser.WrongEndSymbol.ICondition">
            <summary>
            Условия моделирования
            </summary>
        </member>
        <member name="F:TriadCompiler.Err.Parser.WrongEndSymbol.ObjectReference">
            <summary>
            Ссылка на объект или диапазон объектов
            </summary>
        </member>
        <member name="F:TriadCompiler.Err.Parser.WrongEndSymbol.Design">
            <summary>
            Дизайн
            </summary>
        </member>
        <member name="F:TriadCompiler.Err.Parser.WrongEndSymbol.ConstantSet">
            <summary>
            Константное множество
            </summary>
        </member>
        <member name="F:TriadCompiler.Err.Generator.InvalidFileName">
            <summary>
            Неверное имя файла
            </summary>
        </member>
        <member name="F:TriadCompiler.Err.Generator.Compilation">
            <summary>
            Ошибка компиляции
            </summary>
        </member>
        <member name="T:TriadCompiler.Parser.Structure.StructExpr.StructExpression">
            <summary>
            Разбор струтурных выражений
            </summary>
        </member>
        <member name="M:TriadCompiler.Parser.Structure.StructExpr.StructExpression.Parse(TriadCompiler.EndKeyList)">
            <summary>
            Структурное выражение
            </summary>
            <param name="endKeys">Множество конечных символов</param>
            <syntax>StructAddend {StructAdd StructAddend }</syntax>
            <returns></returns>
        </member>
        <member name="M:TriadCompiler.Parser.Structure.StructExpr.StructExpression.ExpressionCode(TriadCompiler.Key)">
            <summary>
            Сгенерировать код для структурного выражения
            </summary>
            <param name="operation">Выполняемая операция</param>
            <returns>Сгенерированный код</returns>
        </member>
        <member name="T:TriadCompiler.Parser.InfProcedure.Header.InfOutSection">
            <summary>
            Разбор секции out-переменных
            </summary>
        </member>
        <member name="M:TriadCompiler.Parser.InfProcedure.Header.InfOutSection.Parse(TriadCompiler.EndKeyList)">
            <summary>
            Разбор секции out-переменных
            </summary>
            <syntax> SingleOutSection # SingleOutSection #</syntax>
            <param name="endKeys">Допустимые конечные символы</param>
            <returns>Список типов переменных</returns>
        </member>
        <member name="M:TriadCompiler.Parser.InfProcedure.Header.InfOutSection.SingleOutSection(TriadCompiler.EndKeyList)">
            <summary>
            Разбор одной секции
            </summary>
            <syntax>{ VarDeclaration #,VarDeclaration# }</syntax>
            <param name="endKeys">Допустимые конечные символы</param>
            <returns>Список типов переменных</returns>
        </member>
        <member name="T:TriadCompiler.StringSymbol">
            <summary>
            Информация о строковой константе.
            </summary>
            <syntax>Значение поля indexStringCode всегда StringValue</syntax>
        </member>
        <member name="M:TriadCompiler.StringSymbol.#ctor">
            <summary>
            Конструктор
            </summary>
        </member>
        <member name="M:TriadCompiler.StringSymbol.#ctor(System.String)">
            <summary>
            Конструктор
            </summary>
            <param name="value">Значение</param>
        </member>
        <member name="P:TriadCompiler.StringSymbol.Code">
            <summary>
            Код символа
            </summary>
            <Name>Code</Name>
        </member>
        <member name="P:TriadCompiler.StringSymbol.Value">
            <summary>
            Строковое значение символа 
            </summary>
        </member>
        <member name="T:TriadCompiler.PolusArrayType">
            <summary>
            Тип индексированного полюса
            </summary>
        </member>
        <member name="M:TriadCompiler.PolusArrayType.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Конструктор
            </summary>
            <param name="isInput">Признак того, что тип полюса Input</param>
            <param name="isOutput">Признак того, что тип полюса Output</param>
        </member>
        <member name="F:TriadCompiler.PolusArrayType.polusName">
            <summary>
            Имя полюса
            </summary>
        </member>
        <member name="F:TriadCompiler.PolusArrayType.isInput">
            <summary>
            Признак входного полюса
            </summary>
        </member>
        <member name="F:TriadCompiler.PolusArrayType.isOutput">
            <summary>
            Признак выходного полюса
            </summary>
        </member>
        <member name="F:TriadCompiler.PolusArrayType.isSpyObject">
            <summary>
            Признак spy-объекта
            </summary>
        </member>
        <member name="P:TriadCompiler.PolusArrayType.IsInput">
            <summary>
            Проверка того, что тип полюса - Input
            </summary>
        </member>
        <member name="P:TriadCompiler.PolusArrayType.IsOutput">
            <summary>
            Проверка того, что тип полюса - Output
            </summary>
        </member>
        <member name="P:TriadCompiler.PolusArrayType.Name">
            <summary>
            Имя полюса
            </summary>
        </member>
        <member name="P:TriadCompiler.PolusArrayType.IsSpyObject">
            <summary>
            Признак spy-объекта
            </summary>
        </member>
        <member name="T:TriadCompiler.DesignTypeType">
            <summary>
            Тип типа переменнной
            </summary>
        </member>
        <member name="M:TriadCompiler.DesignTypeType.#ctor(System.String,TriadCompiler.DesignTypeCode)">
            <summary>
            Конструктор
            </summary>
            <param name="typeName">Имя типа</param>
            <param name="typeCode">Код типа</param>
        </member>
        <member name="F:TriadCompiler.DesignTypeType.typeName">
            <summary>
            Имя дизайн-типа
            </summary>
        </member>
        <member name="F:TriadCompiler.DesignTypeType.typeCode">
            <summary>
            Код типа
            </summary>
        </member>
        <member name="P:TriadCompiler.DesignTypeType.Name">
            <summary>
            Имя
            </summary>
        </member>
        <member name="P:TriadCompiler.DesignTypeType.Code">
            <summary>
            Код типа
            </summary>
        </member>
        <member name="T:TriadCompiler.Parser.Common.Statement.Print">
            <summary>
            Разбор оператора отладочной печати
            </summary>
        </member>
        <member name="M:TriadCompiler.Parser.Common.Statement.Print.Parse(TriadCompiler.EndKeyList)">
            <summary>
            Оператор отладочной печати
            </summary>
            <syntax>WriteLine Expression</syntax>
            <param name="endKeys">Множество конечных символов</param>
            <returns>Представление для генерации кода</returns>  
        </member>
        <member name="T:TriadCompiler.Parser.Common.Statement.ForCicle">
            <summary>
            Разбор цикла со счетчиком
            </summary>
        </member>
        <member name="M:TriadCompiler.Parser.Common.Statement.ForCicle.Parse(TriadCompiler.EndKeyList,TriadCompiler.Parser.Common.Statement.StatementContext)">
            <summary>
            Цикл со счетчиком
            </summary>
            <syntax>For Variable := Expression [ By Expression ] To Expression Do StatementList EndFor</syntax>
            <param name="endKeys">Множество конечных символов</param>
            <param name="context">Текущий контекст</param>
            <returns>Представление для генерации кода</returns>
        </member>
        <member name="T:TriadCompiler.Parser.Common.Header.HeaderName">
            <summary>
            Имя объекта в заголовке
            </summary>
        </member>
        <member name="M:TriadCompiler.Parser.Common.Header.HeaderName.Parse(TriadCompiler.EndKeyList,TriadCompiler.Parser.Common.Header.HeaderName.RegisterTypeFunction)">
            <summary>
            Разобрать имя объекта в заголовке
            </summary>
            <syntax>Identificator</syntax>
            <param name="endKeys">Множество допустимых конечных символов</param>
            <param name="registerType">Функция, регистрирующая тип</param>
            <returns>Разобранное имя</returns>
        </member>
        <member name="T:TriadCompiler.Parser.Common.Header.HeaderName.RegisterTypeFunction">
            <summary>
            Функция, регистрирующая тип
            </summary>
            <param name="headerName">Имя в заголовке</param>
        </member>
        <member name="T:TriadCompiler.Code.Generator.DllGenerator">
            <summary>
            Генератор сборок
            </summary>
        </member>
        <member name="M:TriadCompiler.Code.Generator.DllGenerator.#ctor">
            <summary>
            Конструктор
            </summary>
        </member>
        <member name="M:TriadCompiler.Code.Generator.DllGenerator.AddReference(System.String)">
            <summary>
            Добавить ссылку на другую сборку
            </summary>
            <param name="fileName">Имя сборки</param>
        </member>
        <member name="M:TriadCompiler.Code.Generator.DllGenerator.Reload">
            <summary>
            Подготовить генератор кода к новой компиляции
            </summary>
        </member>
        <member name="M:TriadCompiler.Code.Generator.DllGenerator.GenerateCode(System.String)">
            <summary>
            Создать сборку (dll)
            </summary>
            <param name="fileName">Имя сборки</param>
        </member>
        <member name="F:TriadCompiler.Code.Generator.DllGenerator.csCodeProvider">
            <summary>
            Компилятор
            </summary>
        </member>
        <member name="F:TriadCompiler.Code.Generator.DllGenerator.referenceAssembliesList">
            <summary>
            Сборки, на которые нужно установить ссылки
            </summary>
        </member>
        <member name="T:TriadCompiler.Parser.Structure.StructExpr.Fact.FactorKeySet">
            <summary>
            Множества символов, связанные со структурным множителем
            </summary>
        </member>
        <member name="T:TriadCompiler.Parser.Structure.StructExpr.Fact.FactorKeySet.Start">
            <summary>
            Множество стартовых символов
            </summary>
        </member>
        <member name="F:TriadCompiler.Parser.Structure.StructExpr.Fact.FactorKeySet.Start.structFactorSet">
            <summary>
            Множество стартовых символов структурного множителя
            </summary>
        </member>
        <member name="P:TriadCompiler.Parser.Structure.StructExpr.Fact.FactorKeySet.Start.Factor">
            <summary>
            Стартовые символы структурного множителя
            </summary>
        </member>
        <member name="T:TriadCompiler.Parser.Structure.StructExpr.Const.Constant">
            <summary>
            Разбор графовой константы в структурном выражении
            </summary>
        </member>
        <member name="M:TriadCompiler.Parser.Structure.StructExpr.Const.Constant.Parse(TriadCompiler.EndKeyList,System.String)">
            <summary>
            Структурная константа
            </summary>
            <param name="endKeys">Множество допустимых конечных символов</param>
            <param name="createConstGraphMethosName">Название метода, создающего структурную константу</param>
            <syntax>DirectCycle | UndirectCycle | DirectPath | UndirectPath |
            DirectStar | UndirectStar ( NodeDeclarationInExpr , { NodeDeclarationInExpr } ) </syntax>
            <returns>Сгенерированный код</returns>
        </member>
        <member name="F:TriadCompiler.InfProcedureParser.startKeys">
            <summary>
            Множество стартовых символов оператора в ИП
            </summary>
        </member>
        <member name="M:TriadCompiler.InfProcedureParser.Statement(TriadCompiler.EndKeyList,TriadCompiler.Parser.Common.Statement.StatementContext)">
            <summary> 
            Оператор в информационной процедуре
            </summary>
            <param name="endKeys"> Множество конечных символов </param>
            <param name="context"> Текущий контекст </param>
            <returns> Представление для генерации кода </returns>
        </member>
        <member name="M:TriadCompiler.InfProcedureParser.Compile(TriadCompiler.EndKeyList)">
            <summary>
            Начать разбор и генерацию кода
            </summary>
            <param name="endKey">Множество допустимых конечных символов</param>
        </member>
        <member name="M:TriadCompiler.InfProcedureParser.IProcedure(TriadCompiler.EndKeyList)">
            <summary>
            Информационная процедура
            </summary>
            <syntax>InfProcedure HeaderName # IPHeader # # InitialPart # 
            # ProcessingPart # # EventPart # EndInf</syntax>
            <param name="endKey">Множество допустимых конечных символов</param>
        </member>
        <member name="M:TriadCompiler.InfProcedureParser.IPHeaderName(TriadCompiler.EndKeyList)">
            <summary>
            Разобрать имя ИП в заголовке
            </summary>
            <syntax>Identificator</syntax>
            <param name="endKeys">Множество допустимых конечных символов</param>
            <returns>Тип ИП</returns>
        </member>
        <member name="M:TriadCompiler.InfProcedureParser.InitialPart(TriadCompiler.EndKeyList)">
            <summary>
            Начальные условия
            </summary>
            <syntax>Initial StatementList EndInitial</syntax>
            <param name="endKey">Множество допустимых конечных символов</param>
        </member>
        <member name="M:TriadCompiler.InfProcedureParser.Processing(TriadCompiler.EndKeyList,TriadCompiler.IProcedureType)">
            <summary>
            Секция заключительной обработки
            </summary>
            <syntax>Processing StatementList EndP</syntax>
            <param name="endKey">Множество допустимых конечных символов</param>
            <param name="ipType">Тип ИП</param>
        </member>
        <member name="M:TriadCompiler.InfProcedureParser.Handling(TriadCompiler.EndKeyList)">
            <summary>
            Секция обработки
            </summary>
            <syntax>Handling StatementList EndH</syntax>
            <param name="endKey"></param>
        </member>
        <member name="P:TriadCompiler.InfProcedureParser.StartKeys">
            <summary>
            Стартовые символы оператора в ИП
            </summary>
        </member>
        <member name="P:TriadCompiler.InfProcedureParser.codeBuilder">
            <summary>
             Строитель кода
            </summary>
        </member>
        <member name="T:TriadCompiler.Parser.Common.Ev.EventInfo">
            <summary>
            Описание события
            </summary>
        </member>
        <member name="F:TriadCompiler.Parser.Common.Ev.EventInfo.Type">
            <summary>
            Тип полюса
            </summary>
        </member>
        <member name="F:TriadCompiler.Parser.Common.Ev.EventInfo.CoreNameCode">
            <summary>
            Представление имени в коде
            </summary>
        </member>
        <member name="F:TriadCompiler.Parser.Common.Ev.EventInfo.MethodRefCode">
            <summary>
            Представление метода, которым представлено событие
            </summary>
        </member>
        <member name="F:TriadCompiler.Parser.Common.Ev.EventInfo.StrCode">
            <summary>
            Строковое представление
            </summary>
        </member>
        <member name="T:TriadCompiler.NilValue">
            <summary>
            Вычисление выражений с nil
            </summary>
        </member>
        <member name="M:TriadCompiler.NilValue.#ctor">
            <summary>
            Конструктор
            </summary>
        </member>
        <member name="M:TriadCompiler.NilValue.CalculateWith(TriadCompiler.Key,TriadCompiler.ConstValue)">
            <summary>
            Обработать двуместную операцию
            </summary>
            <param name="operation">Операция</param>
            <param name="operand">Второй операнд</param>
            <returns>Результат</returns>
        </member>
        <member name="T:TriadCompiler.OutputConst">
            <summary>
            Константы Output
            </summary>
        </member>
        <member name="F:TriadCompiler.OutputConst.CouldNotWriteToFileMessage">
            <summary>
            Сообщение об ошибке записи в файла с листингом 
            </summary>
        </member>
        <member name="T:TriadCompiler.Output">
            <summary>
            Класс Output отвечает за операции по выводу информации.
            Данные можно выводить построчно при помощи функции PrintLine.
            </summary>
        </member>
        <member name="M:TriadCompiler.Output.PrintLine(System.String)">
            <summary>
            Вывести строчку
            </summary>
            <param name="line">Выводимая строка</param>
        </member>
        <member name="M:TriadCompiler.Output.Print(System.String)">
            <summary>
            Вывести строчку без перевода строки
            </summary>
            <param name="line">Выводимая строка</param>
        </member>
        <member name="T:TriadCompiler.OutputFile">
            <summary>
            Класс OutputFile отвечает за операции по выводу информации в файл.
            Данные можно выводить построчно при помощи функции PrintLine.
            В конструктор нужно передать имя файла, куда идет запись
            </summary>
        </member>
        <member name="M:TriadCompiler.OutputFile.#ctor(System.String)">
            <summary>
            	<para> Конструктор класса <see cref="T:TriadCompiler.OutputFile"/> .</para>
            </summary>
            <param name="fileName"> Имя читаемого файла
            </param>
        </member>
        <member name="M:TriadCompiler.OutputFile.PrintLine(System.String)">
            <summary>
            Вывести строчку
            </summary>
            <param name="line"> Выводимая строка
            </param>
            <exception cref="T:System.ArgumentNullException">
            	<para>Значение аргумента <paramref Name="line"/> равно <langword Name="null"/>.</para>
            </exception>
        </member>
        <member name="M:TriadCompiler.OutputFile.Print(System.String)">
            <summary> Вывести строчку без перевода строки
            </summary>
            <param name="line"> Выводимая строка
            </param>
            <exception cref="T:System.ArgumentNullException">
            	<para>Значение аргумента <paramref Name="line"/> равно <langword Name="null"/>.</para>
            </exception>
        </member>
        <member name="T:TriadCompiler.ConsoleOutput">
            <summary>
            Класс ConsoleOutput отвечает за операции по выводу информации на консоль.
            Данные можно выводить построчно при помощи функции PrintLine.
            В конструктор нужно передать имя файла, куда идет запись
            </summary>
        </member>
        <member name="M:TriadCompiler.ConsoleOutput.#ctor">
            <summary>
            	<para> Конструктор класса <see cref="T:TriadCompiler.ConsoleOutput"/> .</para>
            </summary>
        </member>
        <member name="M:TriadCompiler.ConsoleOutput.PrintLine(System.String)">
            <summary> Вывести строчку
            </summary>
            <param name="line"> Выводимая строка
            </param>
            <exception cref="T:System.ArgumentNullException">
            	<para>Значение аргумента <paramref Name="line"/> равно <langword Name="null"/>.</para>
            </exception>
        </member>
        <member name="M:TriadCompiler.ConsoleOutput.Print(System.String)">
            <summary> Вывести строчку без перевода строки
            </summary>
            <param name="line"> Выводимая строка
            </param>
            <exception cref="T:System.ArgumentNullException">
            	<para>Значение аргумента <paramref Name="line"/> равно <langword Name="null"/>.</para>
            </exception>
        </member>
        <member name="T:TriadCompiler.CodeBuilderMode">
            <summary>
            Режимы работы компилятора
            </summary>
        </member>
        <member name="F:TriadCompiler.CodeBuilderMode.BuildModel">
            <summary>
            Компиляция модели
            </summary>
        </member>
        <member name="F:TriadCompiler.CodeBuilderMode.BuildRoutine">
            <summary>
            Компиляция рутин
            </summary>
        </member>
        <member name="F:TriadCompiler.CodeBuilderMode.BuildStructure">
            <summary>
            Компиляция структур
            </summary>
        </member>
        <member name="F:TriadCompiler.CodeBuilderMode.BuildIProcedure">
            <summary>
            Компиляция информационных процедур
            </summary>
        </member>
        <member name="F:TriadCompiler.CodeBuilderMode.BuildICondition">
            <summary>
            Компиляция условий моделирования
            </summary>
        </member>
        <member name="F:TriadCompiler.CodeBuilderMode.BuildDesign">
            <summary>
            Компиляция дизайна
            </summary>
        </member>
        <member name="F:TriadCompiler.CodeBuilderMode.TestModel">
            <summary>
            Тестирование модели
            </summary>
        </member>
        <member name="F:TriadCompiler.CodeBuilderMode.TestRoutine">
            <summary>
            Тестирование рутин
            </summary>
        </member>
        <member name="F:TriadCompiler.CodeBuilderMode.TestStructure">
            <summary>
            Тестирование структур
            </summary>
        </member>
        <member name="F:TriadCompiler.CodeBuilderMode.TestIProcedure">
            <summary>
            Тестирование информационных процедур
            </summary>
        </member>
        <member name="F:TriadCompiler.CodeBuilderMode.TestICondition">
            <summary>
            Тестирование условий моделирования
            </summary>
        </member>
        <member name="F:TriadCompiler.CodeBuilderMode.TestDesign">
            <summary>
            Тестирование дизайна
            </summary>
        </member>
        <member name="T:TriadCompiler.Fabric">
            <summary>
            Фабрика для классов для текущего режима компиляции
            </summary>
        </member>
        <member name="M:TriadCompiler.Fabric.#ctor">
            <summary>
            Защищенный конструктор
            </summary>
        </member>
        <member name="M:TriadCompiler.Fabric.ReloadFabric(TriadCompiler.CodeBuilderMode)">
            <summary>
            Подготовить фабрику классов для новой компиляции
            </summary>
        </member>
        <member name="F:TriadCompiler.Fabric.instance">
            <summary>
            Экземпляр этого класса
            </summary>
        </member>
        <member name="F:TriadCompiler.Fabric.compileMode">
            <summary>
            Текущий режим
            </summary>
        </member>
        <member name="F:TriadCompiler.Fabric.currentIO">
            <summary>
            Текущий ввод-вывод
            </summary>
        </member>
        <member name="F:TriadCompiler.Fabric.err">
            <summary>
            Регистратор ошибок
            </summary>
        </member>
        <member name="F:TriadCompiler.Fabric.scanner">
            <summary>
            Сканер символов
            </summary>
        </member>
        <member name="F:TriadCompiler.Fabric.parser">
            <summary>
            Парсер
            </summary>
        </member>
        <member name="F:TriadCompiler.Fabric.codeBuilder">
            <summary>
            Построитель кода
            </summary>
        </member>
        <member name="F:TriadCompiler.Fabric.codeGenerator">
            <summary>
            Генератор кода
            </summary>
        </member>
        <member name="P:TriadCompiler.Fabric.Instance">
            <summary>
            Экземпляр фабрики (одиночка)
            </summary>
        </member>
        <member name="P:TriadCompiler.Fabric.IO">
            <summary>
            Текущий ввод-вывод
            </summary>
        </member>
        <member name="P:TriadCompiler.Fabric.ErrReg">
            <summary>
            Получить регистратор ошибок
            </summary>
        </member>
        <member name="P:TriadCompiler.Fabric.Scanner">
            <summary>
            Получить сканер символов
            </summary>
        </member>
        <member name="P:TriadCompiler.Fabric.Builder">
            <summary>
            Получить построитель кода
            </summary>
        </member>
        <member name="P:TriadCompiler.Fabric.Parser">
            <summary>
            Получить парсер
            </summary>
        </member>
        <member name="T:TriadCompiler.ModelCompileFabric">
            <summary>
            Фабрика классов для компиляции модели
            </summary>
        </member>
        <member name="P:TriadCompiler.ModelCompileFabric.Parser">
            <summary>
            Получить парсер
            </summary>
        </member>
        <member name="P:TriadCompiler.ModelCompileFabric.Builder">
            <summary>
            Получить построитель кода
            </summary>
        </member>
        <member name="T:TriadCompiler.StructureCompileFabric">
            <summary>
            Фабрика классов для компиляции структур
            </summary>
        </member>
        <member name="P:TriadCompiler.StructureCompileFabric.Parser">
            <summary>
            Получить парсер
            </summary>
        </member>
        <member name="P:TriadCompiler.StructureCompileFabric.Builder">
            <summary>
            Получить построитель кода
            </summary>
        </member>
        <member name="T:TriadCompiler.RoutineCompileFabric">
            <summary>
            Фабрика классов для компиляции рутин
            </summary>
        </member>
        <member name="P:TriadCompiler.RoutineCompileFabric.Parser">
            <summary>
            Получить парсер
            </summary>
        </member>
        <member name="P:TriadCompiler.RoutineCompileFabric.Builder">
            <summary>
            Получить построитель кода
            </summary>
        </member>
        <member name="T:TriadCompiler.IProcedureCompileFabric">
            <summary>
            Фабрика классов для компиляции информационных процедур
            </summary>
        </member>
        <member name="P:TriadCompiler.IProcedureCompileFabric.Parser">
            <summary>
            Получить парсер
            </summary>
        </member>
        <member name="P:TriadCompiler.IProcedureCompileFabric.Builder">
            <summary>
            Получить построитель кода
            </summary>
        </member>
        <member name="T:TriadCompiler.IConditionCompileFabric">
            <summary>
            Фабрика классов для компиляции условий моделирования
            </summary>
        </member>
        <member name="P:TriadCompiler.IConditionCompileFabric.Parser">
            <summary>
            Получить парсер
            </summary>
        </member>
        <member name="P:TriadCompiler.IConditionCompileFabric.Builder">
            <summary>
            Получить построитель кода
            </summary>
        </member>
        <member name="T:TriadCompiler.DesignCompileFabric">
            <summary>
            Фабрика классов для компиляции дизайна
            </summary>
        </member>
        <member name="P:TriadCompiler.DesignCompileFabric.Parser">
            <summary>
            Получить парсер
            </summary>
        </member>
        <member name="P:TriadCompiler.DesignCompileFabric.Builder">
            <summary>
            Получить построитель кода
            </summary>
        </member>
        <member name="T:TriadCompiler.ModelTestFabric">
            <summary>
            Фабрика классов для тестирования модели
            </summary>
        </member>
        <member name="P:TriadCompiler.ModelTestFabric.ErrReg">
            <summary>
            Получить регистратор ошибок
            </summary>
        </member>
        <member name="T:TriadCompiler.RoutineTestFabric">
            <summary>
            Фабрика классов для тестирования рутин
            </summary>
        </member>
        <member name="P:TriadCompiler.RoutineTestFabric.ErrReg">
            <summary>
            Получить регистратор ошибок
            </summary>
        </member>
        <member name="T:TriadCompiler.StructureTestFabric">
            <summary>
            Фабрика классов для тестирования структур
            </summary>
        </member>
        <member name="P:TriadCompiler.StructureTestFabric.ErrReg">
            <summary>
            Получить регистратор ошибок
            </summary>
        </member>
        <member name="T:TriadCompiler.IProcedureTestFabric">
            <summary>
            Фабрика классов для тестирования информационных процедур
            </summary>
        </member>
        <member name="P:TriadCompiler.IProcedureTestFabric.ErrReg">
            <summary>
            Получить регистратор ошибок
            </summary>
        </member>
        <member name="T:TriadCompiler.IConditionTestFabric">
            <summary>
            Фабрика классов для тестирования условий моделирования
            </summary>
        </member>
        <member name="P:TriadCompiler.IConditionTestFabric.ErrReg">
            <summary>
            Получить регистратор ошибок
            </summary>
        </member>
        <member name="T:TriadCompiler.DesignTestFabric">
            <summary>
            Фабрика классов для тестирования дизайна
            </summary>
        </member>
        <member name="P:TriadCompiler.DesignTestFabric.ErrReg">
            <summary>
            Получить регистратор ошибок
            </summary>
        </member>
        <member name="T:TriadCompiler.Code.Generator.CodeFormat">
            <summary>
            Формат результирующего кода
            </summary>
        </member>
        <member name="F:TriadCompiler.Code.Generator.CodeFormat.None">
            <summary>
            Без генерации кода
            </summary>
        </member>
        <member name="F:TriadCompiler.Code.Generator.CodeFormat.Dll">
            <summary>
            Генерация Dll
            </summary>
        </member>
        <member name="F:TriadCompiler.Code.Generator.CodeFormat.Txt">
            <summary>
            Генерация Txt
            </summary>
        </member>
        <member name="F:TriadCompiler.Code.Generator.CodeFormat.Memory">
            <summary>
            Генерация в память
            </summary>
        </member>
        <member name="T:TriadCompiler.Code.Generator.CodeFabric">
            <summary>
            Текущий генератор кода (одиночка)
            </summary>
        </member>
        <member name="M:TriadCompiler.Code.Generator.CodeFabric.#ctor">
            <summary>
            Защищенный конструктор
            </summary>
        </member>
        <member name="M:TriadCompiler.Code.Generator.CodeFabric.ReloadFabric(TriadCompiler.Code.Generator.CodeFormat)">
            <summary>
            Изменить режим работы генератора кода
            </summary>
            <param name="codeFormat"></param>
        </member>
        <member name="M:TriadCompiler.Code.Generator.CodeFabric.CreateNewInstance(TriadCompiler.Code.Generator.CodeFormat)">
            <summary>
            Создать новый экземпляр этого класса
            </summary>
            <param name="codeFormat">Формат результирующего кода</param>
        </member>
        <member name="F:TriadCompiler.Code.Generator.CodeFabric.instance">
            <summary>
            Экземпляр этого класса
            </summary>
        </member>
        <member name="F:TriadCompiler.Code.Generator.CodeFabric.generatingMode">
            <summary>
            Текущий режим
            </summary>
        </member>
        <member name="P:TriadCompiler.Code.Generator.CodeFabric.Instance">
            <summary>
            Генератор кода (одиночка)
            </summary>
        </member>
        <member name="T:TriadCompiler.Parser.Common.Var.Variable">
            <summary>
            Разбор переменной
            </summary>
        </member>
        <member name="M:TriadCompiler.Parser.Common.Var.Variable.Parse(TriadCompiler.EndKeyList,System.Boolean,System.Boolean)">
            <summary>
            Обращение к переменной
            </summary>
            <syntax>Identificator [ Expression{,Expression}]</syntax>
            <param name="endKeys">Множество конечных символов</param>
            <param name="allowRange">Допустимость диапазона</param>
            <param name="allowNotIndexedArray">Допустимость массива без индексов</param>
            <returns>Информацию о переменной</returns>
        </member>
        <member name="M:TriadCompiler.Parser.Common.Var.Variable.ParseGraphOrNode(TriadCompiler.EndKeyList)">
            <summary>
            Обращение к графу или вершине графа
            </summary>
            <param name="endKeys">Множество конечных символов</param>
            <returns>Информацию о переменной</returns>
        </member>
        <member name="T:TriadCompiler.Parser.Common.Statement.Let">
            <summary>
            Разбор оператора создания экземпляров объектов let
            </summary>
        </member>
        <member name="M:TriadCompiler.Parser.Common.Statement.Let.Parse(TriadCompiler.EndKeyList)">
            <summary>
            Конструктор модельного типа
            </summary>
            <syntax>Let Identificator ( expression {, expression} Be Identificator</syntax>
            <param name="endKeys">Множество допустимых конечных символов</param>
            <returns>Представление для генерации кода</returns>
        </member>
        <member name="T:TriadCompiler.Parser.SimCondition.Statement.Eor">
            <summary>
            Разбор оператора окончания моделирования
            </summary>
        </member>
        <member name="M:TriadCompiler.Parser.SimCondition.Statement.Eor.Parse(TriadCompiler.EndKeyList)">
            <summary>
            Разобрать оператор окончания моделирования
            </summary>
            <syntax>Eor</syntax>
            <param name="endKeys">Допустимые конечные символы</param>
            <returns>Представление оператора в коде</returns>
        </member>
        <member name="T:TriadCompiler.BooleanValue">
            <summary>
            Дочерний класс, предназначенный для хранения логических значений.
            </summary>
        </member>
        <member name="M:TriadCompiler.BooleanValue.#ctor(System.Boolean)">
            <summary>
            Конструктор
            </summary>
            <param name="value"> Значение </param>
        </member>
        <member name="M:TriadCompiler.BooleanValue.CalculateWith(TriadCompiler.Key)">
            <summary>
            Произвести вычисления
            </summary>
            <param name="operation"> Код унарной операции </param>
            <returns> Результат </returns>
        </member>
        <member name="M:TriadCompiler.BooleanValue.CalculateWith(TriadCompiler.Key,TriadCompiler.ConstValue)">
            <summary>
            Произвести вычисления
            </summary>
            <param name="operation"> Код бинарной операции </param>
            <param name="operand"> Второй операнд </param>
            <returns> Результат </returns>
        </member>
        <member name="P:TriadCompiler.BooleanValue.Value">
            <summary>
            Получить текущее значение
            </summary>
            <returns> Текущее значение </returns>
        </member>
        <member name="T:TriadCompiler.GraphCodeBuilder">
            <summary>
            Обобщенный построитель кода, основанный на методе Build()
            !!! Все переменные-члены этого класса должны пересоздаваться в методе Reload
            </summary>
        </member>
        <member name="M:TriadCompiler.GraphCodeBuilder.#ctor">
            <summary>
            Конструктор
            </summary>
        </member>
        <member name="M:TriadCompiler.GraphCodeBuilder.CreateBuildMethod">
            <summary>
            Создать метод, строящий структуру
            </summary>
        </member>
        <member name="M:TriadCompiler.GraphCodeBuilder.AddVarDefinition(TriadCompiler.IExprType)">
            <summary>
            Добавить объявление переменной
            </summary>
            <param name="varType">Тип переменной</param>
        </member>
        <member name="M:TriadCompiler.GraphCodeBuilder.AddBuildStatementList(System.CodeDom.CodeStatementCollection)">
            <summary>
            Добавить код, строящий структуру
            </summary>
            <param name="statementList">Последовательность операторов</param>
        </member>
        <member name="M:TriadCompiler.GraphCodeBuilder.Reload">
            <summary>
            Подготовить построитель кода для новой компиляции
            </summary>
        </member>
        <member name="M:TriadCompiler.GraphCodeBuilder.Build">
            <summary>
            Сгенерировать код
            </summary>
        </member>
        <member name="F:TriadCompiler.GraphCodeBuilder.buildGraphMethod">
            <summary>
            Метод, в котором создается структура
            </summary>
        </member>
        <member name="T:TriadCompiler.Code.Generator.TxtGenerator">
            <summary>
            Генерация текста на C#
            </summary>
        </member>
        <member name="M:TriadCompiler.Code.Generator.TxtGenerator.#ctor">
            <summary>
            Конструктор
            </summary>
        </member>
        <member name="M:TriadCompiler.Code.Generator.TxtGenerator.GenerateCode(System.String)">
            <summary>
            Создать текст на C#
            </summary>
            <param name="fileName">Имя файла</param>
        </member>
        <member name="T:TriadCompiler.Code.Generator.MemoryGenerator">
            <summary>
            Генерация текста в память
            </summary>
        </member>
        <member name="M:TriadCompiler.Code.Generator.MemoryGenerator.#ctor">
            <summary>
            Конструктор
            </summary>
        </member>
        <member name="M:TriadCompiler.Code.Generator.MemoryGenerator.AddReference(System.String)">
            <summary>
            Добавить ссылку на другую сборку
            </summary>
            <param name="fileName">Имя сборки</param>
        </member>
        <member name="M:TriadCompiler.Code.Generator.MemoryGenerator.Reload">
            <summary>
            Подготовить генератор кода к новой компиляции
            </summary>
        </member>
        <member name="M:TriadCompiler.Code.Generator.MemoryGenerator.GenerateCode(System.String)">
            <summary>
            Создать сборку в памяти
            </summary>
            <param name="fileName">Имя файла</param>
        </member>
        <member name="F:TriadCompiler.Code.Generator.MemoryGenerator.csCodeProvider">
            <summary>
            Компилятор
            </summary>
        </member>
        <member name="F:TriadCompiler.Code.Generator.MemoryGenerator.referenceAssembliesList">
            <summary>
            Сборки, на которые нужно установить ссылки
            </summary>
        </member>
        <member name="T:TriadCompiler.Parser.InfProcedure.Header.InfHeader">
            <summary>
            Разбор заголовка объекта
            </summary>
        </member>
        <member name="F:TriadCompiler.Parser.InfProcedure.Header.InfHeader.startKeys">
            <summary>
            Стартовые символа заголовка ИП
            </summary>
        </member>
        <member name="M:TriadCompiler.Parser.InfProcedure.Header.InfHeader.Parse(TriadCompiler.EndKeyList,TriadCompiler.IProcedureType)">
            <summary>
            Заголовок объекта
            </summary>
            <syntax>{ ParameterList | Interface | OutList }</syntax>
            <param name="endKeys">Множество допустимых конечных символов</param>
            <param name="ipType">Тип ИП</param>
        </member>
        <member name="P:TriadCompiler.Parser.InfProcedure.Header.InfHeader.StartKeys">
            <summary>
            Стартовые символа заголовка ИП
            </summary>
        </member>
        <member name="T:TriadCompiler.Parser.SimCondition.Statement.IPCallInfo">
            <summary>
            Информация о вызове ИП
            </summary>
        </member>
        <member name="F:TriadCompiler.Parser.SimCondition.Statement.IPCallInfo.Type">
            <summary>
            Тип ИП
            </summary>
        </member>
        <member name="F:TriadCompiler.Parser.SimCondition.Statement.IPCallInfo.Code">
            <summary>
            Генерируемый код
            </summary>
        </member>
        <member name="F:TriadCompiler.Parser.SimCondition.Statement.IPCallInfo.ipCallNumber">
            <summary>
            Порядковый номер ИП
            </summary>
        </member>
        <member name="T:TriadCompiler.StringValue">
            <summary>
            Дочерний класс, предназначенный для хранения строковых значений.
            </summary>
        </member>
        <member name="M:TriadCompiler.StringValue.#ctor(System.String)">
            <summary>
            Конструктор
            </summary>
            <param name="value"> Значение </param>
        </member>
        <member name="M:TriadCompiler.StringValue.CalculateWith(TriadCompiler.Key,TriadCompiler.ConstValue)">
            <summary>
            Произвести вычисления
            </summary>
            <param name="operation"> Код бинарной операции </param>
            <param name="operand"> Второй операнд </param>
            <returns> Результат </returns>
        </member>
        <member name="P:TriadCompiler.StringValue.Value">
            <summary>
            Получить текущее значение
            </summary>
            <returns> Текущее значение </returns>
        </member>
        <member name="T:TriadCompiler.CharValue">
            <summary>
            Дочерний класс, предназначенный для хранения символьных значений.
            </summary>
        </member>
        <member name="M:TriadCompiler.CharValue.#ctor(System.Char)">
            <summary>
            Конструктор
            </summary>
            <param name="value"> Значение </param>
        </member>
        <member name="M:TriadCompiler.CharValue.CalculateWith(TriadCompiler.Key,TriadCompiler.ConstValue)">
            <summary>
            Произвести вычисления
            </summary>
            <param name="operation"> Код бинарной операции </param>
            <param name="operand"> Второй операнд </param>
            <returns> Результат </returns>
        </member>
        <member name="P:TriadCompiler.CharValue.Value">
            <summary>
            Получить текущее значение
            </summary>
            <returns> Текущее значение </returns>
        </member>
        <member name="T:TriadCompiler.TypeCode">
            <summary>
            Коды типов переменных
            </summary>
        </member>
        <member name="F:TriadCompiler.TypeCode.String">
            <summary>
            Строка
            </summary>
        </member>
        <member name="F:TriadCompiler.TypeCode.Integer">
            <summary>
            Целое число
            </summary>
        </member>
        <member name="F:TriadCompiler.TypeCode.Boolean">
            <summary>
            Логическое значение
            </summary>
        </member>
        <member name="F:TriadCompiler.TypeCode.Char">
            <summary>
            Символ
            </summary>
        </member>
        <member name="F:TriadCompiler.TypeCode.Real">
            <summary>
            Вещественное число
            </summary>
        </member>
        <member name="F:TriadCompiler.TypeCode.Bit">
            <summary>
            Битовая строка
            </summary>
        </member>
        <member name="F:TriadCompiler.TypeCode.UndefinedType">
            <summary>
            Неопределенный тип
            </summary>
        </member>
        <member name="F:TriadCompiler.TypeCode.Void">
            <summary>
            Пустой тип
            </summary>
        </member>
        <member name="F:TriadCompiler.TypeCode.Node">
            <summary>
            Вершина
            </summary>
        </member>
        <member name="T:TriadCompiler.TestConst">
            <summary>
            Константы Test
            </summary>
        </member>
        <member name="F:TriadCompiler.TestConst.RoutineTestFileList">
            <summary>
            Файл, содержащий список файлов с текстами тестов и файлов с кодами ошибок для рутин
            </summary>
        </member>
        <member name="F:TriadCompiler.TestConst.StructureTestFileList">
            <summary>
            Файл, содержащий список файлов с текстами тестов и файлов с кодами ошибок для структур
            </summary>
        </member>
        <member name="F:TriadCompiler.TestConst.ModelTestFileList">
            <summary>
            Файл, содержащий список файлов с текстами тестов и файлов с кодами ошибок для моделей
            </summary>
        </member>
        <member name="F:TriadCompiler.TestConst.IProcedureFileList">
            <summary>
            Файл, содержащий список файлов с текстами тестов и файлов с кодами ошибок для инф. процедур
            </summary>
        </member>
        <member name="F:TriadCompiler.TestConst.IConditionFileList">
            <summary>
            Файл, содержащий список файлов с текстами тестов и файлов с кодами ошибок для условий моделирования
            </summary>
        </member>
        <member name="F:TriadCompiler.TestConst.CanNotReadTestFileListMessage">
            <summary>
            Сообщение об ошибке открытия файла
            </summary>
        </member>
        <member name="F:TriadCompiler.TestConst.WrongFormatErrorMessage">
            <summary>
            Сообщение о неверном формате кода ожидаемой ошибки
            </summary>
        </member>
        <member name="F:TriadCompiler.TestConst.ErrorWasNotExpectedMessage">
            <summary>
            Сообщение о неожидаемой ошибке
            </summary>
        </member>
        <member name="F:TriadCompiler.TestConst.ExpectedErrorIsMissing">
            <summary>
            Сообщение об отсутствии ожидаемой ошибки
            </summary>
        </member>
        <member name="T:TriadCompiler.ObjectForTesting">
            <summary>
            Возможные объекты тестирования
            </summary>
        </member>
        <member name="F:TriadCompiler.ObjectForTesting.Structure">
            <summary>
            Структура
            </summary>
        </member>
        <member name="F:TriadCompiler.ObjectForTesting.Routine">
            <summary>
            Рутина
            </summary>
        </member>
        <member name="F:TriadCompiler.ObjectForTesting.Model">
            <summary>
            Модель
            </summary>
        </member>
        <member name="F:TriadCompiler.ObjectForTesting.InfProcedure">
            <summary>
            Информационная процедура
            </summary>
        </member>
        <member name="F:TriadCompiler.ObjectForTesting.SimCondition">
            <summary>
            Условия моделирования
            </summary>
        </member>
        <member name="F:TriadCompiler.ObjectForTesting.Design">
            <summary>
            Дезайн
            </summary>
        </member>
        <member name="T:TriadCompiler.Test">
            <summary>
            Предназначен для тестирования
            </summary>
        </member>
        <member name="M:TriadCompiler.Test.Start(TriadCompiler.ObjectForTesting)">
            <summary>
            Начать тестирование
            </summary>
            <param name="objectForTesting">Объект для тестирования</param>
        </member>
        <member name="M:TriadCompiler.Test.DoTestList(System.String,TriadCompiler.Test.TestMethod)">
            <summary>
            Выполнить список тестов
            </summary>
            <param name="testListFileName">Имя файла с тестами</param>
            <param name="testMethod">Метод тестирования</param>
        </member>
        <member name="T:TriadCompiler.Test.TestMethod">
            <summary>
            Функция тестирования
            </summary>
            <param name="io">Ввод-вывод</param>
            <param name="fileName">Имя файла</param>
        </member>
        <member name="T:TriadCompiler.BitStringSymbol">
            <summary>
            Информация о  битовой строке.
            </summary>
            <syntax>Значение у поля indexStringCode должно быть BitStringValue</syntax>
        </member>
        <member name="F:TriadCompiler.BitStringSymbol.value">
            <summary>
            Битовое значение символа
            </summary>
        </member>
        <member name="M:TriadCompiler.BitStringSymbol.#ctor">
            <summary>
            Конструктор
            </summary>
        </member>
        <member name="P:TriadCompiler.BitStringSymbol.Value">
            <summary>
            Битовое значение символа
            </summary>
        </member>
        <member name="T:TriadCompiler.InputConst">
            <summary>
            Константы Input
            </summary>
        </member>
        <member name="F:TriadCompiler.InputConst.EndOfFile">
            <summary>
            Код конца файла.
            </summary>
        </member>
        <member name="F:TriadCompiler.InputConst.CouldNotReadFileMessage">
            <summary>
            Сообщение об ошибке чтения файла
            </summary>
        </member>
        <member name="F:TriadCompiler.InputConst.TabSize">
            <summary>
            Размер табуляции, измеренный в пробелах
            </summary>
        </member>
        <member name="T:TriadCompiler.Input">
            <summary>
            Класс Input отвечает за абстрактные операции по вводу данных.
            Данные можно читать построчно при помощи переопределяемой функции GetLine.
            Эта функция должна возвращать null  в случае, когда данные кончились.
            </summary>
        </member>
        <member name="M:TriadCompiler.Input.GetLine">
            <summary>
            Построчное чтение
            </summary>
            <returns>Прочитанный символ (null, если читать нечего)</returns>
        </member>
        <member name="T:TriadCompiler.InputFile">
            <summary>
            Класс InputFile отвечает за операции по вводу данных из файлов.
            Данные можно читать построчно при помощи функции GetLine.
            Если данные в файле прочитаны, то GetLine возвращает null.
            Конструктору нужно передать имя читаемого файла.
            </summary>
        </member>
        <member name="M:TriadCompiler.InputFile.#ctor(System.String)">
            <summary>
            Конструктор
            </summary>
            <param name="fileName">Имя читаемого файла</param>
        </member>
        <member name="M:TriadCompiler.InputFile.GetLine">
            <summary>
            Построчное чтение
            </summary>
            <returns>Прочитанный символ (null, если читать нечего)</returns>
        </member>
        <member name="T:TriadCompiler.EventArea">
            <summary>
            Обработчик области видимости событий
            </summary>
        </member>
        <member name="F:TriadCompiler.EventArea.instance">
            <summary>
            Экземпляр
            </summary>
        </member>
        <member name="M:TriadCompiler.EventArea.#ctor">
            <summary>
            Закрытый конструктор
            </summary>
        </member>
        <member name="M:TriadCompiler.EventArea.ClearEventCallList">
            <summary>
            Очистить множество зарегистрированных обращений к событиям
            </summary>
        </member>
        <member name="M:TriadCompiler.EventArea.RegisterEvent(System.String)">
            <summary>
            Зарегистрировать событие
            </summary>
            <param name="eventName">Имя события</param>
        </member>
        <member name="M:TriadCompiler.EventArea.RegisterEventReference(System.String)">
            <summary>
            Зафиксировать обращение к событию
            </summary>
            <param name="eventName">Имя события</param>
        </member>
        <member name="M:TriadCompiler.EventArea.CheckEventDefinitions">
            <summary>
            Проверить, все ли события зафиксированные в RegisterGraphReference были
            зарегистрированны через RegisterGraph
            </summary>
        </member>
        <member name="F:TriadCompiler.EventArea.eventCallList">
            <summary>
            Список зафиксированных имен событий
            </summary>
        </member>
        <member name="P:TriadCompiler.EventArea.Instance">
            <summary>
            Экземпляр класса
            </summary>
        </member>
        <member name="T:TriadCompiler.Builder">
            <summary>
            Константы для создания кода
            </summary>
        </member>
        <member name="T:TriadCompiler.Builder.Common">
            <summary>
            Общие константы
            </summary>
        </member>
        <member name="F:TriadCompiler.Builder.Common.Namespace">
            <summary>
            Название текущего пространства имен
            </summary>
        </member>
        <member name="F:TriadCompiler.Builder.Common.BuildMethod">
            <summary>
            Название метода, строящего экземпляр design типа
            </summary>
        </member>
        <member name="F:TriadCompiler.Builder.Common.SetClassName">
            <summary>
            Название класса множеств
            </summary>
        </member>
        <member name="F:TriadCompiler.Builder.Common.NodeClassName">
            <summary>
            Название класса вершин
            </summary>
        </member>
        <member name="T:TriadCompiler.Builder.Common.ArrayInitializing">
            <summary>
            Инициализация массивов
            </summary>
        </member>
        <member name="F:TriadCompiler.Builder.Common.ArrayInitializing.InitializingClass">
            <summary>
            Имя класса-инициализатора
            </summary>
        </member>
        <member name="F:TriadCompiler.Builder.Common.ArrayInitializing.InitializingMethod">
            <summary>
            Имя метода инициализации
            </summary>
        </member>
        <member name="F:TriadCompiler.Builder.Common.ArrayInitializing.MaxIndexCount">
            <summary>
            Максимальная размерность массивов
            </summary>
        </member>
        <member name="T:TriadCompiler.Builder.Model">
            <summary>
            Модельный переменные
            </summary>
        </member>
        <member name="F:TriadCompiler.Builder.Model.BaseClass">
            <summary>
            Имя базового для моделей класса
            </summary>
        </member>
        <member name="F:TriadCompiler.Builder.Model.ModelClass">
            <summary>
            Имя класса для представления моделей
            </summary>
        </member>
        <member name="T:TriadCompiler.Builder.Model.PutRoutine">
            <summary>
            Наложение рутин
            </summary>
        </member>
        <member name="F:TriadCompiler.Builder.Model.PutRoutine.PutOnAllNodesMethod">
            <summary>
            Имя метода наложения рутины на все вершины графа
            </summary>
        </member>
        <member name="F:TriadCompiler.Builder.Model.PutRoutine.PutOnOneNodeMethod">
            <summary>
            Имя метода наложения рутины на одну вершину графа
            </summary>
        </member>
        <member name="F:TriadCompiler.Builder.Model.PutRoutine.AddPolusPairMethod">
            <summary>
            Имя метода, устанавливающего соответствие между полюсами рутины и вершины
            </summary>
        </member>
        <member name="F:TriadCompiler.Builder.Model.PutRoutine.ClearPolusPairList">
            <summary>
            Имя метода, очищающего список соответствий полюсов рутины и вершины
            </summary>
        </member>
        <member name="T:TriadCompiler.Builder.CoreName">
            <summary>
            Константы для имен объектов в ядре
            </summary>
        </member>
        <member name="F:TriadCompiler.Builder.CoreName.Name">
            <summary>
            Имя класса для представления имен объектов в ядре
            </summary>
        </member>
        <member name="F:TriadCompiler.Builder.CoreName.Range">
            <summary>
            Имя класса для представления диапазона имен объектов в ядре
            </summary>
        </member>
        <member name="F:TriadCompiler.Builder.CoreName.Compare">
            <summary>
            Имя функции для сравнения
            </summary>
        </member>
        <member name="T:TriadCompiler.Builder.Routine">
            <summary>
            Константы для рутин
            </summary>
        </member>
        <member name="F:TriadCompiler.Builder.Routine.BaseClass">
            <summary>
            Название базового класса
            </summary>
        </member>
        <member name="F:TriadCompiler.Builder.Routine.SystemTime">
            <summary>
            Имя переменной, хранящей текущее системное время
            </summary>
        </member>
        <member name="F:TriadCompiler.Builder.Routine.Initial">
            <summary>
            Название функции обработки секции initialSet
            </summary>
        </member>
        <member name="F:TriadCompiler.Builder.Routine.Print">
            <summary>
            Имя функции отладочной печати
            </summary>
        </member>
        <member name="F:TriadCompiler.Builder.Routine.DoVarChanging">
            <summary>
            Имя функции, регистрирующей изменение значений переменных в рутине
            </summary>
        </member>
        <member name="T:TriadCompiler.Builder.Routine.Block">
            <summary>
            Функции по работе с полюсами
            </summary>
        </member>
        <member name="F:TriadCompiler.Builder.Routine.Block.Available">
            <summary>
            Имя функции для разблокировки полюса
            </summary>
        </member>
        <member name="F:TriadCompiler.Builder.Routine.Block.Interlock">
            <summary>
            Имя функции для блокировки полюса
            </summary>
        </member>
        <member name="T:TriadCompiler.Builder.Routine.Send">
            <summary>
            Функции посылки сообщений
            </summary>
        </member>
        <member name="F:TriadCompiler.Builder.Routine.Send.SendMessage">
            <summary>
            Имя функции посылки сообщений
            </summary>
        </member>
        <member name="F:TriadCompiler.Builder.Routine.Send.SendMessageToAll">
            <summary>
            Имя функции посылки сообщений через все выходные полюсы
            </summary>
        </member>
        <member name="T:TriadCompiler.Builder.Routine.Receive">
            <summary>
            Константы для обработки входящих сообщений
            </summary>
        </member>
        <member name="F:TriadCompiler.Builder.Routine.Receive.ReceiveMessage">
            <summary>
            Название функции обработки сообщений
            </summary>
        </member>
        <member name="F:TriadCompiler.Builder.Routine.Receive.ReceivedPolus">
            <summary>
            Имя полюса, на который пришло сообщение
            </summary>
        </member>
        <member name="F:TriadCompiler.Builder.Routine.Receive.ReceivedMessage">
            <summary>
            Имя пришедшего сообщения
            </summary>
        </member>
        <member name="F:TriadCompiler.Builder.Routine.Receive.PolusIndex">
            <summary>
            Имя переменной, хранящей индекс полюса, принявшего сообщение
            </summary>
        </member>
        <member name="F:TriadCompiler.Builder.Routine.Receive.GetPolusIndexMethod">
            <summary>
            Имя метода, возращающего индекс полюса
            </summary>
        </member>
        <member name="T:TriadCompiler.Builder.Routine.Shedule">
            <summary>
            Планирование события
            </summary>
        </member>
        <member name="F:TriadCompiler.Builder.Routine.Shedule.EventShedule">
            <summary>
            Имя функции, планирующей события
            </summary>
        </member>
        <member name="F:TriadCompiler.Builder.Routine.Shedule.CancelEvent">
            <summary>
            Имя функции, отменяющей запланированные события
            </summary>
        </member>
        <member name="T:TriadCompiler.Builder.Structure">
            <summary>
            Константы для структуры
            </summary>
        </member>
        <member name="F:TriadCompiler.Builder.Structure.BaseClass">
            <summary>
            Имя базового для структур класса
            </summary>
        </member>
        <member name="F:TriadCompiler.Builder.Structure.GraphClass">
            <summary>
            Имя класса для представления графов
            </summary>
        </member>
        <member name="T:TriadCompiler.Builder.Structure.BuildExpr">
            <summary>
            Константы, относящиеся к построению структурных выражений
            </summary>
        </member>
        <member name="T:TriadCompiler.Builder.Structure.BuildExpr.DinamicOperation">
            <summary>
            Операции над графами
            </summary>
        </member>
        <member name="F:TriadCompiler.Builder.Structure.BuildExpr.DinamicOperation.Unite">
            <summary>
            Операция слияния
            </summary>
        </member>
        <member name="F:TriadCompiler.Builder.Structure.BuildExpr.DinamicOperation.Substract">
            <summary>
            Операция вычитания
            </summary>
        </member>
        <member name="F:TriadCompiler.Builder.Structure.BuildExpr.DinamicOperation.Intersect">
            <summary>
            Операция пересечения
            </summary>
        </member>
        <member name="F:TriadCompiler.Builder.Structure.BuildExpr.DinamicOperation.AddArcInGraph">
            <summary>
            Имя метода добавления дуги к графу
            </summary>
        </member>
        <member name="F:TriadCompiler.Builder.Structure.BuildExpr.DinamicOperation.AddEdgeInGraph">
            <summary>
            Имя метода добавления ребра к графу
            </summary>
        </member>
        <member name="T:TriadCompiler.Builder.Structure.BuildExpr.DeclareOperation">
            <summary>
            Декларативные операции
            </summary>
        </member>
        <member name="F:TriadCompiler.Builder.Structure.BuildExpr.DeclareOperation.DeclareNodeInGraph">
            <summary>
            Название метода объявления одиночной вершины в графе
            </summary>
        </member>
        <member name="F:TriadCompiler.Builder.Structure.BuildExpr.DeclareOperation.DecalarePolusInNode">
            <summary>
            Название метода объявления полюса в вершине
            </summary>
        </member>
        <member name="F:TriadCompiler.Builder.Structure.BuildExpr.DeclareOperation.DeclarePolusInAllNodesInGraph">
            <summary>
            Название метода объявления полюса во всех вершинах графа
            </summary>
        </member>
        <member name="F:TriadCompiler.Builder.Structure.BuildExpr.DeclareOperation.Complete">
            <summary>
            Название метода доопределяющего граф
            </summary>
        </member>
        <member name="T:TriadCompiler.Builder.Structure.BuildExpr.Stack">
            <summary>
            Константы, относящиеся к стеку генерации структурного выражения
            </summary>
        </member>
        <member name="F:TriadCompiler.Builder.Structure.BuildExpr.Stack.Push">
            <summary>
            Имя push метода
            </summary>
        </member>
        <member name="F:TriadCompiler.Builder.Structure.BuildExpr.Stack.PushNew">
            <summary>
            Имя pushNew метода
            </summary>
        </member>
        <member name="F:TriadCompiler.Builder.Structure.BuildExpr.Stack.PushNewUndirectPath">
            <summary>
            Имя pushPath метода
            </summary>
        </member>
        <member name="F:TriadCompiler.Builder.Structure.BuildExpr.Stack.PushNewDirectPath">
            <summary>
            Имя pushDPath метода
            </summary>
        </member>
        <member name="F:TriadCompiler.Builder.Structure.BuildExpr.Stack.PushNewUndirectCicle">
            <summary>
            Имя pushCicle метода
            </summary>
        </member>
        <member name="F:TriadCompiler.Builder.Structure.BuildExpr.Stack.PushNewDirectCicle">
            <summary>
            Имя pushDCicle метода
            </summary>
        </member>
        <member name="F:TriadCompiler.Builder.Structure.BuildExpr.Stack.PushNewUndirectStar">
            <summary>
            Имя pushStar метода
            </summary>
        </member>
        <member name="F:TriadCompiler.Builder.Structure.BuildExpr.Stack.PushNewDirectStar">
            <summary>
            Имя pushDStar метода
            </summary>
        </member>
        <member name="F:TriadCompiler.Builder.Structure.BuildExpr.Stack.Pop">
            <summary>
            Имя pop метода
            </summary>
        </member>
        <member name="F:TriadCompiler.Builder.Structure.BuildExpr.Stack.First">
            <summary>
            Имя, по которому можно обратиться к самому верхнему элементу стека
            </summary>
        </member>
        <member name="F:TriadCompiler.Builder.Structure.BuildExpr.Stack.Second">
            <summary>
            Имя, по которому можно обратиться ко второму элементу стека
            </summary>
        </member>
        <member name="T:TriadCompiler.Builder.IProcedure">
            <summary>
            Константы для информационной процедуры
            </summary>
        </member>
        <member name="F:TriadCompiler.Builder.IProcedure.BaseClass">
            <summary>
            Название базового класса
            </summary>
        </member>
        <member name="F:TriadCompiler.Builder.IProcedure.GetValueForVar">
            <summary>
            Название функции получения значения для переменной в информационных процедурах
            </summary>
        </member>
        <member name="F:TriadCompiler.Builder.IProcedure.SetValueForVar">
            <summary>
            Название функции установления значения для переменной в информационных процедурах
            </summary>
        </member>
        <member name="F:TriadCompiler.Builder.IProcedure.RegisterSpyHandler">
            <summary>
            Название функции, регистрирующей обработчик на изменение объекта, за которым следит информационная процедура 
            </summary>
        </member>
        <member name="F:TriadCompiler.Builder.IProcedure.RegisterSpyObject">
            <summary>
            Название функции, регистрирующей в информационной процедуре spy-объект
            </summary>
        </member>
        <member name="F:TriadCompiler.Builder.IProcedure.DoProcessing">
            <summary>
            Секция заключительной обработки
            </summary>
        </member>
        <member name="F:TriadCompiler.Builder.IProcedure.RegisterAllSpyObjects">
            <summary>
            Название функции, регистрирующей все spy-объекты в ИП
            </summary>
        </member>
        <member name="F:TriadCompiler.Builder.IProcedure.GetOutVariables">
            <summary>
            Название функции, возращающей все out-переменные в ИП
            </summary>
        </member>
        <member name="F:TriadCompiler.Builder.IProcedure.GetSpyObject">
            <summary>
            Функция получения объекта слежения
            </summary>
        </member>
        <member name="F:TriadCompiler.Builder.IProcedure.SpyObject">
            <summary>
            Тип объекта слежения
            </summary>
        </member>
        <member name="T:TriadCompiler.Builder.IProcedure.Handling">
            <summary>
            Секция handling
            </summary>
        </member>
        <member name="F:TriadCompiler.Builder.IProcedure.Handling.DoHandling">
            <summary>
            Секция обработки
            </summary>
        </member>
        <member name="F:TriadCompiler.Builder.IProcedure.Handling.SpyObjectNameInDoHandling">
            <summary>
            Имя изменившегося объекта в секции handling
            </summary>
        </member>
        <member name="F:TriadCompiler.Builder.IProcedure.Handling.MessageField">
            <summary>
            Имя поля в spy-объекте, содержащее пришедшее сообщение
            </summary>
        </member>
        <member name="T:TriadCompiler.Builder.ICondition">
            <summary>
            Константы для условий моделирования
            </summary>
        </member>
        <member name="F:TriadCompiler.Builder.ICondition.BaseClass">
            <summary>
            Название базового класса
            </summary>
        </member>
        <member name="F:TriadCompiler.Builder.ICondition.DoCheck">
            <summary>
            Метод, проверяющий условия окончания моделирования
            </summary>
        </member>
        <member name="F:TriadCompiler.Builder.ICondition.AddIProcedure">
            <summary>
            Метод, создающий ИП
            </summary>
        </member>
        <member name="F:TriadCompiler.Builder.ICondition.GetIProcedure">
            <summary>
            Метод, возвращающий добавленную ИП
            </summary>
        </member>
        <member name="F:TriadCompiler.Builder.ICondition.InitializeIProcedure">
            <summary>
            Метод, инициализирующий зарегистрированную ИП
            </summary>
        </member>
        <member name="F:TriadCompiler.Builder.ICondition.CurrentModel">
            <summary>//by jum
            Граф модели
            </summary>
        </member>
        <member name="T:TriadCompiler.Builder.Design">
            <summary>
            Константы для дизайна
            </summary>
        </member>
        <member name="F:TriadCompiler.Builder.Design.BaseClass">
            <summary>
            Метод начала моделирования 
            </summary>
        </member>
        <member name="F:TriadCompiler.Builder.Design.DoSimulate">
            <summary>
            Метод начала моделирования 
            </summary>
        </member>
        <member name="F:TriadCompiler.Builder.Design.GetICondition">
            <summary>
            Метод, возвращающий добавленное условие моделирования
            </summary>
        </member>
        <member name="F:TriadCompiler.Builder.Design.CreateSpyObject">
            <summary>
            Функция создания объекта слежения
            </summary>
        </member>
        <member name="F:TriadCompiler.Builder.Design.SpyObjectType">
            <summary>
            Имя класса типа spy-объектов
            </summary>
        </member>
        <member name="T:TriadCompiler.Parser.Routine.Statement.OutStatement">
            <summary>
            Разбор оператора посылик сообщений
            </summary>
        </member>
        <member name="M:TriadCompiler.Parser.Routine.Statement.OutStatement.Parse(TriadCompiler.EndKeyList)">
            <summary>
            Оператор посылки сообщений
            </summary>
            <syntax>Out Expression #Through PolusVariable {,PolusVariable}#</syntax>
            <param name="endKeys">Множество конечных символов</param>
            <returns>Представление для генерации кода</returns>
        </member>
        <member name="T:TriadCompiler.Parser.Model.DesignVar.DesignVariable">
            <summary>
            Разбор дизайн-переменной
            </summary>
        </member>
        <member name="M:TriadCompiler.Parser.Model.DesignVar.DesignVariable.Parse(TriadCompiler.EndKeyList,TriadCompiler.DesignTypeCode)">
            <summary>
            Обращение к design переменной
            </summary>
            <param name="endKeys">Множество конечных символов</param>
            <param name="expectedTypeCode">Ожидаемый тип design переменной</param>
            <syntax>Identificator #[ Expression {, Expression } ]#</syntax>
            <returns>Описание переменной</returns>
        </member>
        <member name="T:TriadCompiler.Parser.Common.Header.IncludeSection">
            <summary>
            Разбор секции подключения внешних модулей
            </summary>
        </member>
        <member name="M:TriadCompiler.Parser.Common.Header.IncludeSection.Parse(TriadCompiler.EndKeyList,System.Collections.Generic.List{TriadCompiler.Key})">
            <summary>
            Секция подключения
            </summary>
            <param name="endKeys">Множество допустимых конечных символов</param>
            <param name="allowedTypeList">Множество конструкций, которые можно подключать</param>
            <syntax>{ IncludeStatement }</syntax>
        </member>
        <member name="M:TriadCompiler.Parser.Common.Header.IncludeSection.IncludeStatement(TriadCompiler.EndKeyList,System.Collections.Generic.List{TriadCompiler.Key})">
            <summary>
            Оператор подкючения
            </summary>
            <param name="endKeys">Множество допустимых конечных символов</param>
            <param name="allowedTypeList">Множество конструкций, которые можно подключать</param>
            <syntax>Structure | Routine | InfProcedure | Model | ModelCondition
            Identificator #ParameterList# from String </syntax>
        </member>
        <member name="T:TriadCompiler.EndKeyList">
            <summary>
            Множество допустимых конечных символов
            </summary>
        </member>
        <member name="M:TriadCompiler.EndKeyList.Contains(TriadCompiler.Key)">
            <summary>
            Проверка, содержится ли указанный символ в множестве
            </summary>
            <param name="key">Указанный символ</param>
            <returns>True, если содержится</returns>
        </member>
        <member name="M:TriadCompiler.EndKeyList.UniteWith(System.Collections.Generic.List{TriadCompiler.Key})">
            <summary>
            Объединение текущего и переданных множеств символов
            </summary>
            <param name="keyList">Множества символов</param>
            <returns>Итоговое множество</returns>
        </member>
        <member name="M:TriadCompiler.EndKeyList.UniteWith(TriadCompiler.Key[])">
            <summary>
            Объединение множества символов с отдельными символами
            </summary>
            <param name="keys">Отдельные символы</param>
            <returns>Итоговое множество</returns>
        </member>
        <member name="M:TriadCompiler.EndKeyList.GetLastKeys">
            <summary>
            Получить список последний раз добавленных символов
            </summary>
            <returns>Список символов</returns>
        </member>
        <member name="M:TriadCompiler.EndKeyList.Clone">
            <summary>
            Копировать множество символов
            </summary>
            <returns>Новое множество</returns>
        </member>
        <member name="F:TriadCompiler.EndKeyList.allowedKeys">
            <summary>
            Список допустимых значений
            </summary>
        </member>
        <member name="T:TriadCompiler.Parser.Common.Expr.Const.Constant">
            <summary>
            Разбор арифметических констант
            </summary>
        </member>
        <member name="M:TriadCompiler.Parser.Common.Expr.Const.Constant.Parse(TriadCompiler.EndKeyList)">
            <summary>
            Константа
            </summary>
            <syntax>StringValue | CharValue | IntegerValue | RealValue | BitStringValue</syntax>
            <param name="endKeys">Множество конечных символов</param>
            <returns>Информация о константе</returns>
        </member>
        <member name="T:TriadCompiler.Parser.Common.Ev.EventVar">
            <summary>
            Разбор имени события
            </summary>
        </member>
        <member name="M:TriadCompiler.Parser.Common.Ev.EventVar.Parse(TriadCompiler.EndKeyList,System.Boolean)">
            <summary>
            Разбор
            </summary>
            <param name="endKeys">Допустимые конечные символы</param>
            <param name="checkRegistration">Необходимость проверки регистрации</param>
            <returns>Описание события</returns>
        </member>
        <member name="T:TriadCompiler.Parser.Common.Expr.Const.ConstantSet">
            <summary>
            Константное множество
            </summary>
        </member>
        <member name="M:TriadCompiler.Parser.Common.Expr.Const.ConstantSet.Parse(TriadCompiler.EndKeyList)">
            <summary>
            Константное множество
            </summary>
            <syntax>[ { Constant { , Constant } } ]</syntax>
            <param name="endKeys">Множество конечных символов</param>
            <returns>Информация о константе</returns>
        </member>
        <member name="T:TriadCompiler.EmptySetType">
            <summary>
            Тип пустого мн-ва
            </summary>
        </member>
        <member name="M:TriadCompiler.EmptySetType.#ctor">
            <summary>
            Конструктор
            </summary>
        </member>
    </members>
</doc>
