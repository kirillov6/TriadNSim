using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using TriadCore;
using DrawingPanel; // ?????????
using System.Reflection;
using System.Runtime.Remoting;
using System.Windows.Forms;

namespace TriadNSim
{
    public class NSSimCondition : ICondition 
    {
        private SimulationInfo simInfo;
        private List<string> ipResults;

        public NSSimCondition(SimulationInfo simInfo)
        {
            this.simInfo = simInfo;
            ipResults = new List<string>();
        }
        
        public override void DoInitialize() 
        {
            ipResults.Clear();
            int nCount = 0;
            foreach (NetworkObject spyObject in simInfo.SpyNodes)
            {
                if (spyObject.ConnectedIPs.Count == 0)
                    continue;

                foreach (ConnectedIP ip in spyObject.ConnectedIPs)
                {
                    string ipName = ip.IP.Name;
                    string result = string.Empty;
                    if (ip.IP.ReturnCode != TriadCompiler.TypeCode.UndefinedType)
                    {
                        result = spyObject.Name + "_" + ipName;
                    }
                    string sAssemblyName = "TriadCore";
                    if (!ip.IP.IsStandart)
                    {
                        sAssemblyName = ip.IP.Name;
                        Assembly ass = Assembly.LoadFile(Application.StartupPath + "\\" + sAssemblyName + ".dll");
                    }
                    object obj = AppDomain.CurrentDomain.CreateInstanceAndUnwrap(sAssemblyName, "TriadCore." + ipName);
                    IProcedure iprocedure = obj as IProcedure;
                    AddIProcedure(iprocedure, nCount++);
                    Type ipType = iprocedure.GetType();
                    MethodInfo mi = ipType.GetMethod("RegisterSpyObjects");
                    object[] parameters = null;
                    if (ip.Params.Count > 0)
                    {
                        result += "(";
                        parameters = new object[ip.Params.Count];
                        for (int i = 0, nParamCount = ip.IP.Params.Count; i < nParamCount; i++)
                        {
                            if (i > 0)
                                result += ",";
                            result += ip.Params[i];
                            IPParam param = ip.IP.Params[i];
                            parameters[i] = GetSpyObject(new CoreName(spyObject.Name + "_" + ipName + "_" + ip.Params[i] + i.ToString()));
                        }
                        result += ")";
                    }
                    mi.Invoke(iprocedure, parameters);
                    ipResults.Add(result);
                }
            }
            InitializeAllIProcedure();
        }

        public void RegisterSpyObjects(SpyObject objectInfo, String formalName)
        {
            RegisterSpyObject(objectInfo, new CoreName(formalName));
            RegisterSpyHandler(objectInfo, DoHandling);
        }
        
        public void GetOutVariables() 
        {
        }
        
        protected override void DoHandling(SpyObject spyObject, Double SystemTime) 
        {
            String message = spyObject.Data;
        }
        
        public void DoProcessing() 
        {
        }

        //private bool b = true;

        public override Boolean DoCheck(Double SystemTime, Graph CurrentModel) 
        {
            //if (SystemTime > 50 && b)
            //{
            //    b = false;
            //    foreach (NetworkObject obj in simInfo.Nodes)
            //    {
            //        if (obj.Type == ENetworkObjectType.Client)
            //        {
            //            ClientRoutine routine = new ClientRoutine(1);
            //            routine.ClearPolusPairList();
            //            foreach (DrawingPanel.Polus polus in obj.Routine.Poluses)
            //                routine.AddPolusPair(new CoreName(polus.Name), new CoreName(polus.Name));
            //            CurrentModel.RegisterRoutine(new CoreName(obj.Name), routine);
            //        }
            //    }
            //}
            if (SystemTime >= simInfo.TerminateTime) 
            {
                int nIPCount = GetIProcedureCount();
                for (int i = 0; i < nIPCount; i++)
                {
                    string res = ipResults[i];
                    if (res.Length > 0)
                    {
                        IProcedure ip = GetIProcedure(i);
                        Type ipType = ip.GetType();
                        MethodInfo mi = ipType.GetMethod("DoProcessing");
                        object ipRes = mi.Invoke(ip, null);
                        if (ipRes != null)
                            Simulation.IPResults.Add(res + " : " + ipRes.ToString());
                    }
                }
                return false;
            }
            return true;
        }
    }
}
